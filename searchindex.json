[{
  "section": "Articles",
  "slug": "/articles/bp-apgrouptagts/index/",
  "title": "Setting a Group Tag During a Configuration Manager Task Sequence",
  "description": "",
  "date": "December 14, 2023",
  "image": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n\n\n\n\n\n  \n\n  \n  \n    \n      \n    \n\n\n    \n    \n\n\n    \n    \n      \n      \n    \n    \n    \n\n\n    \n    \n      \n      \n        \n        \n        \n        \n        \n        \n\n\n        \n        \n\n\n        \u003cimg\n          \n            src=\"/images/title/bp-apgrouptagts_hud7d0fd1b9427eed38d4744006c15c23c_179159_420x0_resize_q90_h2_lanczos.webp\" loading=\"lazy\" decoding=\"async\"\n          \n\n          alt=\"\"\n          class=\"  img\"\n          width=\"420\"\n          height=\"218\"\n          onerror=\"this.onerror='null';this.src='\\/images\\/title\\/bp-apgrouptagts_hud7d0fd1b9427eed38d4744006c15c23c_179159_420x0_resize_q90_lanczos.jpg';\" /\u003e\n\n        \n      \n      \n    \n    \n  \n\n\n  \n",
  "imageSM": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n\n\n\n\n\n  \n\n  \n  \n    \n      \n    \n\n\n    \n    \n\n\n    \n    \n      \n      \n    \n    \n    \n\n\n    \n    \n      \n      \n        \n        \n        \n        \n        \n        \n          \n          \n          \n          \n        \n\n\n        \n        \n\n\n        \u003cimg\n          \n            src=\"/images/title/bp-apgrouptagts_hud7d0fd1b9427eed38d4744006c15c23c_179159_100x100_fill_q90_h2_lanczos_smart1.webp\" loading=\"lazy\" decoding=\"async\"\n          \n\n          alt=\"\"\n          class=\"  img\"\n          width=\"100\"\n          height=\"100\"\n          onerror=\"this.onerror='null';this.src='\\/images\\/title\\/bp-apgrouptagts_hud7d0fd1b9427eed38d4744006c15c23c_179159_100x100_fill_q90_lanczos_smart1.jpg';\" /\u003e\n\n        \n      \n      \n    \n    \n  \n\n\n  \n",
  "searchKeyword": "",
  "categories": "Configuration Manager, Intune",
  "tags": "ConfigMgr, Configuration Manager, Group Tag, Autopilot, Intune",
  "content":"In this post I\u0026rsquo;m going to talk about using the Windows autopilot deployment for existing devices Task sequence in configuration manager and modifying that task sequence to set a group tag during the process. You may know that traditionally this tasks sequence is used to \u0026lsquo;build\u0026rsquo; devices and have them ready to start the autopilot process. I had a customer recently that had that very need. They had purchased a large number of machines that were delivered with Windows 10 installed and not Windows 11. As the customer was on their Windows 11 uplift journey already they were a bit disappointed to say the least and they opted to create a Configuration Manager task sequence to prep them for autopilot. That prep process was to include wiping the device and re-loading with Windows 11, adding the device to the tenants autopilot devices AND setting a group tag to drop the device into pre-created groups that control the apps and configurations the devices are going to receive during autopilot. So\u0026hellip; lets get started\u0026hellip; App Registration The first thing you are going to need to create is an application registration . This app registration allows you to add devices to autopilot and set a group tag. We will work on the basis of least privilege and only allow the app registration a singular permission. The application registration will be called upon during out task sequence where we will pass our secret key to allow us to use it.\nWithin the Microsoft Entra ID portal, navigate to App Registrations. Create a new Registration and name it as you see fit, in my case I called it \u0026ldquo;Autopilot GroupTag\u0026rdquo; you know, because I\u0026rsquo;m super inventive. You will now need to add the permission DeviceManagementServiceConfig.ReadWrite.All, as a Microsoft Graph Application Permission and grant consent. Finally you will need to create an application Secret and copy the secret key (Take note of the expiry date and set reminders for yourself and also, ensure to store the key safely) Before continuing on you will need the following items:\nYour Directory (tenant) ID (Overview Blade of your app registration) The application (Client) ID (Overview Blade of your app registration) Your secret value (Certificates and Secrets Blade of your app registration) Task Sequence OK, lets now configure the task sequence. First create your autopilot task sequence following the Microsoft documentation from here .\nI wont regurgitate the task sequence configuration steps from the above documentation, however once you have the task sequence set up we\u0026rsquo;re going to make some adjustments. We are firstly going to create four variables\nTenantID AppID SecretID GroupTag For the SecretID, I strongly suggest you tick the box to \u0026ldquo;Do Not Display this Value\u0026rdquo;. This at least forms some sort of security for you as the secret is the key to the app registration and what it can do. Keeping that secure may or may not be important to you:\nA description containing the expiry date might help in the event of failures too :-) The Script Next comes the fun bit. I lost a considerable amount of time testing this with numerous faults and errors. I was hoping that, I could use the Get-WindowsAuotpiloInfo script during the sequence to \u0026lsquo;just get it done\u0026rsquo;. But I ran into multiple issues. Namely, installing modules during WinPE because no matter what I tried, I was unable to leverage \u0026ldquo;Install-Module\u0026rdquo; correctly. The original script has some pre-req modules and so wouldn\u0026rsquo;t run without them present. This was causing me a headache. I then found the Recast Software community post (see references) where they used Invoke-Webrequest to pull in the module and then essentially move it to the correct location. This worked a treat.\nHere is the script I used. Explanation below.\n\u0026lt;# .SYNOPSIS Installs Get-WindowsAuopilotInfo.ps1 and calls it using the parameter .DESCRIPTION * Used alongside a task sequence within Configuration Manager, this script was uses to add the device to autopilot and set a GroupTa .AUTHOR Jonathan Fallis - www.deploymentshare.com .VERSION 1.0.1 - Added Error Logging 1.0.0 - Original .EXAMPLE .\\Set-AutopilotGroupTag -TenantID \u0026#34;123456\u0026#34; -AppID \u0026#34;234567\u0026#34; -SecretID \u0026#34;345678\u0026#34; -GroupTag \u0026#34;AutopilotDevice\u0026#34; #\u0026gt; Param( [Parameter(Mandatory=$true)] [string]$TenantID, [Parameter(Mandatory=$true)] [string]$AppID, [Parameter(Mandatory=$true)] [string]$SecretID, [Parameter(Mandatory=$true)] [string]$GroupTag ) $WorkingDir = $env:TEMP $LogFilePath = \u0026#34;C:\\Windows\\Temp\\Set-GroupTag.log\u0026#34; [System.Environment]::SetEnvironmentVariable(\u0026#39;LOCALAPPDATA\u0026#39;,\u0026#34;$env:SystemDrive\\Windows\\system32\\config\\systemprofile\\AppData\\Local\u0026#34;) #Function for Error Logging Function Write-log { [CmdletBinding()] Param( [parameter(Mandatory = $true)] [String]$Path, [parameter(Mandatory = $true)] [String]$Message, [parameter(Mandatory = $true)] [String]$Component, [Parameter(Mandatory = $true)] [ValidateSet(\u0026#39;Info\u0026#39;, \u0026#39;Warning\u0026#39;, \u0026#39;Error\u0026#39;)] [String]$Type ) switch ($Type) { \u0026#39;Info\u0026#39; { [int]$Type = 1 } \u0026#39;Warning\u0026#39; { [int]$Type = 2 } \u0026#39;Error\u0026#39; { [int]$Type = 3 } } # Create a log entry $Content = \u0026#34;\u0026lt;![LOG[$Message]LOG]!\u0026gt;\u0026#34; + ` \u0026#34;\u0026lt;time=`\u0026#34;$(Get-Date -Format \u0026#39;HH:mm:ss.ffffff\u0026#39;)`\u0026#34; \u0026#34; + ` \u0026#34;date=`\u0026#34;$(Get-Date -Format \u0026#39;M-d-yyyy\u0026#39;)`\u0026#34; \u0026#34; + ` \u0026#34;component=`\u0026#34;$Component`\u0026#34; \u0026#34; + ` \u0026#34;context=`\u0026#34;$([System.Security.Principal.WindowsIdentity]::GetCurrent().Name)`\u0026#34; \u0026#34; + ` \u0026#34;type=`\u0026#34;$Type`\u0026#34; \u0026#34; + ` \u0026#34;thread=`\u0026#34;$([Threading.Thread]::CurrentThread.ManagedThreadId)`\u0026#34; \u0026#34; + ` \u0026#34;file=`\u0026#34;`\u0026#34;\u0026gt;\u0026#34; # Write the line to the log file Add-Content -Path $Path -Value $Content } #Test for internet connectivty using 8.8.8.8 If (Test-Connection 8.8.8.8 -quiet) { Write-Log -Type Info -Message \u0026#34;Internet Connection OK\u0026#34; -Component \u0026#34;Internet Check\u0026#34; -Path $LogFilePath } Else { Write-Log -Type Error -Message \u0026#34;Internet Connection check failed\u0026#34; -Component \u0026#34;Internet Check\u0026#34; -Path $LogFilePath ; Exit 1 } #Enable TLS 1.2 Try { [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12 Write-Log -Type Info -Message \u0026#34;Setting TLS1.2 Completed Successfully\u0026#34; -Component \u0026#34;TLS 1.2 Check\u0026#34; -Path $LogFilePath } Catch { Write-Log -Type Error -Message ($_ | Out-String) -Component \u0026#34;TLS 1.2 Check\u0026#34; -Path $LogFilePath } #PowerShellGet from PSGallery URL Try { if (!(Get-Module -Name PowerShellGet)){ $PowerShellGetURL = \u0026#34;https://psg-prod-eastus.azureedge.net/packages/powershellget.2.2.5.nupkg\u0026#34; Write-Log -Type Info -Message \u0026#34;URL set to $PowerShellGetURL\u0026#34; -Component \u0026#34;PowerShellGet Check\u0026#34; -Path $LogFilePath Invoke-WebRequest -UseBasicParsing -Uri $PowerShellGetURL -OutFile \u0026#34;$WorkingDir\\powershellget.2.2.5.zip\u0026#34; Write-Log -Type Info -Message \u0026#34;Downloaded PowerShellGet \u0026#34; -Component \u0026#34;PowerShellGet Check\u0026#34; -Path $LogFilePath $Null = New-Item -Path \u0026#34;$WorkingDir\\2.2.5\u0026#34; -ItemType Directory -Force Expand-Archive -Path \u0026#34;$WorkingDir\\powershellget.2.2.5.zip\u0026#34; -DestinationPath \u0026#34;$WorkingDir\\2.2.5\u0026#34; Write-Log -Type Info -Message \u0026#34;Unzipped PowerShellGet \u0026#34; -Component \u0026#34;PowerShellGet Check\u0026#34; -Path $LogFilePath $Null = New-Item -Path \u0026#34;$env:ProgramFiles\\WindowsPowerShell\\Modules\\PowerShellGet\u0026#34; -ItemType Directory -ErrorAction SilentlyContinue Move-Item -Path \u0026#34;$WorkingDir\\2.2.5\u0026#34; -Destination \u0026#34;$env:ProgramFiles\\WindowsPowerShell\\Modules\\PowerShellGet\\2.2.5\u0026#34; Write-Log -Type Info -Message \u0026#34;Moved PowerShellGet to $WorkingDir\u0026#34; -Component \u0026#34;PowerShellGet Check\u0026#34; -Path $LogFilePath } } Catch { Write-Log -Type Error -Message ($_ | Out-String) -Component \u0026#34;PowerShellGet Check\u0026#34; -Path $LogFilePath } #PackageManagement from PSGallery URL Try { if (!(Get-Module -Name PackageManagement)){ $PackageManagementURL = \u0026#34;https://psg-prod-eastus.azureedge.net/packages/packagemanagement.1.4.7.nupkg\u0026#34; Write-Log -Type Info -Message \u0026#34;URL set to $PackageManagementURL\u0026#34; -Component \u0026#34;PackageManagement Check\u0026#34; -Path $LogFilePath Invoke-WebRequest -UseBasicParsing -Uri $PackageManagementURL -OutFile \u0026#34;$WorkingDir\\packagemanagement.1.4.7.zip\u0026#34; Write-Log -Type Info -Message \u0026#34;Downloaded PackageManagement\u0026#34; -Component \u0026#34;PackageManagement Check\u0026#34; -Path $LogFilePath $Null = New-Item -Path \u0026#34;$WorkingDir\\1.4.7\u0026#34; -ItemType Directory -Force Expand-Archive -Path \u0026#34;$WorkingDir\\packagemanagement.1.4.7.zip\u0026#34; -DestinationPath \u0026#34;$WorkingDir\\1.4.7\u0026#34; Write-Log -Type Info -Message \u0026#34;Unzipped PackageManagement\u0026#34; -Component \u0026#34;PackageManagement Check\u0026#34; -Path $LogFilePath $Null = New-Item -Path \u0026#34;$env:ProgramFiles\\WindowsPowerShell\\Modules\\PackageManagement\u0026#34; -ItemType Directory -ErrorAction SilentlyContinue Move-Item -Path \u0026#34;$WorkingDir\\1.4.7\u0026#34; -Destination \u0026#34;$env:ProgramFiles\\WindowsPowerShell\\Modules\\PackageManagement\\1.4.7\u0026#34; Write-Log -Type Info -Message \u0026#34;Moved PackageManagement to $WorkingDir\u0026#34; -Component \u0026#34;PackageManagement Check\u0026#34; -Path $LogFilePath } } Catch { Write-Log -Type Error -Message ($_ | Out-String) -Component \u0026#34;PackageManagement Check\u0026#34; -Path $LogFilePath } #Import PowerShellGet if (Import-Module PowerShellGet) { Write-Log -Type Info -Message \u0026#34;PowerShellGet Module Imported OK\u0026#34; -Component \u0026#34;PowerShellGet Import\u0026#34; -Path $LogFilePath } Else { Write-Log -Type Error -Message ($_ | Out-String) -Component \u0026#34;PowerShellGet Import\u0026#34; -Path $LogFilePath ; Exit 1 } #Install the script if (Install-Script Get-WindowsAutopilotinfo -Force) { Write-Log -Type Info -Message \u0026#34;Get-WindowsAutopilotInfo Installed OK\u0026#34; -Component \u0026#34;Get-WindowsAutopilotInfo Install\u0026#34; -Path $LogFilePath } Else { Write-Log -Type Error -Message ($_ | Out-String) -Component \u0026#34;Get-WindowsAutopilotInfo Install\u0026#34; -Path $LogFilePath ; Exit 1 } #Run the script if (Get-WindowsAutopilotinfo -Online -TenantId $TenantID -AppId $AppID -AppSecret $SecretID -Grouptag $GroupTag) { Write-Log -Type Info -Message \u0026#34;Get-WindowsAutopilotInfo executed successfully\u0026#34; -Component \u0026#34;Running Get-WindowsAutopilotInfo\u0026#34; -Path $LogFilePath } Else { Write-Log -Type Error -Message ($_ | Out-String) -Component \u0026#34;Get-WindowsAutopilotInfo Install\u0026#34; -Path $LogFilePath ; Exit 1 } Changes 08/01/2024 - Added Error Logging to the script to output to a log file in C:\\Windows\\Temp - aids troubleshooting. Script Step Lets create a PowerShell Script step in our Task sequence.\nWe will opt to past a script into the step;\nWe will also configure the script to pass in four parameters.\nNotice that the script requires four parameters passing to it and would you believe it!? they match the task sequence variables we set up earlier. Wonderful. to reference a task sequence variable in a task sequence step you surround the text with \u0026ldquo;%\u0026rdquo; like in the above image.\nWithin the step you will notice the following;\n[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12 This enables TLS 1.2. This is used to overcome networking issues experienced when attempting to go out to the www to receive content. There are then two sections which manually pull in the modules PowerShellGet and PackageManagement, both required to install the \u0026ldquo;Get-WindowsAutopilotInfo\u0026rdquo; script (which ensures the latest version is always pulled in) and to run it using the parameters we have passed in because\u0026hellip; the script Get-WindowsAutopilotInfo uses the same parameter names we have passed in from our task sequence variables.\nIn testing I see the devices appear in Autopilot devices; And then shortly after the device that is \u0026ldquo;Not Assigned\u0026rdquo; changes to pending, and lastly - assigned https://deploymentshare.com/img/BP-APGroupTagTS-4.png does not exist\rAnd VOILA! Device present and accounted for.\nHappy Customer.\nTesting Once testing begun there was an issue we noticed. Shift+F10 was not available in the event of a failure which was odd. This is controlled by the file C:\\Windows\\Setup\\Scripts\\DisableCMDRequest.TAG which we can remove with a simple Run Command Line Step.\nImprovements / Ideas If you are not too scared about human-error, you could use something like ServiceUI to prompt the end user for text input to set the group tag and configure the variable GroupTag to the input of that. You could have a dynamic group tag set on hardware type using WMI queries. If you know a certain model requires a certain group tag you can set this condition on the Options tab of the task sequence variable step. Thanks for reading Jonathan.\nLocation Link Powershell is Fun Upload Autopilot Hardware Hash Recast Software Enable PSGallery in a Task Sequence "},{
  "section": "Articles",
  "slug": "/articles/bp-applications/index/",
  "title": "How to build apps in Endpoint Manager",
  "description": "",
  "date": "March 27, 2021",
  "image": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n\n\n\n\n\n  \n\n  \n  \n    \n      \n    \n\n\n    \n    \n\n\n    \n    \n      \n      \n    \n    \n    \n\n\n    \n    \n      \n      \n        \n        \n        \n        \n        \n        \n\n\n        \n        \n\n\n        \u003cimg\n          \n            src=\"/images/title/bp-applications_hu67d5d2c33bb037b3032c6625abb7dfb5_223794_420x0_resize_q90_h2_lanczos_3.webp\" loading=\"lazy\" decoding=\"async\"\n          \n\n          alt=\"\"\n          class=\"  img\"\n          width=\"420\"\n          height=\"224\"\n          onerror=\"this.onerror='null';this.src='\\/images\\/title\\/bp-applications_hu67d5d2c33bb037b3032c6625abb7dfb5_223794_420x0_resize_lanczos_3.png';\" /\u003e\n\n        \n      \n      \n    \n    \n  \n\n\n  \n",
  "imageSM": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n\n\n\n\n\n  \n\n  \n  \n    \n      \n    \n\n\n    \n    \n\n\n    \n    \n      \n      \n    \n    \n    \n\n\n    \n    \n      \n      \n        \n        \n        \n        \n        \n        \n          \n          \n          \n          \n        \n\n\n        \n        \n\n\n        \u003cimg\n          \n            src=\"/images/title/bp-applications_hu67d5d2c33bb037b3032c6625abb7dfb5_223794_100x100_fill_q90_h2_lanczos_smart1_3.webp\" loading=\"lazy\" decoding=\"async\"\n          \n\n          alt=\"\"\n          class=\"  img\"\n          width=\"100\"\n          height=\"100\"\n          onerror=\"this.onerror='null';this.src='\\/images\\/title\\/bp-applications_hu67d5d2c33bb037b3032c6625abb7dfb5_223794_100x100_fill_lanczos_smart1_3.png';\" /\u003e\n\n        \n      \n      \n    \n    \n  \n\n\n  \n",
  "searchKeyword": "",
  "categories": "Intune, Microsoft Deployment Toolkit, PowerShell, Configuration Manager, Windows 10",
  "tags": "App Packaging, Applications, Packaging, SCCM",
  "content":"Hello everyone, I hope you are all safe and well.\nI’ve been thinking about writing this for a while and I hope it helps some of you new to app packaging.\nHow do I build apps? It never hurts to brush up if you’re a seasoned app-packager. App packaging isn’t going away any time soon, everyone needs apps. The Microsoft app store has gotten better but I don’t feel it’s quite there yet in terms of broadly available applications. Sometimes, companies can have line-of-business applications that they build in-house and as system administrators, you may be responsible for packaging and distributing those applications. How do you tackle it? where do you begin?\nFirst, terminology; this is important because often terms are mixed up, and I’ll be honest it can be confusing for a newcomer.\n“Package me an application, please” “Can you package this up for me?” “Can you make the software into a package?” “Can you deploy this application?” “Can you deploy this package?”\nOK, here goes (I hope this makes sense). ‘Packaging’ something simply describes the process of taking a piece of software and making it “ready for deployment” so that, you can use whatever your chosen deployment method is, to distribute that application to devices in your estate with minimal administrative effort. Normally, the distribution methods in environments these days are Configuration Manager (Commonly known as the legacy name SCCM) or Microsoft Intune. Both very good products, although I favour the former. The two combined now collectively known as Endpoint Manager \u0026amp; you’ll notice some branding changes trickle through but I think it’s safe to say those of us using these technologies know a little of their history.\nLet’s go one at a time here, starting with Configuration Manager, within the console, on the Software Library node, under Application Management you can see “packages” and “applications” (this is where it starts to get confusing. Software, made deployment-ready, in Configuration Manager, can take the format of a “package” or an “application” and I find that this is where the terms get muddled up).\nAs Intune is an MDM (Mobile Device Management) solution, these “apps” can take the format of Windows apps, IOS apps (Apple OS), Android apps… including many others. Found here:\nThere are sometimes different formats of apps that reside with a category. Windows apps, for example, generally take the form of (but are not limited to) “Win32” apps, or “Microsoft Store” apps. . It’s important that as you start to explore these consoles that you take note of the terms used and continue to speak and write the same terms in your day-to-day activities to better distinguish to what you are referring to. Remember so far we’ve used the terms “Packaging”, “Package”, “Application”, “Apps”, “Win32”, “Microsoft Store apps”\nHere are some links that may help you. Deploy applications – Configuration Manager | Microsoft Docs Packages and programs – Configuration Manager | Microsoft Docs Win32 app management in Microsoft Intune | Microsoft Docs Manage VPP apps from Microsoft Store for Business – Microsoft Intune | Microsoft Docs Discovery OK next up, discovery. in order for your application to install without any user interaction, you’re going to need to discover firstly whether that’s supported, and secondly how to do it. There are many resources available on the internet to help you with this, but also some basic tricks that I suggest you learn. Normally, I start to interrogate the installer files provided by the requester. This might be a setup.exe file, or if you’re lucky, a .msi file. In some cases, you might be required to write scripts to facilitate the install and there maybe configuration or settings files that you need to apply. I’ve come across all manner of software with all manner of intricate ways to install and configure with no user-interaction (referred to as silently). Let’s take a practical example of both. Starting with a .exe (hardest).\n.EXE Discovery Place your installer files into a folder and open a command prompt window in that folder. To interrogate any installer you need to ask it, “what switches are available to use?”. You can usually achieve this by trying to run the software with a query switch. Examples would be “/?” (most common) or “/help”, which should result in the software throwing out a window to let you know what you can do with it, if you’re lucky enough to get one, examine it for silent install command lines and then begin to test them. Often they take the format of switches you can throw such as “/quiet” (or “/q”), “/silent” (or “/s”) or some other connotation\nIn this example a window is thrown out that’s quite large so I cut down what I need to show you.\n… “/verysilent” sounds great! We’ll use that. This method of querying the application will work 9.5 times out of ten. You’ll then have to go and test that it installs the application silently and that you receive no end-user prompts whatsoever. As always, test on throw-away VMs. Not production. Once you have the command that installs the software silently, you have your “install string”, which is one part of the discovery. Next comes the uninstall string. Normally you can retrieve these from the registry in one of these two locations depending on the architecture of the application.\n32bit Registry Hive HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Uninstall\n64 Registry Hive Note: On a 64-bit computer you will need to check both the key above and the following key: HKEY_LOCAL_MACHINE\\SOFTWARE\\Wow6432Node\\Microsoft\\Windows\\CurrentVersion\\Uninstall\nWarning! – I have seen some programs that don’t use these two standard registry locations so if you can’t find what you’re looking for, then you’re going to have to search for what you need. Once you’ve explored the registry and found the key for your particular software, there’s usually a subkey you can discover to help you find the silent uninstall string.\nI wrote some code to go get some useful information for you from the registry. It may help save some time\nCode Clear-Host $Hive = Get-ChildItem -Path HKLM:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Uninstall $Hive2 = Get-ChildItem -Path HKLM:\\SOFTWARE\\Wow6432Node\\Microsoft\\Windows\\CurrentVersion\\Uninstall Write-Host -ForegroundColor Green \u0026#34;x64 Registry Hive - HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Uninstall \u0026#34; $Hive | Get-ItemProperty | Select-Object -Property PSChildName, DisplayName, DisplayVersion, UninstallString | Sort-Object DisplayName | Format-Table -AutoSize -Wrap Write-Host -ForegroundColor Cyan \u0026#34;x86 Registry Hive - HKEY_LOCAL_MACHINE\\SOFTWARE\\Wow6432Node\\Microsoft\\Windows\\CurrentVersion\\Uninstall\u0026#34; $Hive2 | Get-ItemProperty | Select-Object -Property PSChildName, DisplayName, DisplayVersion, UninstallString | Sort-Object DisplayName | Format-Table -AutoSize -Wrap A colleague of mine, told me about an application that’s quite useful in this space, Geek Uninstaller, which is free for personal use. You may wish to investigate that if you prefer not to use PowerShell or dig around in the registry. I don’t personally use this, but some of my team do and they like it.\nThis now arms you with being able to silently install and uninstall the software. Once you can do that we can create our deployment-ready item.32bit\nAgain, please test. Does it work as expected? If so, now you have your “uninstall string”. You won’t always get lucky and sometimes you might need to do some research and further testing to get the end results you need. For the majority of cases though, this will work.\nMSI Discovery For MSIs the process is pretty straight forward. Every MSI normally takes the same install and uninstall string, like so;\nInstall: msiexec.exe /i yoursoftware.msi /qn Uninstall: msiexec /x yoursoftware.msi /qn (/i = install, /x = uninstall, /q = quite/silent, the ‘n’ signifies no user interface, so completely silent)\nAll MSI’s accept a query switch if “/?” and from the output, you can see that you can get quite granular with the options.\nIn a live environment, you may also see a long GUID for the uninstall string. Like this: msiexec /x {XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX} /qn\nThis represents the ‘Product Code’ for the software and should be unique although I have seen instances where it’s not, so tread carefully.\nMore information here: Command-Line Options – Win32 apps | Microsoft Docs .. sometimes, even MSI’s can take extra switches for items such as registration or activation code, or you may be able to customise the install, for example with a company name. These extra switches can normally be found in the documentation for the software, via internet research or if you wish, you can even examine the database for the MSI and see if there are any switches you can find. Out of scope for this article, but there is a program inside Microsoft’s Software Development Kit (SDK) called Orca, that you may wish to take a look at if you get stuck. Using Orca, you can open the MSI database and search for fields that can be taken as parameters. I’ve used this right back from the early days, but it can be confusing. I’m sure there are others available too. Vendor documentation normally has them.\nWorth noting, never underestimate looking in the vendor’s documentation, you will normally get what you need. I say normally, but those well versed at app packaging will start to recognise companies that do better at this than others.\nLet’s think about the components we now have. We have the source files (see below about Intune source files), we have identified a silent install string and a silent uninstall string. We have tested that these work as expected on a throw-away virtual machine and we’re ready to place those items into our deployment tool to be pushed out across our estate. But which one? Well, that totally depends on you really. What tools do you have at your disposal? What are you licensed for? (Intune requires licenses) Is this going to be for on-premises, or will your users be ‘in the wild’? Once you know you will be able to decipher which will be the best tool to use to meet those requirements.\nIntune Source Files for Win32 apps cannot be the raw files you have when creating applications inside the Configuration Manager console. You will need to collect them up and use the Win32 Content Prep Tool , that will take your raw source files and concern them into a single .intunewin file which you then upload to Intune. This will compress and encrypt the source files for a quicker transfer. You may have noticed I have linked some documents in this paragraph, those will help you.\nNext up, Detection Clauses, these are quite important to your packaging journey, you need to identify a way to detect that the software is installed. Most of the time, this will be the existence of a registry key. Using the example from above, we could set the following key to be our detection clause:\nSo we’ll tell the system “If this key exists, then the application is installed”. We will need to check whether or not it is removed during the uninstall process first, just to be sure its not left behind as an orphan and therefore would lead to a false detection if removed. In some cases you cant leverage the root-level registry key, you may need to go deeper such as detecting whether or not the version number is equal to or greater than something. For example in the case of an app that might self-update or update often the registry key will always be present but the version number might increment, you’ll need to tread carefully around these apps to ensure that you don’t get false detections. Again, take each app as it comes and start to build up your exposure and experience with it. You’ll start to notice common registry key places (like the ones mentioned earlier) and soon, it will become second nature.\nDeployment Finally, Deployment, this bit isn’t really part of the packaging process but I thought it would be important to mention to just tread carefully with your deployments, don’t assume that your clean Virtual Machine is a true representation of real-world machines. Always try to test a few machines in a ‘pilot before production’ mentality. Don’t, for example, rush an app then blast it out to 1000+ production machines and then wonder why your service desk is rammed with tickets the next day.\nI think, above all, don’t be scared to ask for help if you’re struggling.\nI truly hope this helps anyone starting out on their application packaging journey. Thanks for reading Jonathan.\n"},{
  "section": "Articles",
  "slug": "/articles/bp-forticlient/index/",
  "title": "Logon to Autopilot HAADJ Devices Using FortiClient VPN",
  "description": "",
  "date": "September 15, 2020",
  "image": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n\n\n\n\n\n  \n\n  \n  \n    \n      \n    \n\n\n    \n    \n\n\n    \n    \n      \n      \n    \n    \n    \n\n\n    \n    \n      \n      \n        \n        \n        \n        \n        \n        \n\n\n        \n        \n\n\n        \u003cimg\n          \n            src=\"/images/title/bp-forticlient_hu45baa047a21e190e92fc2ce9885cfe73_68094_420x0_resize_q90_h2_lanczos_3.webp\" loading=\"lazy\" decoding=\"async\"\n          \n\n          alt=\"\"\n          class=\"  img\"\n          width=\"420\"\n          height=\"219\"\n          onerror=\"this.onerror='null';this.src='\\/images\\/title\\/bp-forticlient_hu45baa047a21e190e92fc2ce9885cfe73_68094_420x0_resize_lanczos_3.png';\" /\u003e\n\n        \n      \n      \n    \n    \n  \n\n\n  \n",
  "imageSM": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n\n\n\n\n\n  \n\n  \n  \n    \n      \n    \n\n\n    \n    \n\n\n    \n    \n      \n      \n    \n    \n    \n\n\n    \n    \n      \n      \n        \n        \n        \n        \n        \n        \n          \n          \n          \n          \n        \n\n\n        \n        \n\n\n        \u003cimg\n          \n            src=\"/images/title/bp-forticlient_hu45baa047a21e190e92fc2ce9885cfe73_68094_100x100_fill_q90_h2_lanczos_smart1_3.webp\" loading=\"lazy\" decoding=\"async\"\n          \n\n          alt=\"\"\n          class=\"  img\"\n          width=\"100\"\n          height=\"100\"\n          onerror=\"this.onerror='null';this.src='\\/images\\/title\\/bp-forticlient_hu45baa047a21e190e92fc2ce9885cfe73_68094_100x100_fill_lanczos_smart1_3.png';\" /\u003e\n\n        \n      \n      \n    \n    \n  \n\n\n  \n",
  "searchKeyword": "",
  "categories": "Intune, PowerShell",
  "tags": "App Packaging, Applications, Autopilot, Azure AD, Forticlient, Hybrid, Hybrid AAD, Intune, VPN",
  "content":"I recently had a customer who uses FortiClient as their VPN solution, and they have recently embarked on setting up Hybrid AAD. We set their tenant up, sorted out licensing and I started to put in the fundamental elements to begin the journey to using Autopilot for provisioning devices. I had undertaken setting up AAD connect and using IDFix to remediate any issues, such as UPN suffixes for end-users via PowerShell, and we were ready to go. Equally, I had made them an Intune Win32app for FortiClient, and this installed and removed just fine using PSADT. I had already tested the Autopilot process and things were looking good.\nNavigating to endpoint.microsoft.com and under “Windows Autopilot deployment profiles” I have two Hybrid Azure AD Joined profiles set up for the two scenarios my customer has unique to them. I have packaged up some apps (all using PSADT) and they have all been tested as working so I now want to run through the Autopilot process, have the apps install, join the machine to the domain using the Intune Connector and be faced with a login screen. I can only do this however if I use the optional feature (currently public preview at the time of writing this article) of “Skip AD Connectivity check (preview)”\nEssentially all this does is to ignore looking for a domain controller and continue through the rest of the autopilot process. Normally, its going to need to be able to see a domain controller to authenticate me for the first time and thus create me a local profile which, in future, I can use to log on to the machine, offline, should there not be a domain controller in sight. And so historically, it looks for one and bombs the Autopilot process if it doesn’t find one. This option will skip that check and let it run through right to the login page. Although remember, if you cant connect some sort of VPN or have that line-of-sight, you simply wont be able to log on with your domain credentials outside of the corporate network.\nI tested this. It works. I cant log in.\nSo now I need to work on the FortiClient App which I intend to use to connect a VPN before logon. Its in Intune as a Win32 app so any configurations I need I should be able to just add to the script, redo the content and have it deploy. I need to ensure my settings are retained and deployed with the Intune app so I start digging around and trying to find out where they are stored.\nI install a clean version of Fortinet Client (in my case its version 6.0.9) onto a test VM and I configure it to how I want it. I load up the client and select to unlock the settings first..\nThen I proceed to untick what options I don’t require and making sure to tick the box for “Enable VPN before logon” (Vital!)\nIt is stated in the Microsoft Documentation that if your VPN solution supports connection before logon, then you should be able to make this work with any VPN solution. Previously there were named supported vendors. Worth noting.\nNext we’re going to go to “Remote Access” and then “Configure VPN” to set up our base details for the VPN Connection\nThen I’m going to configure my VPN, give it a name, the gateway IP and the port number. I just made up the below for illustration purposes so don’t shoot me if I cant use that port or that 1.2.3.4 isn’t a true IP address , you get the idea. I’m also going to leave “Prompt on login” selected rather than saving credentials.\nAnd finally hit save.\nSo we now have the basics configured.\nNext job was top somehow export that setup and have it deploy with the app deployed to the Autopilot profile. So I searched the registry and found where it was, the details are stored in HKEY_LOCAL_MACHINE\\SOFTWARE\\Fortinet\\FortiClient\\Sslvpn\\Tunnels\\My Test VPN\nGreat! So I export the key to a .reg file (the one pointed to in this image) and using my PSADT app I made I will add this during the “post-Installation” section.\nHere is the code in my PSADT Script..\nSo essentially using the existing reg.exe to import the .reg file you exported. You could break this down and have the keys created with PowerShell, but I was lazy and used this method. There are a few ways this can improve, I’m sure.\nI tested this with my PSADT script and it worked, so it now needs testing with Autopilot. I updated the Intune app content by creating a new .intunewin file and uploaded it ready to go. I added the app deployment where it needed to be and reset a laptop ready for the autopilot test. Next few pictures were taken from my phone so not the greatest. but here is the experience.\nOn the test device I added it to my network\nI can see the Autopilot profile has pulled in and it requests I logon\nAutopilot kicks off doing its thing…\nOK, so now that’s finished I’m faced with a logon screen, first thing I do is click on sign on options\nI can see here FortiClient has indeed installed during autopilot (WIN!)\nI have to scroll down and untick the box for “Use my Windows credentials for VPN” because my username and password for the VPN is indeed, separate to my windows creds\nThis opens up the creds box for the VPN\nThen I scroll back up and input my windows credentials for my on prem domain account and attempt to log in (fingers crossed)\n(I worked with the network provider to get the certificate on the machines during AP which stops this message but this is the message I got before I did this)\nBIG WIN!!!\nAaaaand Boom….. I’m logged in.\nVery happy with this. What I would like you to take away from this blog post is that this methodology, in theory, could be used for any VPN provider. As long as you can export your profile and have it install with the client during Autopilot and it support connection before logon, this could be implemented for any VPN solution.\nI would love to hear if you have got this working with any other VPN client\nThanks for reading Jonathan.\n"},{
  "section": "Articles",
  "slug": "/articles/bp-psadtintune/index/",
  "title": "PowerShell App Deployment Toolkit and Intune Win32 Apps",
  "description": "",
  "date": "September 11, 2020",
  "image": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n\n\n\n\n\n  \n\n  \n  \n    \n      \n    \n\n\n    \n    \n\n\n    \n    \n      \n      \n    \n    \n    \n\n\n    \n    \n      \n      \n        \n        \n        \n        \n        \n        \n\n\n        \n        \n\n\n        \u003cimg\n          \n            src=\"/images/title/psadt_intune_hu5c1e9785d68eb537350744836900f95e_84443_420x0_resize_q90_h2_lanczos_3.webp\" loading=\"lazy\" decoding=\"async\"\n          \n\n          alt=\"\"\n          class=\"  img\"\n          width=\"420\"\n          height=\"219\"\n          onerror=\"this.onerror='null';this.src='\\/images\\/title\\/psadt_intune_hu5c1e9785d68eb537350744836900f95e_84443_420x0_resize_lanczos_3.png';\" /\u003e\n\n        \n      \n      \n    \n    \n  \n\n\n  \n",
  "imageSM": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n\n\n\n\n\n  \n\n  \n  \n    \n      \n    \n\n\n    \n    \n\n\n    \n    \n      \n      \n    \n    \n    \n\n\n    \n    \n      \n      \n        \n        \n        \n        \n        \n        \n          \n          \n          \n          \n        \n\n\n        \n        \n\n\n        \u003cimg\n          \n            src=\"/images/title/psadt_intune_hu5c1e9785d68eb537350744836900f95e_84443_100x100_fill_q90_h2_lanczos_smart1_3.webp\" loading=\"lazy\" decoding=\"async\"\n          \n\n          alt=\"\"\n          class=\"  img\"\n          width=\"100\"\n          height=\"100\"\n          onerror=\"this.onerror='null';this.src='\\/images\\/title\\/psadt_intune_hu5c1e9785d68eb537350744836900f95e_84443_100x100_fill_lanczos_smart1_3.png';\" /\u003e\n\n        \n      \n      \n    \n    \n  \n\n\n  \n",
  "searchKeyword": "",
  "categories": "Intune, PowerShell",
  "tags": "App Packaging, Applications, Cloud, Endpoint Manager, Intune, Packaging, PowerShell",
  "content":"Hi Folks! Leading on from this post about getting started with PSADT, and as promised, I’m writing up my experience with it and creating Win32 Intune apps. So firstly, I’m assuming by now that you read and absorbed the first write up I did, you should have noticed that a couple of things I did in that post can actually be done differently and be eager and armed with understanding the format and have a good idea about what to do. Combine that with great ‘google-fu’ and you’re ready to continue your decent app packaging journey. Using this with ConfigMgr applications is quite simple because once you’ve prepared your application you use the root folder as the source content for the application and the rest is pretty straight forward (holler at me if you want that blogging too). Putting that into Intune however is slightly different. There are many blog posts about Intune Content Prep Tool however in a nut-shell, this tool will take your content (source) files for your application, and output a single .intunewin file which is the file format that Intune understands. So lets go ahead and download the tool from here and extract it to a local folder.\nThe following files should be in the extracted folder\nWhat we’re going to do is launch a cmd prompt as admin and browse to the folder that contains the files. This way if we have more that one app to create the executable wont exit when we’ve finished. When you launch the IntuneWinAppUtil.exe you will be asked three questions.\n“Who would Use the Intune app must answer me these questions three” …Monty Python (true story)\nPretty straight forward stuff, specify the sources folder (in our case this will be one of the subfolders we created by copying the TOOLKIT MASTER folder (see previous post), specify the setup file (note this is not the full install command with switches) in our case we’ll be specifying “deploy-application.ps1” which is the script that we’ll call when we want to install and uninstall the application in questions and finally the output folder for the .intunewin file we can import to Intune. The output file will take the format of [SetupFileName].intunewin so we’ll get deploy-application.intunewin. Remember if you’re making lots of Intune content files and they’re all made from PSADT, the output file will be the same so use different output folders. Next, we’ll move over to Intune now and start to import the application. Log into https://endpoint.microsoft.com/ and navigate to the apps blade, select to add a new app and chose the type of “Win32”.\nThen continue to populate the details of the app. In my example I’m using 7Zip. Here is the App Information section with the parts I’ve edited numbered\nNext is the Program section\nYou can see here is where we call the two PowerShell commands (coincidentally these will be the same commands used in ConfigMgr) You can set some Requirements of you own if you have them, I normally select Windows 10 1607 as the minimum OS and select the architecture based upon what I’m deploying. In the case of 7Zip I have downloaded just the x64 version of the application and then added an Execute-MSI statement in the PSADT code to install it. So my requirements might be this…\nAnd finally we have the Detection Methods. Normally I like to use the the DisplayVersion of the application that gets stored in the registry hives after installation but in some case you can just use the MSI Product Code. Generally (but not all the time remember!) you can use one of the following two hives to harvest information about the installed application.\nHKLM:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Uninstall HKLM:\\SOFTWARE\\Wow6432Node\\Microsoft\\Windows\\CurrentVersion\\Uninstall. I wrote a quick PowerShell script to go get the child object under these keys for you and bring back the PSChildName, DisplayName, DisplayVersion and (for use later) the Uninstall String that’s stored in the registry so that you can install the app on your test box using the PSADT script you created for testing. I use these lines of code so much. After its installed you can then harvest what you need from the registry for the detection method. Here is the code I use.\nCode Clear-Host $Hive = Get-ChildItem -Path HKLM:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Uninstall $Hive2 = Get-ChildItem -Path HKLM:\\SOFTWARE\\Wow6432Node\\Microsoft\\Windows\\CurrentVersion\\Uninstall Write-Host -ForegroundColor Green \u0026#34;x64 Registry Hive - HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Uninstall \u0026#34; $Hive | Get-ItemProperty | Select-Object -Property PSChildName, DisplayName, DisplayVersion, UninstallString | Sort-Object DisplayName | Format-Table -AutoSize -Wrap Write-Host -ForegroundColor Cyan \u0026#34;x86 Registry Hive - HKEY_LOCAL_MACHINE\\SOFTWARE\\Wow6432Node\\Microsoft\\Windows\\CurrentVersion\\Uninstall\u0026#34; $Hive2 | Get-ItemProperty | Select-Object -Property PSChildName, DisplayName, DisplayVersion, UninstallString | Sort-Object DisplayName | Format-Table -AutoSize -Wrap If you run this it’ll output to the PowerShell Console the keys (you can copy these straight into Intune detection clauses for Registry. And then you can select your column to use. Here is an example:\nFrom this I can take a number of things: Firstly, the registry hive key at the top in green text (cyan for the other hive) I can copy this out as first part of the Key path on an Intune Detection Method. Then I can append the PSChildName item for the individual key, so if I wanted my clause to be whether or not the registry key simply exists, I can use the RegistryHivePath+PSChildName (in red below).\nIf I wanted to use the Version number, for example I wanted to say greater than or equal to I could use the RegistryHivePath+PSChildName as the Key Path, then use the DisplayVersion as the Value Name and use the correct operator, like so….\nWhich gives me\u0026hellip;\nOk so now you have an idea on how to get your PSADT apps into Intune as Win32 Applications using the Intune Content Prep Tool, take a moment to go get a coffee as now we’ll move to testing them, once they’re finished uploading and syncing. First, we’ll need to set up an AAD group to deploy the applications to and to which we can assign our user who should have an Intune license. Deploying the applications as available is the most effective way to test the applications before we push them out as a required install, using something like autopilot. So lets go and set up a new group ready for deployment. Next manually add the user you’re deploying the application to, to the group. And finally edit the assignments of the application so that its assigned as Available to the group you want to test with. Remember – You (mostly want to) deploy the app to the user because the user holds the Intune license. Once its uploaded and synced you should see that in your company portal on the device. Open Company portal on the test device and log in with the username/password for the test user in the group we created above. Here we see our 7Zip Win32 App (Yes I know there’s a MSfB app for 7Zip, stay with me here… its the process I want you to learn). We then highlight and select to install Happy days! We can see here that it is indeed installed.\nTake Away Now, if there are issues (and this is the good bit for me!) don’t forget that PSADT apps log their own install and uninstall logs into C:\\Windows\\Logs\\Software however if you edit this to match the IntuneManagementExtension.log files location (C:\\ProgramData\\Microsoft\\IntuneManagementExtension\\Logs), you will have lovely logs to use for troubleshooting AND you can collect them remotely from the Intune portal!!\nOnce configured, you can use the “Collect Diagnostics” button and this will collect the logs remotely, without interrupting the end users. Wonderful!\nTHAT, I feel, is awesome and will help greatly with troubleshooting your Win32 Apps, should there be a problem I hope this helps you. Thanks for reading Jonathan.\n"},{
  "section": "Articles",
  "slug": "/articles/bp-psadt/index/",
  "title": "PowerShell App Deployment Toolkit Write Up",
  "description": "",
  "date": "August 19, 2020",
  "image": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n\n\n\n\n\n  \n\n  \n  \n    \n      \n    \n\n\n    \n    \n\n\n    \n    \n      \n      \n    \n    \n    \n\n\n    \n    \n      \n      \n        \n        \n        \n        \n        \n        \n\n\n        \n        \n\n\n        \u003cimg\n          \n            src=\"/images/title/psadt_hu78066341200bc99ae5c17e319924de93_174696_420x0_resize_q90_h2_lanczos_3.webp\" loading=\"lazy\" decoding=\"async\"\n          \n\n          alt=\"\"\n          class=\"  img\"\n          width=\"420\"\n          height=\"210\"\n          onerror=\"this.onerror='null';this.src='\\/images\\/title\\/psadt_hu78066341200bc99ae5c17e319924de93_174696_420x0_resize_lanczos_3.png';\" /\u003e\n\n        \n      \n      \n    \n    \n  \n\n\n  \n",
  "imageSM": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n\n\n\n\n\n  \n\n  \n  \n    \n      \n    \n\n\n    \n    \n\n\n    \n    \n      \n      \n    \n    \n    \n\n\n    \n    \n      \n      \n        \n        \n        \n        \n        \n        \n          \n          \n          \n          \n        \n\n\n        \n        \n\n\n        \u003cimg\n          \n            src=\"/images/title/psadt_hu78066341200bc99ae5c17e319924de93_174696_100x100_fill_q90_h2_lanczos_smart1_3.webp\" loading=\"lazy\" decoding=\"async\"\n          \n\n          alt=\"\"\n          class=\"  img\"\n          width=\"100\"\n          height=\"100\"\n          onerror=\"this.onerror='null';this.src='\\/images\\/title\\/psadt_hu78066341200bc99ae5c17e319924de93_174696_100x100_fill_lanczos_smart1_3.png';\" /\u003e\n\n        \n      \n      \n    \n    \n  \n\n\n  \n",
  "searchKeyword": "",
  "categories": "Intune, PowerShell, Configuration Manager",
  "tags": "Applications, ConfigMgr, Deployment, Intune, PowerShell",
  "content":"Hi all, thought I’d write up what I’ve been working on recently, which is re-visiting PowerShell App Deployment Toolkit. A great Resource for ConfigMgr apps, but equally it is supported in Intune so I will be doing a follow-up post on using this with Intune. I know there are plenty of blogs out there on this so this is just my interpretation and is intended to get people started. I know, for example, that the kit comes with a wide variety cmdlets that you can utilise to achieve tasks but this write up is based around getting those a little familiar with PowerShell up to speed with it. There are many ways to skin a cat.\nPrep Work Download the latest toolkit from here: https://psappdeploytoolkit.com/ Extract the .ZIP folder and call this folder “PSADT – FULL” Go into the folder, into the Toolkit folder and create a folder called “Files” (if it doesn’t exist already) This is where we’re going to store our source files for the applications we’re going to deploy. From within the FULL folder, copy the Toolkit folder out to the foot and call this “PSADT – TOOLKIT MASTER” TOOLKIT MASTER should only contain the following items\nNow you have a copy of the full kit that’s not been touched and a copy of the toolkit you can begin to customise for your customer(s).\nWorking with the TOOLKIT MASTER folder, Open up “Deploy-Application.ps1 and edit the following\u0026hellip; Comment out the “Show-InstallationWelcome” and Show-InstallationProgress\nDo the same for Pre-Uninstallation, comment them out… Under Post-Installation, comment out the line highlighted below The above actions make it more silent so the user isn’t bothered when installation takes place. These are options you may wish to reinstate later, the choice is up to you I’ll let you do your own research on that, but for now we’re aiming for not bothering the end user. Save the script. Next, within the AppDeployToolkit folder, open up the AppDeployToolkit.xml file and change the following Under MSI Options edit the install params to be /QN instead of /QB-!\nBranding You will need to brand the toolkit to your specific customer, otherwise it will be using the standard branding. From within the TOOLKIT MASTER, open up the “AppDeployToolkit” folder and replace the “AppDeployToolkitBanner.png” with a branded one (must be the same name!) Next, replace the Icon file (same folder) with a branded Icon file, again with the exact same name. To do this, create an image 256×256 pixels in size, then open the image using Greenshot and this will give you and option to save the image as a .ICO file You are now ready to use this toolkit in a silent manner for your ConfigMgr or Intune applications Process For each app you will need a COPY of the TOOLKIT MASTER folder, so lets start by creating one Next you will need to download your content files (source files) and place them in the ‘Files’ Directory. Now we can start editing the script to match the criteria of the application we’re trying to deploy. First, open up the DeployApplication.ps1 and scroll down to the “Variable Declaration” section where we’re going to populate all the details of the application we’re going to deploy. Lets fill this out, here is an example Now we’re ready to do the app work! You don’t need to worry about having in depth PowerShell (although some helps) with this script you simply only need to remember a few things. Firstly, there are three phases of installation in the script Pre-Installation – where you would place any code you want to execute BEFORE the app installs Installation – the app install itself Post Installation – where you would place any post actions such as copying files or registry entries or even clean up activities. I’m going to break these down in to a .EXE and a .MSI installation for you. MSI Example Read through the examples carefully and take in and fully understand the ‘Take Away’ section which is where I’ve highlighted what you should have learned. Scenario: Lets say that you have to install Flash Player (THE HORROR!), but before you do you have to create a folder called “C:\\Flash” which is what the company you’re working for want to use to store all their website flash content in. Strange, I know, but lets roll with it. So we have two things we need to achieve;\nwe need to install the program we need to create the folder. The folder creation, it doesn’t matter in this particular case whether we do it before or after the installation so we can place that in either “Pre-Installation” or “Post-Installation” step, I’m going to chose Post-Installation in this case.\nAs with traditional applications, MSI installs are pretty easy to do. The script has its own cmdlet to handle this called Execute-MSI (see the top tips section at the end!) So, firstly we would take a copy of the TOOLKIT MASTER folder and Rename it to “Adobe Flash” We would then open up the DeployApplication.ps1 and edit the Variable Declaration as stated above in the Process Section to match Adobe Flash and the version number etc. Next we would locate the “Installation section” and add in our installation line: I’ve blurred out the rest to draw your eyes to the correct section…. Notice the format of the string, it reads pretty straight forward, no more calling MSIEXEC.exe, dont worry about the format of the code as that will be explained later (see the top tips at the end!)\nYou can see here from the help for this cmdlet that the cmdlet called, Execute-MSI, expects the files to be in the “Files Directory” (highlighted in Blue). This is why we sense checked the folder earlier.\nNext we create the folder “C:\\Flash” as per the requirements. In the post-installation section, simple add your code… Again, I’ve blurred out the surrounding code to draw your attention to the section to use, you’ll start to pick up they follow the same format\nThere is a cmdlet you can use for this that build into the PSADT module, I’ll let you explore that! However this achieves the same thing\nLet populate the uninstall section so that we can uninstall the app using the script too… Notice that the ‘action’ switch has changed in this case.\nAnd that’s it, done. Save the script. You can test this before on a test box (which I suggest you do). When creating your ConfigMgr application, the command to install the application would be to call the DeployApplication.ps1 with a switch of -DeploymentType Install, like so…\nDeploy-Application.ps1 -DeploymentType Install The uninstall command would be Deploy-Applicaiton.ps1 -DeploymentType Uninstall Take Away Understand the structure of Pre, Post, and Install and what tasks need to be done when, given your requirements. Know that under the \u0026lt;\\Perform Tasks Here\u0026gt; sections, you can have as much code as you need, doing whatever tasks you want. Understand the cmdlet written for installing MSIs. You use Execute-MSI with a Install switch If you wanted to uninstall items before installing the new version, you could use “Start-Process” and call the uninstall with a -wait switch like so… Start-Process -FilePath “C:\\Windows\\system32\\msiexec.exe” -ArgumentList “/x{26923b43-4d38-484f-9b9e-de460746276c} /qn” -wait This would; Call msiexec that exists on all windows based machines Pass the argument list of uninstall, quietly with no UI. Wait until its finished before it does the next line of code, so if you had multiple install .EXE Example Scenario: Lets say that you have to install Flash Player (THE HORROR! AGAIN!!!), but before you do you have to create Registry Key “HKLM:\\Software\\Company\\Adobe\\Flash” with a string key in there called “Status” that has a setting of “Awesome” and an Integer key (DWORD) called “ReallyAwesome” with a setting of “00000001” which is what the company want, because they’re weird. The string key must be created BEFORE the application is installed and the Integer key must be created AFTER the software is installed. We know that the .exe accepts the switch /quiet for the install and also /uninstall /quiet for the uninstall, which we’ve gotten from normal testing. We need to..\nCreate the String Regkey (before install) Install the program Create the Integer Regkey (after Install) Set the uninstall up So lets create the first regkey, inside Pre-Installation Next we need to install the application Notice the difference here, we’re not using Execute-MSI this time. Starting a process Passing the arguments Adding -wait so it waits for the install to finish There are many ways to call .exe’s from PowerShell, doesn’t really matter what you use. Next we add the regkey we need to add AFTER the installation. Remember we set the path earlier on, in the Pre-Installation section so the variable $RegistryPath, is already there.\nAnd finally the uninstall section needs populating Hopefully this is beginning to make sense now…. Take Away Cement our understand the structure of Pre, Post, and Install section and what tasks need to be done when, given your requirements. Know that under the sections, you can have as much code as you need, doing whatever tasks you want. Calling executables is different as we cant leverage the Execute-MSI cmdlet, so we use Start-Process with a -wait on the end Top Tips Within the folder structure of your PSADT, there is a sub folder called “AppDeployToolkit” And in there you will find a script called AppDeployToolkitHelp.ps1\nIf you run this script you will launch the help section where you will have detailed instructions on the cmdlets available inside PSADT and how to use them.\nThe section highlighted with a red arrow is the name of the cmdlets you can use, and the green arrow points to the format of the code to use with some examples at the bottom. You will find almost everything you need in here to fit most of the requirements for app packaging. There are also plenty of tutorials you can access on YouTube to gain further understanding of this but it is very powerful indeed. Some of the items we commented out in at the beginning to make the user experience more silent, can be switched back on if you wish, we can make it as visual or silent as you wish, the more you use this tool the more you will realise its potential \u0026amp; scalability. It is supported in ConfigMgr and Intune (win32) Applications, but it does not negate the need for proper testing in the normal manner via VM’s and information gathering. Thanks for reading Jonathan.\n"},{
  "section": "Apps",
  "slug": "/apps/1password/",
  "title": "1Password",
  "description": "",
  "date": "January 1, 1",
  "image": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n\n\n\n\n\n  \n\n  \n  \n    \n      \n    \n\n\n    \n    \n\n\n    \n    \n      \n      \n    \n    \n    \n\n\n    \n    \n      \n      \n        \n        \n        \n        \n        \n        \n\n\n        \n        \n\n\n        \u003cimg\n          \n            src=\"/images/apps/1password_hu47bcd61725447998c4eb26bf6261d1b7_242848_420x0_resize_q90_h2_lanczos_3.webp\" loading=\"lazy\" decoding=\"async\"\n          \n\n          alt=\"\"\n          class=\"  img\"\n          width=\"420\"\n          height=\"420\"\n          onerror=\"this.onerror='null';this.src='\\/images\\/apps\\/1password_hu47bcd61725447998c4eb26bf6261d1b7_242848_420x0_resize_lanczos_3.png';\" /\u003e\n\n        \n      \n      \n    \n    \n  \n\n\n  \n",
  "imageSM": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n\n\n\n\n\n  \n\n  \n  \n    \n      \n    \n\n\n    \n    \n\n\n    \n    \n      \n      \n    \n    \n    \n\n\n    \n    \n      \n      \n        \n        \n        \n        \n        \n        \n          \n          \n          \n          \n        \n\n\n        \n        \n\n\n        \u003cimg\n          \n            src=\"/images/apps/1password_hu47bcd61725447998c4eb26bf6261d1b7_242848_100x100_fill_q90_h2_lanczos_smart1_3.webp\" loading=\"lazy\" decoding=\"async\"\n          \n\n          alt=\"\"\n          class=\"  img\"\n          width=\"100\"\n          height=\"100\"\n          onerror=\"this.onerror='null';this.src='\\/images\\/apps\\/1password_hu47bcd61725447998c4eb26bf6261d1b7_242848_100x100_fill_lanczos_smart1_3.png';\" /\u003e\n\n        \n      \n      \n    \n    \n  \n\n\n  \n",
  "searchKeyword": "",
  "categories": "",
  "tags": "",
  "content":"1Password makes it easy to generate, store, and autofill passwords for all your online accounts, on all your devices. Because weak and reused passwords are a leading cause of security incidents, using a password manager is an easy way to protect yourself, your family, or your business. This is an external link, no content is served from this website Download Here "},{
  "section": "Apps",
  "slug": "/apps/7zip/",
  "title": "7Zip",
  "description": "",
  "date": "January 1, 1",
  "image": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n\n\n\n\n\n  \n\n  \n  \n    \n      \n    \n\n\n    \n    \n\n\n    \n    \n      \n      \n    \n    \n    \n\n\n    \n    \n      \n      \n        \n        \n        \n        \n        \n        \n\n\n        \n        \n\n\n        \u003cimg\n          \n            src=\"/images/apps/7zip_huef0402bb8506c7770084063ea21339a6_27454_420x0_resize_q90_h2_lanczos_2.webp\" loading=\"lazy\" decoding=\"async\"\n          \n\n          alt=\"\"\n          class=\"  img\"\n          width=\"420\"\n          height=\"420\"\n          onerror=\"this.onerror='null';this.src='\\/images\\/apps\\/7zip_huef0402bb8506c7770084063ea21339a6_27454_420x0_resize_q90_h2_lanczos_2.webp';\" /\u003e\n\n        \n      \n      \n    \n    \n  \n\n\n  \n",
  "imageSM": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n\n\n\n\n\n  \n\n  \n  \n    \n      \n    \n\n\n    \n    \n\n\n    \n    \n      \n      \n    \n    \n    \n\n\n    \n    \n      \n      \n        \n        \n        \n        \n        \n        \n          \n          \n          \n          \n        \n\n\n        \n        \n\n\n        \u003cimg\n          \n            src=\"/images/apps/7zip_huef0402bb8506c7770084063ea21339a6_27454_100x100_fill_q90_h2_lanczos_smart1_2.webp\" loading=\"lazy\" decoding=\"async\"\n          \n\n          alt=\"\"\n          class=\"  img\"\n          width=\"100\"\n          height=\"100\"\n          onerror=\"this.onerror='null';this.src='\\/images\\/apps\\/7zip_huef0402bb8506c7770084063ea21339a6_27454_100x100_fill_q90_h2_lanczos_smart1_2.webp';\" /\u003e\n\n        \n      \n      \n    \n    \n  \n\n\n  \n",
  "searchKeyword": "",
  "categories": "",
  "tags": "",
  "content":"7-Zip is free software with open source. The most of the code is under the GNU LGPL license. Some parts of the code are under the BSD 3-clause License. Also there is unRAR license restriction for some parts of the code. Read 7-Zip License information.\nYou can use 7-Zip on any computer, including a computer in a commercial organization. You don\u0026rsquo;t need to register or pay for 7-Zip. This is an external link, no content is served from this website Download Here "},{
  "section": "Apps",
  "slug": "/apps/graphxray/",
  "title": "Graph Xray",
  "description": "",
  "date": "January 1, 1",
  "image": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n\n\n\n\n\n  \n\n  \n  \n    \n      \n    \n\n\n    \n    \n\n\n    \n    \n      \n      \n    \n    \n    \n\n\n    \n    \n      \n      \n        \n        \n        \n        \n        \n        \n\n\n        \n        \n\n\n        \u003cimg\n          \n            src=\"/images/apps/graphxray_hu9e1fb2594cb24a343e1fcc0bef0d545c_6088_420x0_resize_q90_h2_lanczos_3.webp\" loading=\"lazy\" decoding=\"async\"\n          \n\n          alt=\"\"\n          class=\"  img\"\n          width=\"420\"\n          height=\"420\"\n          onerror=\"this.onerror='null';this.src='\\/images\\/apps\\/graphxray_hu9e1fb2594cb24a343e1fcc0bef0d545c_6088_420x0_resize_lanczos_3.png';\" /\u003e\n\n        \n      \n      \n    \n    \n  \n\n\n  \n",
  "imageSM": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n\n\n\n\n\n  \n\n  \n  \n    \n      \n    \n\n\n    \n    \n\n\n    \n    \n      \n      \n    \n    \n    \n\n\n    \n    \n      \n      \n        \n        \n        \n        \n        \n        \n          \n          \n          \n          \n        \n\n\n        \n        \n\n\n        \u003cimg\n          \n            src=\"/images/apps/graphxray_hu9e1fb2594cb24a343e1fcc0bef0d545c_6088_100x100_fill_q90_h2_lanczos_smart1_3.webp\" loading=\"lazy\" decoding=\"async\"\n          \n\n          alt=\"\"\n          class=\"  img\"\n          width=\"100\"\n          height=\"100\"\n          onerror=\"this.onerror='null';this.src='\\/images\\/apps\\/graphxray_hu9e1fb2594cb24a343e1fcc0bef0d545c_6088_100x100_fill_lanczos_smart1_3.png';\" /\u003e\n\n        \n      \n      \n    \n    \n  \n\n\n  \n",
  "searchKeyword": "",
  "categories": "",
  "tags": "",
  "content":"View Graph and PowerShell API details as you browse the Microsoft portals. This is an external link, no content is served from this website Download Here "},{
  "section": "Apps",
  "slug": "/apps/greenshot/",
  "title": "Greenshot",
  "description": "",
  "date": "January 1, 1",
  "image": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n\n\n\n\n\n  \n\n  \n  \n    \n      \n    \n\n\n    \n    \n\n\n    \n    \n      \n      \n    \n    \n    \n\n\n    \n    \n      \n      \n        \n        \n        \n        \n        \n        \n\n\n        \n        \n\n\n        \u003cimg\n          \n            src=\"/images/apps/greenshot_hu5f4c4483df9457c175d760717bc2338e_17910_420x0_resize_q90_h2_lanczos.webp\" loading=\"lazy\" decoding=\"async\"\n          \n\n          alt=\"\"\n          class=\"  img\"\n          width=\"420\"\n          height=\"420\"\n          onerror=\"this.onerror='null';this.src='\\/images\\/apps\\/greenshot_hu5f4c4483df9457c175d760717bc2338e_17910_420x0_resize_q90_lanczos.jpg';\" /\u003e\n\n        \n      \n      \n    \n    \n  \n\n\n  \n",
  "imageSM": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n\n\n\n\n\n  \n\n  \n  \n    \n      \n    \n\n\n    \n    \n\n\n    \n    \n      \n      \n    \n    \n    \n\n\n    \n    \n      \n      \n        \n        \n        \n        \n        \n        \n          \n          \n          \n          \n        \n\n\n        \n        \n\n\n        \u003cimg\n          \n            src=\"/images/apps/greenshot_hu5f4c4483df9457c175d760717bc2338e_17910_100x100_fill_q90_h2_lanczos_smart1.webp\" loading=\"lazy\" decoding=\"async\"\n          \n\n          alt=\"\"\n          class=\"  img\"\n          width=\"100\"\n          height=\"100\"\n          onerror=\"this.onerror='null';this.src='\\/images\\/apps\\/greenshot_hu5f4c4483df9457c175d760717bc2338e_17910_100x100_fill_q90_lanczos_smart1.jpg';\" /\u003e\n\n        \n      \n      \n    \n    \n  \n\n\n  \n",
  "searchKeyword": "",
  "categories": "",
  "tags": "",
  "content":"Greenshot is a light-weight screenshot software tool for Windows with the following key features:\nQuickly create screenshots of a selected region, window or fullscreen; you can even capture complete (scrolling) web pages from Internet Explorer. Easily annotate, highlight or obfuscate parts of the screenshot. Export the screenshot in various ways: save to file, send to printer, copy to clipboard, attach to e-mail, send Office programs or upload to photo sites like Flickr or Picasa, and others. \u0026hellip;and a lot more options simplyfying creation of and work with screenshots every day. This is an external link, no content is served from this website Download Here "},{
  "section": "Apps",
  "slug": "/apps/notepadpp/",
  "title": "Notepad ++",
  "description": "",
  "date": "January 1, 1",
  "image": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n\n\n\n\n\n  \n\n  \n  \n    \n      \n    \n\n\n    \n    \n\n\n    \n    \n      \n      \n    \n    \n    \n\n\n    \n    \n      \n      \n        \n        \n        \n        \n        \n        \n\n\n        \n        \n\n\n        \u003cimg\n          \n            src=\"/images/apps/notepadpp_hueda11bc730fb0bf8c3f0f1c5efa98b60_185993_420x0_resize_q90_h2_lanczos_3.webp\" loading=\"lazy\" decoding=\"async\"\n          \n\n          alt=\"\"\n          class=\"  img\"\n          width=\"420\"\n          height=\"420\"\n          onerror=\"this.onerror='null';this.src='\\/images\\/apps\\/notepadpp_hueda11bc730fb0bf8c3f0f1c5efa98b60_185993_420x0_resize_lanczos_3.png';\" /\u003e\n\n        \n      \n      \n    \n    \n  \n\n\n  \n",
  "imageSM": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n\n\n\n\n\n  \n\n  \n  \n    \n      \n    \n\n\n    \n    \n\n\n    \n    \n      \n      \n    \n    \n    \n\n\n    \n    \n      \n      \n        \n        \n        \n        \n        \n        \n          \n          \n          \n          \n        \n\n\n        \n        \n\n\n        \u003cimg\n          \n            src=\"/images/apps/notepadpp_hueda11bc730fb0bf8c3f0f1c5efa98b60_185993_100x100_fill_q90_h2_lanczos_smart1_3.webp\" loading=\"lazy\" decoding=\"async\"\n          \n\n          alt=\"\"\n          class=\"  img\"\n          width=\"100\"\n          height=\"100\"\n          onerror=\"this.onerror='null';this.src='\\/images\\/apps\\/notepadpp_hueda11bc730fb0bf8c3f0f1c5efa98b60_185993_100x100_fill_lanczos_smart1_3.png';\" /\u003e\n\n        \n      \n      \n    \n    \n  \n\n\n  \n",
  "searchKeyword": "",
  "categories": "",
  "tags": "",
  "content":"Notepad++ is a free (as in “free speech” and also as in “free beer”) source code editor and Notepad replacement that supports several languages. Running in the MS Windows environment, its use is governed by GNU General Public License. This is an external link, no content is served from this website Download Here "},{
  "section": "Apps",
  "slug": "/apps/postman/",
  "title": "Postman",
  "description": "",
  "date": "January 1, 1",
  "image": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n\n\n\n\n\n  \n\n  \n  \n    \n      \n    \n\n\n    \n    \n\n\n    \n    \n      \n      \n    \n    \n    \n\n\n    \n    \n      \n      \n        \n        \n        \n        \n        \n        \n\n\n        \n        \n\n\n        \u003cimg\n          \n            src=\"/images/apps/postman_hub5365e852731a4f91e01841271963af8_50101_420x0_resize_q90_h2_lanczos.webp\" loading=\"lazy\" decoding=\"async\"\n          \n\n          alt=\"\"\n          class=\"  img\"\n          width=\"420\"\n          height=\"420\"\n          onerror=\"this.onerror='null';this.src='\\/images\\/apps\\/postman_hub5365e852731a4f91e01841271963af8_50101_420x0_resize_q90_lanczos.jpg';\" /\u003e\n\n        \n      \n      \n    \n    \n  \n\n\n  \n",
  "imageSM": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n\n\n\n\n\n  \n\n  \n  \n    \n      \n    \n\n\n    \n    \n\n\n    \n    \n      \n      \n    \n    \n    \n\n\n    \n    \n      \n      \n        \n        \n        \n        \n        \n        \n          \n          \n          \n          \n        \n\n\n        \n        \n\n\n        \u003cimg\n          \n            src=\"/images/apps/postman_hub5365e852731a4f91e01841271963af8_50101_100x100_fill_q90_h2_lanczos_smart1.webp\" loading=\"lazy\" decoding=\"async\"\n          \n\n          alt=\"\"\n          class=\"  img\"\n          width=\"100\"\n          height=\"100\"\n          onerror=\"this.onerror='null';this.src='\\/images\\/apps\\/postman_hub5365e852731a4f91e01841271963af8_50101_100x100_fill_q90_lanczos_smart1.jpg';\" /\u003e\n\n        \n      \n      \n    \n    \n  \n\n\n  \n",
  "searchKeyword": "",
  "categories": "",
  "tags": "",
  "content":"Postman is an API platform for building and using APIs. Postman simplifies each step of the API lifecycle and streamlines collaboration so you can create better APIs—faster. This is an external link, no content is served from this website Download Here "},{
  "section": "Apps",
  "slug": "/apps/powerbi/",
  "title": "PowerBI Desktop",
  "description": "",
  "date": "January 1, 1",
  "image": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n\n\n\n\n\n  \n\n  \n  \n    \n      \n    \n\n\n    \n    \n\n\n    \n    \n      \n      \n    \n    \n    \n\n\n    \n    \n      \n      \n        \n        \n        \n        \n        \n        \n\n\n        \n        \n\n\n        \u003cimg\n          \n            src=\"/images/apps/powerbi_hu8a17fb3c25661f7d53c837633ba5bc5d_8649_420x0_resize_q90_h2_lanczos_3.webp\" loading=\"lazy\" decoding=\"async\"\n          \n\n          alt=\"\"\n          class=\"  img\"\n          width=\"420\"\n          height=\"420\"\n          onerror=\"this.onerror='null';this.src='\\/images\\/apps\\/powerbi_hu8a17fb3c25661f7d53c837633ba5bc5d_8649_420x0_resize_lanczos_3.png';\" /\u003e\n\n        \n      \n      \n    \n    \n  \n\n\n  \n",
  "imageSM": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n\n\n\n\n\n  \n\n  \n  \n    \n      \n    \n\n\n    \n    \n\n\n    \n    \n      \n      \n    \n    \n    \n\n\n    \n    \n      \n      \n        \n        \n        \n        \n        \n        \n          \n          \n          \n          \n        \n\n\n        \n        \n\n\n        \u003cimg\n          \n            src=\"/images/apps/powerbi_hu8a17fb3c25661f7d53c837633ba5bc5d_8649_100x100_fill_q90_h2_lanczos_smart1_3.webp\" loading=\"lazy\" decoding=\"async\"\n          \n\n          alt=\"\"\n          class=\"  img\"\n          width=\"100\"\n          height=\"100\"\n          onerror=\"this.onerror='null';this.src='\\/images\\/apps\\/powerbi_hu8a17fb3c25661f7d53c837633ba5bc5d_8649_100x100_fill_lanczos_smart1_3.png';\" /\u003e\n\n        \n      \n      \n    \n    \n  \n\n\n  \n",
  "searchKeyword": "",
  "categories": "",
  "tags": "",
  "content":"Whether you’re on the go or need to create rich, interactive reports, download the tools you need to build reports and stay connected to your data from anywhere, anytime. Get a 360° view of your business data on the go—at the touch of your fingers—and quickly connect, shape, visualize, and share data insights through Power BI. This is an external link, no content is served from this website Download Here "},{
  "section": "Apps",
  "slug": "/apps/psadt/",
  "title": "PSADT",
  "description": "",
  "date": "January 1, 1",
  "image": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n\n\n\n\n\n  \n\n  \n  \n    \n      \n    \n\n\n    \n    \n\n\n    \n    \n      \n      \n    \n    \n    \n\n\n    \n    \n      \n      \n        \n        \n        \n        \n        \n        \n\n\n        \n        \n\n\n        \u003cimg\n          \n            src=\"/images/apps/AppDeployToolkitLogo_hu6914918961484f958b6ae959bba327f1_255562_420x0_resize_q90_h2_lanczos_3.webp\" loading=\"lazy\" decoding=\"async\"\n          \n\n          alt=\"\"\n          class=\"  img\"\n          width=\"420\"\n          height=\"417\"\n          onerror=\"this.onerror='null';this.src='\\/images\\/apps\\/AppDeployToolkitLogo_hu6914918961484f958b6ae959bba327f1_255562_420x0_resize_lanczos_3.png';\" /\u003e\n\n        \n      \n      \n    \n    \n  \n\n\n  \n",
  "imageSM": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n\n\n\n\n\n  \n\n  \n  \n    \n      \n    \n\n\n    \n    \n\n\n    \n    \n      \n      \n    \n    \n    \n\n\n    \n    \n      \n      \n        \n        \n        \n        \n        \n        \n          \n          \n          \n          \n        \n\n\n        \n        \n\n\n        \u003cimg\n          \n            src=\"/images/apps/AppDeployToolkitLogo_hu6914918961484f958b6ae959bba327f1_255562_100x100_fill_q90_h2_lanczos_smart1_3.webp\" loading=\"lazy\" decoding=\"async\"\n          \n\n          alt=\"\"\n          class=\"  img\"\n          width=\"100\"\n          height=\"100\"\n          onerror=\"this.onerror='null';this.src='\\/images\\/apps\\/AppDeployToolkitLogo_hu6914918961484f958b6ae959bba327f1_255562_100x100_fill_lanczos_smart1_3.png';\" /\u003e\n\n        \n      \n      \n    \n    \n  \n\n\n  \n",
  "searchKeyword": "",
  "categories": "",
  "tags": "",
  "content":"PowerShell App Deployment Toolkit (PSADT) is a versatile solution that streamlines and standardizes the process of software deployment, making it easier than ever to manage your IT environment. It has a comprehensive set of features, such as dynamic logging, user interaction capabilities, and customizable functionality. This is an external link, no content is served from this website - Download available from the Github link Download Here "},{
  "section": "Apps",
  "slug": "/apps/vscode/",
  "title": "Visual Studio Code",
  "description": "",
  "date": "January 1, 1",
  "image": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n\n\n\n\n\n  \n\n  \n  \n    \n      \n    \n\n\n    \n    \n\n\n    \n    \n      \n      \n    \n    \n    \n\n\n    \n    \n      \n      \n        \n        \n        \n        \n        \n        \n\n\n        \n        \n\n\n        \u003cimg\n          \n            src=\"/images/apps/vscode_hubaba52b3c2c2014e532a68166d7ca31a_12326_420x0_resize_q90_h2_lanczos.webp\" loading=\"lazy\" decoding=\"async\"\n          \n\n          alt=\"\"\n          class=\"  img\"\n          width=\"420\"\n          height=\"420\"\n          onerror=\"this.onerror='null';this.src='\\/images\\/apps\\/vscode_hubaba52b3c2c2014e532a68166d7ca31a_12326_420x0_resize_q90_lanczos.jpg';\" /\u003e\n\n        \n      \n      \n    \n    \n  \n\n\n  \n",
  "imageSM": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n\n\n\n\n\n  \n\n  \n  \n    \n      \n    \n\n\n    \n    \n\n\n    \n    \n      \n      \n    \n    \n    \n\n\n    \n    \n      \n      \n        \n        \n        \n        \n        \n        \n          \n          \n          \n          \n        \n\n\n        \n        \n\n\n        \u003cimg\n          \n            src=\"/images/apps/vscode_hubaba52b3c2c2014e532a68166d7ca31a_12326_100x100_fill_q90_h2_lanczos_smart1.webp\" loading=\"lazy\" decoding=\"async\"\n          \n\n          alt=\"\"\n          class=\"  img\"\n          width=\"100\"\n          height=\"100\"\n          onerror=\"this.onerror='null';this.src='\\/images\\/apps\\/vscode_hubaba52b3c2c2014e532a68166d7ca31a_12326_100x100_fill_q90_lanczos_smart1.jpg';\" /\u003e\n\n        \n      \n      \n    \n    \n  \n\n\n  \n",
  "searchKeyword": "",
  "categories": "",
  "tags": "",
  "content":"Visual Studio Code is a free, lightweight, and extensible code editor for building web, desktop, and mobile applications, using any programming language and framework.\nVisual Studio Code has built-in support for Git source control management and powerful integrations with GitHub, an integrated debugger, and smart code completion with IntelliSense and with AI-driven IntelliCode. With over 30,000 extensions and themes in the Visual Studio Code Marketplace, you can customize the features and the look of Visual Studio Code to fit your needs, preferences, and style.\nYou can use Visual Studio Code to build any kind of app, for web, desktop, and mobile. Visual Studio Code supports JavaScript and TypeScript natively and offers extensions for coding in languages such as Python, Java, C/C++, C#, Go, Rust, PHP, and many more. This is an external link, no content is served from this website Download Here "}]
