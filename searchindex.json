[{
  "section": "Articles",
  "slug": "/articles/bp-cis/",
  "title": "CIS Intune Baselines - What do they break?",
  "description": "",
  "date": "May 23, 2024",
  "image": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n\n\n\n\n\n  \n\n  \n  \n    \n      \n    \n\n\n    \n    \n\n\n    \n    \n      \n      \n    \n    \n    \n\n\n    \n    \n      \n      \n        \n        \n        \n        \n        \n        \n\n\n        \n        \n\n\n        \u003cimg\n          \n            src=\"/images/title/CISv2_hu746e6f615a9d116e3cc954693c2172a8_1847642_420x0_resize_q90_h2_lanczos_3.webp\" loading=\"lazy\" decoding=\"async\"\n          \n\n          alt=\"\"\n          class=\"  img\"\n          width=\"420\"\n          height=\"217\"\n          onerror=\"this.onerror='null';this.src='\\/images\\/title\\/CISv2_hu746e6f615a9d116e3cc954693c2172a8_1847642_420x0_resize_lanczos_3.png';\" /\u003e\n\n        \n      \n      \n    \n    \n  \n\n\n  \n",
  "imageSM": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n\n\n\n\n\n  \n\n  \n  \n    \n      \n    \n\n\n    \n    \n\n\n    \n    \n      \n      \n    \n    \n    \n\n\n    \n    \n      \n      \n        \n        \n        \n        \n        \n        \n          \n          \n          \n          \n        \n\n\n        \n        \n\n\n        \u003cimg\n          \n            src=\"/images/title/CISv2_hu746e6f615a9d116e3cc954693c2172a8_1847642_100x100_fill_q90_h2_lanczos_smart1_3.webp\" loading=\"lazy\" decoding=\"async\"\n          \n\n          alt=\"\"\n          class=\"  img\"\n          width=\"100\"\n          height=\"100\"\n          onerror=\"this.onerror='null';this.src='\\/images\\/title\\/CISv2_hu746e6f615a9d116e3cc954693c2172a8_1847642_100x100_fill_lanczos_smart1_3.png';\" /\u003e\n\n        \n      \n      \n    \n    \n  \n\n\n  \n",
  "searchKeyword": "",
  "categories": "Security, Intune, CIS",
  "tags": "Security, Intune, CIS",
  "content":"(And yes I know\u0026hellip;. AI Generated blog post images are beginning to get a bit cringe\u0026hellip; but I actually liked this one so I rolled with it)\nHello again folks, today we\u0026rsquo;re talking CIS. What is it and more specifically what doe sit break? Here in the UK, everyone talks about NCSC baselines and adhering to Cyber Essentials or Cyber Essentials Plus and for both of these there is some guidance you can follow with suggestions that help you improve your security posture. NCSC even provide some (old) JSON files for Windows Configuration for configuration profiles you can download and import to Intune to get you started. Great!\nWith Center for Internet Security (CIS), however, the settings (as far as I know) are non-negotiable. You cant tweak them. Its a fixed configuration, and you either are or are not CIS compliant. So it got me thinking, \u0026ldquo;but what if I don\u0026rsquo;t agree with the settings you mandate? What if, I put this into my organisation and its too restrictive?\u0026rdquo; Where do we draw the line and say \u0026ldquo;actually, I agree that setting X is more secure than setting Y, but setting Y allows our staff to work better and faster and even though its less secure, its not insecure\u0026rdquo;. Is it subjective? There is a fine line between security and productivity, I suppose.\n(A very silly) Example, my car is safer if I take all four wheels off. It wont crash. I wont get injured and it wont get stolen. This makes the security team happy! But if I need to deliver a pizza before it gets cold and the destination is 10 miles away, this isnt helpful. Staff and customers will be unhappy with this situation, let alone the pineapple on this Pizza (I like it, come at me!). As I now walk to deliver this pizza, in the rain because my car is unusable thanks to the security team, the pizza gets cold and the whole situation is pretty miserable, plus I\u0026rsquo;m never 100% secure. I could get mugged for the pizza or someone could steal my cars shell for scrap metal.\nYou get the idea. I digress.\nLooking on the CIS website (at the time I was investigating this) there was a lovely (horrible) spreadsheet you could download with hundreds of settings in it that you would have to configure in Microsoft Intune and deploy to your managed devices, should you want to become CIS compliant. There are now downloadable benchmark policies you can go get and import, wonderful (more on this later).\nI did however, discover this community post: https://www.everything365.online/2023/09/18/cis-microsoft-intune-for-windows-11-benchmark-in-settings-catalog-json/ . Here, the author has taken the time to go through that spreadsheet I mentioned earlier and create policies that are available for you to go grab. I decided to go grab these and merge them into 6 policies as I wasn\u0026rsquo;t a fan of the separation.\nGreat! Now I had them condensed, nice and neat and we\u0026rsquo;re ready to prod and poke these to test what works. So for those that don\u0026rsquo;t know, CIS has levels, the idea is that in order to be level two you have level one and two policies together, layered. You may notice I\u0026rsquo;ve named two of my condensed policies level zero, this is because there were two profiles that were not marked as having a level, but seem to contain some basic security. Level zero covers technology like BitLocker, System Guard, Credential Guard Virtualization based security and platform security such as Direct Memory Access (DMA) protection. All these are pretty standard things so level zero should be your baseline, then layer on Level one and two respectively to achieve your desired security posture strength. This is my interpretation, I\u0026rsquo;m not 100% on whether you can be level one compliant, if you dont use level zero but given they are pretty basic, I see no harm in drawing this conclusion.\nThe following isn\u0026rsquo;t comprehensive its just what I noticed. There might be other settings that break something important to you so I am going to disclaimer this with do your own testing please and to state that I don\u0026rsquo;t work in security. I am happy to take advice from anyone working in this area if they have improvement suggestions for this post.\nLevel 0 - Issues During my testing, the following items were discovered to potentially cause problems to someone who manages Intune Devices;\nPolicy - CIS L0 BitLocker This policy does not silently encrypt the device. By default this policy requires manual effort from the end user to set a PIN before the device will encrypt. You cannot automate the PIN either, perhaps by setting as the device serial number as per this post , and this is because enhanced PINs are not enabled. Now, to me this is a problem, I dont want my end users to have to do something I can automate. It is however, procedural over technical. There will be arguments for and against any automation of BitLocker PINs I\u0026rsquo;m sure, people will not want a pattern that could be worked out, but some folks will not want their end users to take full control because they will forget their PIN, lose their data and hold technical staff responsible. You can fight amongst yourselves on that one.\nPolicy - CIS L0 NextGeneration From the Next Generation Policy, the settings in here mostly trigger reboots during the enrollment status page in Autopilot, evidenced by searching out event ID 2800 from the event viewer. Here is a useful reference for this https://techcommunity.microsoft.com/t5/intune-customer-success/support-tip-troubleshooting-unexpected-reboots-during-new-pc/ba-p/3896960 .\nInfo\nReboot trigger images from Event Viewer are linked to a CSP so I have made these images clickable.\nDespite the number of reboots triggered here however, I did not experience any issues with these. The reboots are triggered and recorded but there are no negative affects.\nLevel 1 - Issues This level includes the base form of security and is rather comprehensive on its own (that is Level 0 and Level 1). During testing, the following items were discovered to potentially cause problems; Policy - CIS L1 Computer Setting - Require Private Store Only - Blocks Microsoft store from working, however, it did not block the deployment of Company Portal and a UWP apps used during testing. This might be historical from the WSfB set up and could be a cause for concern as it has the potential to cause issues. The end user experience was that as soon as you loaded the Microsoft Store, you received a blocked message. Setting - Disable One Drive File Sync - Blocks Microsoft OneDrive from launching or syncing. Clearly this poses an issue because a lot of customers are using OneDrive to store data, and if they are paying for it via their license agreement it seems wasteful to turn it off. Removing this configuration or setting it to Sync Enabled, allows the OneDrive app to launch and silently log in after a reboot.\nSetting - Manage Preview Builds - This triggers a reboot during ESP. Setting - MSS: (AutoAdminLogon) Enable Automatic Logon - This one did break autopilot and after a very very long battle, I asked online and got help from the community (shout out to Radu Bogdan ) who pointed me in the direction of this setting which, once removed, seems to have cured the DefaultUser0 Problem during autopilot. Even thought the setting is disabled, even having it in your configuration causes autopilot to crap itself half way through a provision and just stop - displaying defaultUser0. I believe this is going to be a huge cause for concern, so watch out.\nLevel 2 - Issues Policy - CIS L2 Computer Setting - Turn off access to the store - Blocks Microsoft store from working, completely. Users will receive the following message whether they try to launch the store or install an app from the store in a web console Setting - Disallow Cloud Notification - Triggers a reboot during Autopilot, which may or may not cause issues. Interesting then that this is called out on the documentation as No reboots or service restarts are required for this policy to take effect, however, the reboot trigger is recorded in the event viewer. One to watch out for. Setting - Disable Store Originated Apps - Causes Company Portal to not load for available apps As above shows a \u0026ldquo;The app has been blocked by your administrator\u0026rdquo; message. Stopping this from loading prevents the user from launching any store originated app, including the Company Portal app so if using the Company Portal is important to you, one to look out for if you stick rigidly to the settings here in CIS\nConclusion In the UK, the uptake for CIS (from my own consultancy experience at least) is rare. If you are considering adhering to CIS I would advise rigorous testing before you jump in. Before I finished my testing and pain with the community policies above, CIS released the CIS Microsoft Intune for Windows 11 Benchmark - Build Kit (thanks for this!). The downloadable ZIP contains settings catalog JSON files you can import to Intune to become CIS compliant. I will need to do some further testing on this but will look out for the settings I mentioned above to ensure things can continue to run smoothly in my environment.\nI appreciate you taking the time to read my blog.\nPlease give it a share for me. Jonathan Links and References Location Link CIS CIS Workbench NCSC Device Security Guidance Configuration Packs NCSC Cyber Essentials: Requirements for IT Infrastructure v3.1 - Apr-23 Everything365 CIS Benchmark Katys Tech Blog Set BitLocker PIN to Serial Number during Autopilot "},{
  "section": "Articles",
  "slug": "/articles/bp-8-pbi-intune/",
  "title": "Intune and PowerBI Deep Dive - Part 8 - Autopilot Devices",
  "description": "",
  "date": "May 17, 2024",
  "image": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n\n\n\n\n\n  \n\n  \n  \n    \n      \n    \n\n\n    \n    \n\n\n    \n    \n      \n      \n    \n    \n    \n\n\n    \n    \n      \n      \n        \n        \n        \n        \n        \n        \n\n\n        \n        \n\n\n        \u003cimg\n          \n            src=\"/images/title/pbi-intune_hu93e729ed80f60802b181437f64a553ee_407980_420x0_resize_q90_h2_lanczos.webp\" loading=\"lazy\" decoding=\"async\"\n          \n\n          alt=\"\"\n          class=\"  img\"\n          width=\"420\"\n          height=\"217\"\n          onerror=\"this.onerror='null';this.src='\\/images\\/title\\/pbi-intune_hu93e729ed80f60802b181437f64a553ee_407980_420x0_resize_q90_lanczos.jpg';\" /\u003e\n\n        \n      \n      \n    \n    \n  \n\n\n  \n",
  "imageSM": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n\n\n\n\n\n  \n\n  \n  \n    \n      \n    \n\n\n    \n    \n\n\n    \n    \n      \n      \n    \n    \n    \n\n\n    \n    \n      \n      \n        \n        \n        \n        \n        \n        \n          \n          \n          \n          \n        \n\n\n        \n        \n\n\n        \u003cimg\n          \n            src=\"/images/title/pbi-intune_hu93e729ed80f60802b181437f64a553ee_407980_100x100_fill_q90_h2_lanczos_smart1.webp\" loading=\"lazy\" decoding=\"async\"\n          \n\n          alt=\"\"\n          class=\"  img\"\n          width=\"100\"\n          height=\"100\"\n          onerror=\"this.onerror='null';this.src='\\/images\\/title\\/pbi-intune_hu93e729ed80f60802b181437f64a553ee_407980_100x100_fill_q90_lanczos_smart1.jpg';\" /\u003e\n\n        \n      \n      \n    \n    \n  \n\n\n  \n",
  "searchKeyword": "",
  "categories": "PowerBi, Intune, Microsoft Graph",
  "tags": "Microsoft, Intune, PowerBI, Microsoft Graph",
  "content":"In this post we\u0026rsquo;ll look at pulling in details about Autopilot devices. Our list call from Managed Devices, covered in part 6 , gives us a column to tell us whether that device is autopilot enrolled but what if we want more information than that? What if we want to know the group tag it uses or whether it has an autopilot profile assigned to it. Lets go get that!\nQuick Links Series Menu Part 1 - Where to Start Part 2 - Application Registration Part 3 - Exploring Graph URLs Part 4 - Get-BearerToken Part 5 - Heavy Lifting Part 6 - Managed Devices Part 7 - Managed Applications Part 8 - Autopilot Devices Coming soon! - Connectors and Tokens Table Of Contents Graph URL Global Pre-requisites Chose your method Create the query Explanation Relationships Next post Graph URL The graph URL we are using in this section is deviceManagement/windowsAutopilotDeviceIdentities/. Here is the documentation links;\nv1.0 beta Global Pre-requisites You have created the Application Registration and it is granted DeviceManagementServiceConfig.Read.All and DeviceManagementConfiguration.Read.All. PowerBI parameter called TenantID is set PowerBI parameter called AppID is set PowerBI parameter called SecretID is set Note\nBelow are three tabs, for three different types of queries. You will only need to chose one of these three methods. Select the tab for the method you wish to follow then continue to read the post.\nChose your method Web.Contents (No Bearer) Web.Contents (with Bearer) OData.Feed (with Bearer) Web.Contents using a Logic App with no Bearer Token Warning\nThere is a cost implication for using Logic Apps, please investigate Logic App Pricing to ensure you are comfortable with this.\nIn this query we are going to leverage Web.Contents to call the logic app that does not require a bearer token and instead pass in the parameters TenantID, AppID and SecretID. We are also going to build two variables called in our query called GraphURL and Audience. The GraphURL we create, is made up of 4 parts. The Audience variable is going to contain one of the four parts, namely the Endpoint part. We will need the logic app call URL storing in a Parameter called MSGraphCall-NoBearer. This is the URL we will pass the parameters to and then the logic app will process the call and pass the data back to PowerBI so we can transform the data in order to form a report. Pre-Requisites You have created the Logic App from this post described in Method 1, which will handle pagination of the Microsoft Graph call for you. You will need to create a new PowerBI Parameter called MSGraphCall-NoBearer and in it, place the HTTP POST URL from the \u0026ldquo;When a HTTP request is received\u0026rdquo; step of your Logic App. Power Query let // Application Registration Permissions needed to make this call : DeviceManagementServiceConfig.Read.All // : DeviceManagementConfiguration.Read.All // Microsoft Graph URL Endpoint = \u0026#34;https://graph.microsoft.com/\u0026#34;, Version = \u0026#34;beta/\u0026#34;, Resource = \u0026#34;deviceManagement/windowsAutopilotDeviceIdentities/\u0026#34;, QueryParams = \u0026#34;\u0026#34;, GraphURL = Endpoint \u0026amp; Version \u0026amp; Resource \u0026amp; QueryParams, // Logic App to handle pagination LABody = \u0026#34;{ \u0026#34;\u0026#34;GraphUrl\u0026#34;\u0026#34;:\u0026#34;\u0026#34;\u0026#34; \u0026amp; GraphURL \u0026amp; \u0026#34;\u0026#34;\u0026#34;, \u0026#34;\u0026#34;TenantID\u0026#34;\u0026#34;:\u0026#34;\u0026#34;\u0026#34; \u0026amp; TenantID \u0026amp; \u0026#34;\u0026#34;\u0026#34;, \u0026#34;\u0026#34;AppID\u0026#34;\u0026#34;:\u0026#34;\u0026#34;\u0026#34; \u0026amp; AppID \u0026amp; \u0026#34;\u0026#34;\u0026#34;, \u0026#34;\u0026#34;SecretID\u0026#34;\u0026#34;:\u0026#34;\u0026#34;\u0026#34; \u0026amp; SecretID \u0026amp; \u0026#34;\u0026#34;\u0026#34;, \u0026#34;\u0026#34;Audience\u0026#34;\u0026#34;:\u0026#34;\u0026#34;\u0026#34; \u0026amp; Endpoint \u0026amp; \u0026#34;\u0026#34;\u0026#34; }\u0026#34;, LogicApp = Json.Document(Web.Contents(#\u0026#34;MSGraphCall-NoBearer\u0026#34;, [Headers=[#\u0026#34;Content-Type\u0026#34;=\u0026#34;application/json\u0026#34;],Content = Text.ToBinary(LABody)])), Value = LogicApp[value], // Output Processing #\u0026#34;Converted to Table\u0026#34; = Table.FromList(Value, Splitter.SplitByNothing(), null, null, ExtraValues.Error), #\u0026#34;Expanded Column1\u0026#34; = Table.ExpandRecordColumn(#\u0026#34;Converted to Table\u0026#34;, \u0026#34;Column1\u0026#34;, {\u0026#34;id\u0026#34;, \u0026#34;deploymentProfileAssignmentStatus\u0026#34;, \u0026#34;deploymentProfileAssignmentDetailedStatus\u0026#34;, \u0026#34;deploymentProfileAssignedDateTime\u0026#34;, \u0026#34;groupTag\u0026#34;, \u0026#34;purchaseOrderIdentifier\u0026#34;, \u0026#34;serialNumber\u0026#34;, \u0026#34;productKey\u0026#34;, \u0026#34;manufacturer\u0026#34;, \u0026#34;model\u0026#34;, \u0026#34;enrollmentState\u0026#34;, \u0026#34;lastContactedDateTime\u0026#34;, \u0026#34;addressableUserName\u0026#34;, \u0026#34;userPrincipalName\u0026#34;, \u0026#34;resourceName\u0026#34;, \u0026#34;skuNumber\u0026#34;, \u0026#34;systemFamily\u0026#34;, \u0026#34;azureActiveDirectoryDeviceId\u0026#34;, \u0026#34;azureAdDeviceId\u0026#34;, \u0026#34;managedDeviceId\u0026#34;, \u0026#34;displayName\u0026#34;, \u0026#34;deviceAccountUpn\u0026#34;, \u0026#34;deviceAccountPassword\u0026#34;, \u0026#34;deviceFriendlyName\u0026#34;, \u0026#34;remediationState\u0026#34;, \u0026#34;remediationStateLastModifiedDateTime\u0026#34;, \u0026#34;userlessEnrollmentStatus\u0026#34;}, {\u0026#34;id\u0026#34;, \u0026#34;deploymentProfileAssignmentStatus\u0026#34;, \u0026#34;deploymentProfileAssignmentDetailedStatus\u0026#34;, \u0026#34;deploymentProfileAssignedDateTime\u0026#34;, \u0026#34;groupTag\u0026#34;, \u0026#34;purchaseOrderIdentifier\u0026#34;, \u0026#34;serialNumber\u0026#34;, \u0026#34;productKey\u0026#34;, \u0026#34;manufacturer\u0026#34;, \u0026#34;model\u0026#34;, \u0026#34;enrollmentState\u0026#34;, \u0026#34;lastContactedDateTime\u0026#34;, \u0026#34;addressableUserName\u0026#34;, \u0026#34;userPrincipalName\u0026#34;, \u0026#34;resourceName\u0026#34;, \u0026#34;skuNumber\u0026#34;, \u0026#34;systemFamily\u0026#34;, \u0026#34;azureActiveDirectoryDeviceId\u0026#34;, \u0026#34;azureAdDeviceId\u0026#34;, \u0026#34;managedDeviceId\u0026#34;, \u0026#34;displayName\u0026#34;, \u0026#34;deviceAccountUpn\u0026#34;, \u0026#34;deviceAccountPassword\u0026#34;, \u0026#34;deviceFriendlyName\u0026#34;, \u0026#34;remediationState\u0026#34;, \u0026#34;remediationStateLastModifiedDateTime\u0026#34;, \u0026#34;userlessEnrollmentStatus\u0026#34;}) in #\u0026#34;Expanded Column1\u0026#34; Query Structure Firstly I\u0026rsquo;ve called out the permissions needed. A good practice I like to follow. Then I\u0026rsquo;ve built out the properties for the Graph URL. This is made up of four elements Endpoint, Version, Resource and Query Parameters. Resulting in one final variable of GraphURL which contains all four put together. Next we create the JSON body for the logic app call. This includes our five variables: TenantID, AppID, SecretID, GraphURL and Audience. Audience is simply the Endpoint part from building the previous GraphURL. Then we pass the JSON Body to the URL for the Logic App stored in the variable MSGraphCall-NoBearer using Web.Contents. Next, we process the output. This includes converting the list of records to a table and then expanding each of the records inside the table. and BOOM! we have our data in PowerBI! Web.Contents using a Logic App with Bearer Token Warning\nThere is a cost implication for using Logic Apps, please investigate Logic App Pricing to ensure you are comfortable with this.\nIn this query we are going to leverage Web.Contents to call the logic app that does require a bearer token and pass in the parameters GraphURL and Bearer. The GraphURL we create, is made up of 4 parts. The bearer token is the result of calling the function we created in part 4 . We will need the logic app call URL storing in a Parameter called MSGraphCall. This is the URL we will pass the parameters to and then the logic app will process the call and pass the data back to PowerBI so we can transform the data in order to form a report. Pre-Requisites You have created the Get-BearerToken function from this post . You have created Logic App from this post described in Method 2, which will handle pagination of the Microsoft Graph call for you. You will need to create a new PowerBI Parameter called MSGraphCall and in it, place the HTTP POST URL from the \u0026ldquo;When a HTTP request is received\u0026rdquo; step of your Logic App. Power Query let // Application Registration Permissions needed to make this call : DeviceManagementServiceConfig.Read.All // : DeviceManagementConfiguration.Read.All // Microsoft Graph URL Endpoint = \u0026#34;https://graph.microsoft.com/\u0026#34;, Version = \u0026#34;beta/\u0026#34;, Resource = \u0026#34;deviceManagement/windowsAutopilotDeviceIdentities/\u0026#34;, QueryParams = \u0026#34;\u0026#34;, GraphURL = Endpoint \u0026amp; Version \u0026amp; Resource \u0026amp; QueryParams, // Get Bearer Token Using Function Bearer = #\u0026#34;Get-BearerToken\u0026#34; (TenantID, AppID, SecretID, Endpoint), // Logic App to handle pagination LABody = \u0026#34;{ \u0026#34;\u0026#34;GraphUrl\u0026#34;\u0026#34;:\u0026#34;\u0026#34;\u0026#34; \u0026amp; GraphURL \u0026amp; \u0026#34;\u0026#34;\u0026#34;, \u0026#34;\u0026#34;Bearer\u0026#34;\u0026#34;:\u0026#34;\u0026#34;\u0026#34; \u0026amp; Bearer \u0026amp; \u0026#34;\u0026#34;\u0026#34; }\u0026#34;, LogicApp = Json.Document(Web.Contents(#\u0026#34;MSGraphCall\u0026#34;, [Headers=[#\u0026#34;Content-Type\u0026#34;=\u0026#34;application/json\u0026#34;],Content = Text.ToBinary(LABody)])), Value = LogicApp[value], // Output Processing #\u0026#34;Converted to Table\u0026#34; = Table.FromList(Value, Splitter.SplitByNothing(), null, null, ExtraValues.Error), #\u0026#34;Expanded Column1\u0026#34; = Table.ExpandRecordColumn(#\u0026#34;Converted to Table\u0026#34;, \u0026#34;Column1\u0026#34;, {\u0026#34;id\u0026#34;, \u0026#34;deploymentProfileAssignmentStatus\u0026#34;, \u0026#34;deploymentProfileAssignmentDetailedStatus\u0026#34;, \u0026#34;deploymentProfileAssignedDateTime\u0026#34;, \u0026#34;groupTag\u0026#34;, \u0026#34;purchaseOrderIdentifier\u0026#34;, \u0026#34;serialNumber\u0026#34;, \u0026#34;productKey\u0026#34;, \u0026#34;manufacturer\u0026#34;, \u0026#34;model\u0026#34;, \u0026#34;enrollmentState\u0026#34;, \u0026#34;lastContactedDateTime\u0026#34;, \u0026#34;addressableUserName\u0026#34;, \u0026#34;userPrincipalName\u0026#34;, \u0026#34;resourceName\u0026#34;, \u0026#34;skuNumber\u0026#34;, \u0026#34;systemFamily\u0026#34;, \u0026#34;azureActiveDirectoryDeviceId\u0026#34;, \u0026#34;azureAdDeviceId\u0026#34;, \u0026#34;managedDeviceId\u0026#34;, \u0026#34;displayName\u0026#34;, \u0026#34;deviceAccountUpn\u0026#34;, \u0026#34;deviceAccountPassword\u0026#34;, \u0026#34;deviceFriendlyName\u0026#34;, \u0026#34;remediationState\u0026#34;, \u0026#34;remediationStateLastModifiedDateTime\u0026#34;, \u0026#34;userlessEnrollmentStatus\u0026#34;}, {\u0026#34;id\u0026#34;, \u0026#34;deploymentProfileAssignmentStatus\u0026#34;, \u0026#34;deploymentProfileAssignmentDetailedStatus\u0026#34;, \u0026#34;deploymentProfileAssignedDateTime\u0026#34;, \u0026#34;groupTag\u0026#34;, \u0026#34;purchaseOrderIdentifier\u0026#34;, \u0026#34;serialNumber\u0026#34;, \u0026#34;productKey\u0026#34;, \u0026#34;manufacturer\u0026#34;, \u0026#34;model\u0026#34;, \u0026#34;enrollmentState\u0026#34;, \u0026#34;lastContactedDateTime\u0026#34;, \u0026#34;addressableUserName\u0026#34;, \u0026#34;userPrincipalName\u0026#34;, \u0026#34;resourceName\u0026#34;, \u0026#34;skuNumber\u0026#34;, \u0026#34;systemFamily\u0026#34;, \u0026#34;azureActiveDirectoryDeviceId\u0026#34;, \u0026#34;azureAdDeviceId\u0026#34;, \u0026#34;managedDeviceId\u0026#34;, \u0026#34;displayName\u0026#34;, \u0026#34;deviceAccountUpn\u0026#34;, \u0026#34;deviceAccountPassword\u0026#34;, \u0026#34;deviceFriendlyName\u0026#34;, \u0026#34;remediationState\u0026#34;, \u0026#34;remediationStateLastModifiedDateTime\u0026#34;, \u0026#34;userlessEnrollmentStatus\u0026#34;}) in #\u0026#34;Expanded Column1\u0026#34; Query Structure Firstly I\u0026rsquo;ve called out the permissions needed. A good practice I like to follow. Then I\u0026rsquo;ve built out the properties for the Graph URL. This is made up of four elements Endpoint, Version, Resource and Query Parameters. Resulting in one final variable of GraphURL which contains all four put together. I then use the 3 PowerBI Variables we have TenantID, AppID and SecretID along with the Endpoint part of the GrpahURL to call the PowerBI function Get-BearerToken, and the return value is stored in the variable Bearer within the query code. Next we create the JSON body for the logic app call. This includes our two variables: GraphURL and Bearer. Then we pass the JSON Body to the URL for the Logic App stored in the variable MSGraphCall using Web.Contents. Next, we process the output. This includes converting the list of records to a table and then expanding each of the records inside the table.. and BOOM! we have our data in PowerBI! OData.Feed using a Bearer Token Info\nThere is no cost implication for using OData.Feed.\nIn this query we are going to leverage OData.Feed v4 Power Query to call the Graph API. The OData.Feed support pagination, so the feeds itself will will process the call and then pass the data back to PowerBI (no Logic Apps!) so we can transform the data in order to form a report.\nFirst we set up our GraphURL, as we have done with other queries building it with the four elements. Then we call the Get-BearerToken function to get a token for authorisation. Finally we use the OData.Feed (with the bearer token) to authenticate and pull in our results.\nI tend to find, whilst OData.Feeds are OK, I have found them to be a bit hit and miss. Most of the time, 95% I would say, you\u0026rsquo;ll be fine. However I have noticed that the OData.Feed doesn\u0026rsquo;t always support everything you could need, sometimes you get errors on columns straight away. Sometimes you get columns that you need to expand within PowerBI, you get excited about what you might get and then everything comes back as an error. But don\u0026rsquo;t let that put you off, this is a great way to handle pagination. Pre-Requisites You have created the Get-BearerToken function from this post . Power Query let // Application Registration Permissions needed to make this call : DeviceManagementServiceConfig.Read.All // : DeviceManagementConfiguration.Read.All // Microsoft Graph URL Endpoint = \u0026#34;https://graph.microsoft.com/\u0026#34;, Version = \u0026#34;beta/\u0026#34;, Resource = \u0026#34;deviceManagement/windowsAutopilotDeviceIdentities/\u0026#34;, QueryParams = \u0026#34;\u0026#34;, GraphURL = Endpoint \u0026amp; Version \u0026amp; Resource \u0026amp; QueryParams, // Get an Access Token to make Graph Calls (uses Application Registration) Bearer = #\u0026#34;Get-BearerToken\u0026#34; (TenantID, AppID, SecretID, Endpoint), // ODataFeed to process Graph Call // https://learn.microsoft.com/en-us/powerquery-m/odata-feed OData = OData.Feed ( GraphURL, [ Authorization = Bearer ], [ ExcludedFromCacheKey = {\u0026#34;Authorization\u0026#34;}, ODataVersion = 4, Implementation = \u0026#34;2.0\u0026#34;, OmitValues = ODataOmitValues.Nulls ] ) // Formatting in OData Power Queries available from my Github Create the query In order to create the query, once you have all the pre-requisites done select Transform Data (1) from the ribbon, then right-click to create a new blank query (2 \u0026amp; 3). Access the Advanced Editor (4) and insert the Power Query code (5). Once saved, you will observe that this action not only generates the query and all of its associated steps but it should displays the dataset from the Microsoft Graph call. Explanation When using Logic Apps, data is processed within the logic app and fed back to PowerBi using Web.Contents Power Query. We can do this because the Logic app can return a JSON format we require, and it is using URLs (or rather, web contents). In our use case we pass parameters to the call to facilitate one method or the other. Don\u0026rsquo;t forget you can hard-configure these variables in the Logic app instead of passing them up from PowerBI There is a cost involved in using and calling logic apps, please investigate this and see if you are comfortable. OData.Feeds are free to use. From PowerBI\u0026rsquo;s perspective, its undertaking a weblink call and getting back results. Precisely what it would do if you pointed the console to a cloud hosted CSV, for example, or any other web URL. This means that from PowerBI\u0026rsquo;s perspective the call is direct to a web link and does not form part of a hand-authored query. Finally, data sanitisation may be required after you get the output. This can take the form of changing the title of columns, changing the type of data or replacing values in the columns. The more work you put into data sanitisation, the less stress you\u0026rsquo;ll put on the report as the data is santitised before the visuals are created. Relationships The following relationship should be added here:\nName Setting Table 1 deviceManagement/managedDevices Table 1 Column id Table 2 deviceManagement/windowsAutopilotDeviceIdentities/ Table 2 Column managedDeviceId Active Relationship Yes Cross-Filter Direction Both Relationship Type 1:1 Tip\nWhilst you\u0026rsquo;re creating your tables, you may find that PowerBi tries to automatically create table relationships. Sometimes, it gets this right, other times not so much. Its important to check on these relationships so your tables relate to each other as you expect. The Cross-Filter Direction is important here for when you create visuals on your dashboard because this is going to determine how the visuals filter and the overall look and feel for your end users.\nNext post In the next post I\u0026rsquo;m going to look at Connectors and Tokens . This one will be a slightly different layout as we can get away without using pagination for these so we\u0026rsquo;ll use direct queries instead. Therefore there will only be direct queries for you to copy and use and not three tabs for approaches as we\u0026rsquo;ve been used to over the last couple of posts.\nI appreciate you taking the time to read my blog.\nPlease give it a share for me. Jonathan Links and References Location Link Microsoft Learn Create and Manage Relationships in PowerBi "},{
  "section": "Articles",
  "slug": "/articles/bp-7-pbi-intune/",
  "title": "Intune and PowerBI Deep Dive - Part 7 - Managed Applications",
  "description": "",
  "date": "March 19, 2024",
  "image": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n\n\n\n\n\n  \n\n  \n  \n    \n      \n    \n\n\n    \n    \n\n\n    \n    \n      \n      \n    \n    \n    \n\n\n    \n    \n      \n      \n        \n        \n        \n        \n        \n        \n\n\n        \n        \n\n\n        \u003cimg\n          \n            src=\"/images/title/pbi-intune_hu93e729ed80f60802b181437f64a553ee_407980_420x0_resize_q90_h2_lanczos.webp\" loading=\"lazy\" decoding=\"async\"\n          \n\n          alt=\"\"\n          class=\"  img\"\n          width=\"420\"\n          height=\"217\"\n          onerror=\"this.onerror='null';this.src='\\/images\\/title\\/pbi-intune_hu93e729ed80f60802b181437f64a553ee_407980_420x0_resize_q90_lanczos.jpg';\" /\u003e\n\n        \n      \n      \n    \n    \n  \n\n\n  \n",
  "imageSM": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n\n\n\n\n\n  \n\n  \n  \n    \n      \n    \n\n\n    \n    \n\n\n    \n    \n      \n      \n    \n    \n    \n\n\n    \n    \n      \n      \n        \n        \n        \n        \n        \n        \n          \n          \n          \n          \n        \n\n\n        \n        \n\n\n        \u003cimg\n          \n            src=\"/images/title/pbi-intune_hu93e729ed80f60802b181437f64a553ee_407980_100x100_fill_q90_h2_lanczos_smart1.webp\" loading=\"lazy\" decoding=\"async\"\n          \n\n          alt=\"\"\n          class=\"  img\"\n          width=\"100\"\n          height=\"100\"\n          onerror=\"this.onerror='null';this.src='\\/images\\/title\\/pbi-intune_hu93e729ed80f60802b181437f64a553ee_407980_100x100_fill_q90_lanczos_smart1.jpg';\" /\u003e\n\n        \n      \n      \n    \n    \n  \n\n\n  \n",
  "searchKeyword": "",
  "categories": "PowerBi, Intune, Microsoft Graph",
  "tags": "Microsoft, Intune, PowerBI, Microsoft Graph",
  "content":"In this post we\u0026rsquo;ll look at Applications within Intune. The Graph response for this will have some additions for applications at the bottom for cross referencing purposes so check those out too. Especially if you use PatchMyPC.\nLets get to it!\nQuick Links Series Menu Part 1 - Where to Start Part 2 - Application Registration Part 3 - Exploring Graph URLs Part 4 - Get-BearerToken Part 5 - Heavy Lifting Part 6 - Managed Devices Part 7 - Managed Applications Part 8 - Autopilot Devices Coming soon! - Connectors and Tokens Table Of Contents Graph URL Global Pre-requisites Chose your method Create the query Explanation Relationships Supported Product Lists Additional Next post Graph URL The graph URL we are using in this section is deviceAppManagement/mobileApps/. Here is the documentation links;\nv1.0 beta Global Pre-requisites You have created the Application Registration and it is granted DeviceManagementApps.Read.All permissions. PowerBI parameter called TenantID is set PowerBI parameter called AppID is set PowerBI parameter called SecretID is set Note\nBelow are three tabs, for three different types of queries. You will only need to chose one of these three methods. Select the tab for the method you wish to follow then continue to read the post.\nChose your method Web.Contents (No Bearer) Web.Contents (with Bearer) OData.Feed (with Bearer) Web.Contents using a Logic App with no Bearer Token Warning\nThere is a cost implication for using Logic Apps, please investigate Logic App Pricing to ensure you are comfortable with this.\nIn this query we are going to leverage Web.Contents to call the logic app that does not require a bearer token and instead pass in the parameters TenantID, AppID and SecretID. We are also going to build two variables called in our query called GraphURL and Audience. The GraphURL we create, is made up of 4 parts. The Audience variable is going to contain one of the four parts, namely the Endpoint part. We will need the logic app call URL storing in a Parameter called MSGraphCall-NoBearer. This is the URL we will pass the parameters to and then the logic app will process the call and pass the data back to PowerBI so we can transform the data in order to form a report. Pre-Requisites You have created the Logic App from this post described in Method 1, which will handle pagination of the Microsoft Graph call for you. You will need to create a new PowerBI Parameter called MSGraphCall-NoBearer and in it, place the HTTP POST URL from the \u0026ldquo;When a HTTP request is received\u0026rdquo; step of your Logic App. Power Query let // Application Registration Permissions needed to make this call : DeviceManagementApps.Read.All // Microsoft Graph URL Endpoint = \u0026#34;https://graph.microsoft.com/\u0026#34;, Version = \u0026#34;beta/\u0026#34;, Resource = \u0026#34;deviceAppManagement/mobileApps/\u0026#34;, QueryParams = \u0026#34;\u0026#34;, GraphURL = Endpoint \u0026amp; Version \u0026amp; Resource \u0026amp; QueryParams, // Logic App to handle pagination LABody = \u0026#34;{ \u0026#34;\u0026#34;GraphUrl\u0026#34;\u0026#34;:\u0026#34;\u0026#34;\u0026#34; \u0026amp; GraphURL \u0026amp; \u0026#34;\u0026#34;\u0026#34;, \u0026#34;\u0026#34;TenantID\u0026#34;\u0026#34;:\u0026#34;\u0026#34;\u0026#34; \u0026amp; TenantID \u0026amp; \u0026#34;\u0026#34;\u0026#34;, \u0026#34;\u0026#34;AppID\u0026#34;\u0026#34;:\u0026#34;\u0026#34;\u0026#34; \u0026amp; AppID \u0026amp; \u0026#34;\u0026#34;\u0026#34;, \u0026#34;\u0026#34;SecretID\u0026#34;\u0026#34;:\u0026#34;\u0026#34;\u0026#34; \u0026amp; SecretID \u0026amp; \u0026#34;\u0026#34;\u0026#34;, \u0026#34;\u0026#34;Audience\u0026#34;\u0026#34;:\u0026#34;\u0026#34;\u0026#34; \u0026amp; Endpoint \u0026amp; \u0026#34;\u0026#34;\u0026#34; }\u0026#34;, LogicApp = Json.Document(Web.Contents(#\u0026#34;MSGraphCall-NoBearer\u0026#34;, [Headers=[#\u0026#34;Content-Type\u0026#34;=\u0026#34;application/json\u0026#34;],Content = Text.ToBinary(LABody)])), Value = LogicApp[value], #\u0026#34;Converted to Table\u0026#34; = Table.FromList(Value, Splitter.SplitByNothing(), null, null, ExtraValues.Error), // Formatting #\u0026#34;Expanded Column1\u0026#34; = Table.ExpandRecordColumn(#\u0026#34;Converted to Table\u0026#34;, \u0026#34;Column1\u0026#34;, {\u0026#34;@odata.type\u0026#34;, \u0026#34;id\u0026#34;, \u0026#34;displayName\u0026#34;, \u0026#34;description\u0026#34;, \u0026#34;publisher\u0026#34;, \u0026#34;largeIcon\u0026#34;, \u0026#34;createdDateTime\u0026#34;, \u0026#34;lastModifiedDateTime\u0026#34;, \u0026#34;isFeatured\u0026#34;, \u0026#34;privacyInformationUrl\u0026#34;, \u0026#34;informationUrl\u0026#34;, \u0026#34;owner\u0026#34;, \u0026#34;developer\u0026#34;, \u0026#34;notes\u0026#34;, \u0026#34;uploadState\u0026#34;, \u0026#34;publishingState\u0026#34;, \u0026#34;isAssigned\u0026#34;, \u0026#34;roleScopeTagIds\u0026#34;, \u0026#34;dependentAppCount\u0026#34;, \u0026#34;supersedingAppCount\u0026#34;, \u0026#34;supersededAppCount\u0026#34;, \u0026#34;committedContentVersion\u0026#34;, \u0026#34;fileName\u0026#34;, \u0026#34;size\u0026#34;, \u0026#34;installCommandLine\u0026#34;, \u0026#34;uninstallCommandLine\u0026#34;, \u0026#34;applicableArchitectures\u0026#34;, \u0026#34;minimumFreeDiskSpaceInMB\u0026#34;, \u0026#34;minimumMemoryInMB\u0026#34;, \u0026#34;minimumNumberOfProcessors\u0026#34;, \u0026#34;minimumCpuSpeedInMHz\u0026#34;, \u0026#34;msiInformation\u0026#34;, \u0026#34;setupFilePath\u0026#34;, \u0026#34;minimumSupportedWindowsRelease\u0026#34;, \u0026#34;displayVersion\u0026#34;, \u0026#34;minimumSupportedOperatingSystem\u0026#34;, \u0026#34;detectionRules\u0026#34;, \u0026#34;requirementRules\u0026#34;, \u0026#34;rules\u0026#34;, \u0026#34;installExperience\u0026#34;, \u0026#34;returnCodes\u0026#34;}, {\u0026#34;@odata.type\u0026#34;, \u0026#34;id\u0026#34;, \u0026#34;displayName\u0026#34;, \u0026#34;description\u0026#34;, \u0026#34;publisher\u0026#34;, \u0026#34;largeIcon\u0026#34;, \u0026#34;createdDateTime\u0026#34;, \u0026#34;lastModifiedDateTime\u0026#34;, \u0026#34;isFeatured\u0026#34;, \u0026#34;privacyInformationUrl\u0026#34;, \u0026#34;informationUrl\u0026#34;, \u0026#34;owner\u0026#34;, \u0026#34;developer\u0026#34;, \u0026#34;notes\u0026#34;, \u0026#34;uploadState\u0026#34;, \u0026#34;publishingState\u0026#34;, \u0026#34;isAssigned\u0026#34;, \u0026#34;roleScopeTagIds\u0026#34;, \u0026#34;dependentAppCount\u0026#34;, \u0026#34;supersedingAppCount\u0026#34;, \u0026#34;supersededAppCount\u0026#34;, \u0026#34;committedContentVersion\u0026#34;, \u0026#34;fileName\u0026#34;, \u0026#34;size\u0026#34;, \u0026#34;installCommandLine\u0026#34;, \u0026#34;uninstallCommandLine\u0026#34;, \u0026#34;applicableArchitectures\u0026#34;, \u0026#34;minimumFreeDiskSpaceInMB\u0026#34;, \u0026#34;minimumMemoryInMB\u0026#34;, \u0026#34;minimumNumberOfProcessors\u0026#34;, \u0026#34;minimumCpuSpeedInMHz\u0026#34;, \u0026#34;msiInformation\u0026#34;, \u0026#34;setupFilePath\u0026#34;, \u0026#34;minimumSupportedWindowsRelease\u0026#34;, \u0026#34;displayVersion\u0026#34;, \u0026#34;minimumSupportedOperatingSystem\u0026#34;, \u0026#34;detectionRules\u0026#34;, \u0026#34;requirementRules\u0026#34;, \u0026#34;rules\u0026#34;, \u0026#34;installExperience\u0026#34;, \u0026#34;returnCodes\u0026#34;}) in #\u0026#34;Expanded Column1\u0026#34; Query Structure Firstly I\u0026rsquo;ve called out the permissions needed. A good practice I like to follow. Then I\u0026rsquo;ve built out the properties for the Graph URL. This is made up of four elements Endpoint, Version, Resource and Query Parameters. Resulting in one final variable of GraphURL which contains all four put together. Next we create the JSON body for the logic app call. This includes our five variables: TenantID, AppID, SecretID, GraphURL and Audience. Audience is simply the Endpoint part from building the previous GraphURL. Then we pass the JSON Body to the URL for the Logic App stored in the variable MSGraphCall-NoBearer using Web.Contents. Next, we process the output. This includes converting the list of records to a table and then expanding each of the records inside the table. and BOOM! we have our data in PowerBI! Web.Contents using a Logic App with Bearer Token Warning\nThere is a cost implication for using Logic Apps, please investigate Logic App Pricing to ensure you are comfortable with this.\nIn this query we are going to leverage Web.Contents to call the logic app that does require a bearer token and pass in the parameters GraphURL and Bearer. The GraphURL we create, is made up of 4 parts. The bearer token is the result of calling the function we created in part 4 . We will need the logic app call URL storing in a Parameter called MSGraphCall. This is the URL we will pass the parameters to and then the logic app will process the call and pass the data back to PowerBI so we can transform the data in order to form a report. Pre-Requisites You have created the Get-BearerToken function from this post . You have created Logic App from this post described in Method 2, which will handle pagination of the Microsoft Graph call for you. You will need to create a new PowerBI Parameter called MSGraphCall and in it, place the HTTP POST URL from the \u0026ldquo;When a HTTP request is received\u0026rdquo; step of your Logic App. Power Query let // Application Registration Permissions needed to make this call : DeviceManagementApps.Read.All // Microsoft Graph URL Endpoint = \u0026#34;https://graph.microsoft.com/\u0026#34;, Version = \u0026#34;beta/\u0026#34;, Resource = \u0026#34;deviceAppManagement/mobileApps/\u0026#34;, QueryParams = \u0026#34;\u0026#34;, GraphURL = Endpoint \u0026amp; Version \u0026amp; Resource \u0026amp; QueryParams, // Get an Access Token to make Graph Calls (uses Application Registration) Bearer = #\u0026#34;Get-BearerToken\u0026#34; (TenantID, AppID, SecretID, Endpoint), // Logic App to handle pagination LABody = \u0026#34;{ \u0026#34;\u0026#34;GraphUrl\u0026#34;\u0026#34;:\u0026#34;\u0026#34;\u0026#34; \u0026amp; GraphURL \u0026amp; \u0026#34;\u0026#34;\u0026#34;, \u0026#34;\u0026#34;Bearer\u0026#34;\u0026#34;:\u0026#34;\u0026#34;\u0026#34; \u0026amp; Bearer \u0026amp; \u0026#34;\u0026#34;\u0026#34; }\u0026#34;, LogicApp = Json.Document(Web.Contents(#\u0026#34;MSGraphCall\u0026#34;, [Headers=[#\u0026#34;Content-Type\u0026#34;=\u0026#34;application/json\u0026#34;],Content = Text.ToBinary(LABody)])), Value = LogicApp[value], #\u0026#34;Converted to Table\u0026#34; = Table.FromList(Value, Splitter.SplitByNothing(), null, null, ExtraValues.Error), // Formatting #\u0026#34;Expanded Column1\u0026#34; = Table.ExpandRecordColumn(#\u0026#34;Converted to Table\u0026#34;, \u0026#34;Column1\u0026#34;, {\u0026#34;@odata.type\u0026#34;, \u0026#34;id\u0026#34;, \u0026#34;displayName\u0026#34;, \u0026#34;description\u0026#34;, \u0026#34;publisher\u0026#34;, \u0026#34;largeIcon\u0026#34;, \u0026#34;createdDateTime\u0026#34;, \u0026#34;lastModifiedDateTime\u0026#34;, \u0026#34;isFeatured\u0026#34;, \u0026#34;privacyInformationUrl\u0026#34;, \u0026#34;informationUrl\u0026#34;, \u0026#34;owner\u0026#34;, \u0026#34;developer\u0026#34;, \u0026#34;notes\u0026#34;, \u0026#34;uploadState\u0026#34;, \u0026#34;publishingState\u0026#34;, \u0026#34;isAssigned\u0026#34;, \u0026#34;roleScopeTagIds\u0026#34;, \u0026#34;dependentAppCount\u0026#34;, \u0026#34;supersedingAppCount\u0026#34;, \u0026#34;supersededAppCount\u0026#34;, \u0026#34;committedContentVersion\u0026#34;, \u0026#34;fileName\u0026#34;, \u0026#34;size\u0026#34;, \u0026#34;installCommandLine\u0026#34;, \u0026#34;uninstallCommandLine\u0026#34;, \u0026#34;applicableArchitectures\u0026#34;, \u0026#34;minimumFreeDiskSpaceInMB\u0026#34;, \u0026#34;minimumMemoryInMB\u0026#34;, \u0026#34;minimumNumberOfProcessors\u0026#34;, \u0026#34;minimumCpuSpeedInMHz\u0026#34;, \u0026#34;msiInformation\u0026#34;, \u0026#34;setupFilePath\u0026#34;, \u0026#34;minimumSupportedWindowsRelease\u0026#34;, \u0026#34;displayVersion\u0026#34;, \u0026#34;minimumSupportedOperatingSystem\u0026#34;, \u0026#34;detectionRules\u0026#34;, \u0026#34;requirementRules\u0026#34;, \u0026#34;rules\u0026#34;, \u0026#34;installExperience\u0026#34;, \u0026#34;returnCodes\u0026#34;}, {\u0026#34;@odata.type\u0026#34;, \u0026#34;id\u0026#34;, \u0026#34;displayName\u0026#34;, \u0026#34;description\u0026#34;, \u0026#34;publisher\u0026#34;, \u0026#34;largeIcon\u0026#34;, \u0026#34;createdDateTime\u0026#34;, \u0026#34;lastModifiedDateTime\u0026#34;, \u0026#34;isFeatured\u0026#34;, \u0026#34;privacyInformationUrl\u0026#34;, \u0026#34;informationUrl\u0026#34;, \u0026#34;owner\u0026#34;, \u0026#34;developer\u0026#34;, \u0026#34;notes\u0026#34;, \u0026#34;uploadState\u0026#34;, \u0026#34;publishingState\u0026#34;, \u0026#34;isAssigned\u0026#34;, \u0026#34;roleScopeTagIds\u0026#34;, \u0026#34;dependentAppCount\u0026#34;, \u0026#34;supersedingAppCount\u0026#34;, \u0026#34;supersededAppCount\u0026#34;, \u0026#34;committedContentVersion\u0026#34;, \u0026#34;fileName\u0026#34;, \u0026#34;size\u0026#34;, \u0026#34;installCommandLine\u0026#34;, \u0026#34;uninstallCommandLine\u0026#34;, \u0026#34;applicableArchitectures\u0026#34;, \u0026#34;minimumFreeDiskSpaceInMB\u0026#34;, \u0026#34;minimumMemoryInMB\u0026#34;, \u0026#34;minimumNumberOfProcessors\u0026#34;, \u0026#34;minimumCpuSpeedInMHz\u0026#34;, \u0026#34;msiInformation\u0026#34;, \u0026#34;setupFilePath\u0026#34;, \u0026#34;minimumSupportedWindowsRelease\u0026#34;, \u0026#34;displayVersion\u0026#34;, \u0026#34;minimumSupportedOperatingSystem\u0026#34;, \u0026#34;detectionRules\u0026#34;, \u0026#34;requirementRules\u0026#34;, \u0026#34;rules\u0026#34;, \u0026#34;installExperience\u0026#34;, \u0026#34;returnCodes\u0026#34;}) in #\u0026#34;Expanded Column1\u0026#34; Query Structure Firstly I\u0026rsquo;ve called out the permissions needed. A good practice I like to follow. Then I\u0026rsquo;ve built out the properties for the Graph URL. This is made up of four elements Endpoint, Version, Resource and Query Parameters. Resulting in one final variable of GraphURL which contains all four put together. I then use the 3 PowerBI Variables we have TenantID, AppID and SecretID along with the Endpoint part of the GrpahURL to call the PowerBI function Get-BearerToken, and the return value is stored in the variable Bearer within the query code. Next we create the JSON body for the logic app call. This includes our two variables: GraphURL and Bearer. Then we pass the JSON Body to the URL for the Logic App stored in the variable MSGraphCall using Web.Contents. Next, we process the output. This includes converting the list of records to a table and then expanding each of the records inside the table.. and BOOM! we have our data in PowerBI! OData.Feed using a Bearer Token Info\nThere is no cost implication for using OData.Feed.\nIn this query we are going to leverage OData.Feed v4 Power Query to call the Graph API. The OData.Feed support pagination, so the feeds itself will will process the call and then pass the data back to PowerBI (no Logic Apps!) so we can transform the data in order to form a report.\nFirst we set up our GraphURL, as we have done with other queries building it with the four elements. Then we call the Get-BearerToken function to get a token for authorisation. Finally we use the OData.Feed (with the bearer token) to authenticate and pull in our results.\nI tend to find, whilst OData.Feeds are OK, I have found them to be a bit hit and miss. Most of the time, 95% I would say, you\u0026rsquo;ll be fine. However I have noticed that the OData.Feed doesn\u0026rsquo;t always support everything you could need, sometimes you get errors on columns straight away. Sometimes you get columns that you need to expand within PowerBI, you get excited about what you might get and then everything comes back as an error. But don\u0026rsquo;t let that put you off, this is a great way to handle pagination. Pre-Requisites You have created the Get-BearerToken function from this post . Power Query let // Application Registration Permissions needed to make this call : DeviceManagementApps.Read.All // Microsoft Graph URL Endpoint = \u0026#34;https://graph.microsoft.com/\u0026#34;, Version = \u0026#34;beta/\u0026#34;, Resource = \u0026#34;deviceAppManagement/mobileApps/\u0026#34;, QueryParams = \u0026#34;\u0026#34;, GraphURL = Endpoint \u0026amp; Version \u0026amp; Resource \u0026amp; QueryParams, // Get an Access Token to make Graph Calls (uses Application Registration) Bearer = #\u0026#34;Get-BearerToken\u0026#34; (TenantID, AppID, SecretID, Endpoint), //ODataFeed to process Graph Call OData = OData.Feed ( GraphURL, [ Authorization = Bearer ], [ ExcludedFromCacheKey = {\u0026#34;Authorization\u0026#34;}, ODataVersion = 4, Implementation = \u0026#34;2.0\u0026#34; ] ) in OData Power Queries available from my Github Create the query In order to create the query, once you have all the pre-requisites done select Transform Data (1) from the ribbon, then right-click to create a new blank query (2 \u0026amp; 3). Access the Advanced Editor (4) and insert the Power Query code (5). Once saved, you will observe that this action not only generates the query and all of its associated steps but it should displays the dataset from the Microsoft Graph call. Explanation When using Logic Apps, data is processed within the logic app and fed back to PowerBi using Web.Contents Power Query. We can do this because the Logic app can return a JSON format we require, and it is using URLs (or rather, web contents). In our use case we pass parameters to the call to facilitate one method or the other. Don\u0026rsquo;t forget you can hard-configure these variables in the Logic app instead of passing them up from PowerBI There is a cost involved in using and calling logic apps, please investigate this and see if you are comfortable. OData.Feeds are free to use. From PowerBI\u0026rsquo;s perspective, its undertaking a weblink call and getting back results. Precisely what it would do if you pointed the console to a cloud hosted CSV, for example, or any other web URL. This means that from PowerBI\u0026rsquo;s perspective the call is direct to a web link and does not form part of a hand-authored query. Finally, data sanitisation may be required after you get the output. This can take the form of changing the title of columns, changing the type of data or replacing values in the columns. The more work you put into data sanitisation, the less stress you\u0026rsquo;ll put on the report as the data is santitised before the visuals are created. Relationships At present no table relationships to add here. Supported Product Lists Please ping me a message if you want any others adding here. Title Notes PatchMyPC Supported Products Link (CSV) iVanti Neurons for Intune Supported Product List (JSON POST) Microsoft Enterprise App Management (List) PatchMyPC provide a nice web hosted CSV you can use, you can use the URL and pass that straight to PowerBI and pull the list of products in directly (love this!). iVanti Neurons uses a JSON URL that you can use in conjunction with a Web source in PowerBI. Microsoft Advanced App Management (through Intune Suite) shows their apps on the website as a table you can pull into PowerBI but it only contains the app name, no other information. This is foolish - I have complained.\nAdditional PatchMyPC customers can benefit from the fact that they classify their apps quite nicely. When you pull in your apps data, you may notice that PatchMyPC add notes to the app. An application created by PatchMyPC has PmpAppID: in the notes followed, by a GUID and an update (which is essentially an app anyway but with slightly different properties) has PmpUpdateID: in the notes followed by a GUID. Like so;\nYou may also notice that anything generated by PatchMyPC has a unique filename. It will have PatchMyPC-ScriptRunner.intunewin in it something which you might be able to leverage to create a nice PowerBI dashboard based solely upon PatchMyPC.\nNext post Up next Autopilot Devices . Reminder, the next few posts will feel very alike with odd changes. I am hoping chunks become familiar to you and the queries on my GitHub will act as a \u0026lsquo;one-stop shop\u0026rsquo; to go get queries at present we\u0026rsquo;re focussing on getting some data into PowerBI rather than creating a dashboard, that will come in time as we build this up together.\nI appreciate you taking the time to read my blog.\nPlease give it a share for me. Jonathan "},{
  "section": "Articles",
  "slug": "/articles/bp-6-pbi-intune/",
  "title": "Intune and PowerBI Deep Dive - Part 6 - Managed Devices",
  "description": "Visit www.deploymentshare.com to find out more",
  "date": "February 17, 2024",
  "image": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n\n\n\n\n\n  \n\n  \n  \n    \n      \n    \n\n\n    \n    \n\n\n    \n    \n      \n      \n    \n    \n    \n\n\n    \n    \n      \n      \n        \n        \n        \n        \n        \n        \n\n\n        \n        \n\n\n        \u003cimg\n          \n            src=\"/images/title/pbi-intune_hu93e729ed80f60802b181437f64a553ee_407980_420x0_resize_q90_h2_lanczos.webp\" loading=\"lazy\" decoding=\"async\"\n          \n\n          alt=\"\"\n          class=\"  img\"\n          width=\"420\"\n          height=\"217\"\n          onerror=\"this.onerror='null';this.src='\\/images\\/title\\/pbi-intune_hu93e729ed80f60802b181437f64a553ee_407980_420x0_resize_q90_lanczos.jpg';\" /\u003e\n\n        \n      \n      \n    \n    \n  \n\n\n  \n",
  "imageSM": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n\n\n\n\n\n  \n\n  \n  \n    \n      \n    \n\n\n    \n    \n\n\n    \n    \n      \n      \n    \n    \n    \n\n\n    \n    \n      \n      \n        \n        \n        \n        \n        \n        \n          \n          \n          \n          \n        \n\n\n        \n        \n\n\n        \u003cimg\n          \n            src=\"/images/title/pbi-intune_hu93e729ed80f60802b181437f64a553ee_407980_100x100_fill_q90_h2_lanczos_smart1.webp\" loading=\"lazy\" decoding=\"async\"\n          \n\n          alt=\"\"\n          class=\"  img\"\n          width=\"100\"\n          height=\"100\"\n          onerror=\"this.onerror='null';this.src='\\/images\\/title\\/pbi-intune_hu93e729ed80f60802b181437f64a553ee_407980_100x100_fill_q90_lanczos_smart1.jpg';\" /\u003e\n\n        \n      \n      \n    \n    \n  \n\n\n  \n",
  "searchKeyword": "",
  "categories": "PowerBi, Intune, Microsoft Graph",
  "tags": "Microsoft, Intune, PowerBI, Microsoft Graph",
  "content":"In this post we are finally going to look at getting some data into PowerBI to play around with. We are going to use a query in PowerBI to go and retrieve our managed devices information. Remember discussing pagination for APIs? Should you have more than 1000 devices we\u0026rsquo;re also going to need to consider Pagination but don\u0026rsquo;t worry there are three methods to do this discussed below.\nQuick Links Series Menu Part 1 - Where to Start Part 2 - Application Registration Part 3 - Exploring Graph URLs Part 4 - Get-BearerToken Part 5 - Heavy Lifting Part 6 - Managed Devices Part 7 - Managed Applications Part 8 - Autopilot Devices Coming soon! - Connectors and Tokens Now, when you first approach this task you might consider employing a coding mindset akin to PowerShell, such as fetching the initial 1000 devices and implementing a do-while loop to retrieve the remaining ones using a method such as checking for the presence of another @Data.nextlink and, if available, using it to fetch additional devices until the next link is no longer present. Although these methods work, it poses a challenge in the way PowerBI manages data within PowerBI Desktop. It involves a \u0026lsquo;hand-authored\u0026rsquo; query. While effective within PowerBI Desktop for obtaining the required data, it is important to note that this method will not allow the publication of the report to the PowerBI service. This is why I\u0026rsquo;ve looked into other methods to do the \u0026lsquo;heavy lifting\u0026rsquo;. A hand-authored query will prevent you publishing your report and you will see this if you look at the data source settings (as shown in part 1 )\nWe\u0026rsquo;ve already discussed why we don\u0026rsquo;t want to do that, how we should use one of a number of ways to grab our data and even how to discover what we need beforehand. So lets make a start getting some data into PowerBI using those methods. This first Graph URL is going to get us our managed devices from Intune and use a list call to pull in hardware information.\nTable Of Contents Graph URL Global Pre-requisites Chose your method Create the query Explanation Relationships Next post Graph URL The graph URL we are using in this section is deviceManagement/managedDevices/. Here is the documentation links;\nv1.0 beta Global Pre-requisites You have created the Application Registration and it is granted DeviceManagementManagedDevices.Read.All permissions. PowerBI parameter called TenantID is set PowerBI parameter called AppID is set PowerBI parameter called SecretID is set Note\nBelow are three tabs, for three different types of queries. You will only need to chose one of these three methods. Select the tab for the method you wish to follow then continue to read the post.\nChose your method Web.Contents (No Bearer) Web.Contents (with Bearer) OData.Feed (with Bearer) Web.Contents using a Logic App with no Bearer Token Warning\nThere is a cost implication for using Logic Apps, please investigate Logic App Pricing to ensure you are comfortable with this.\nIn this query we are going to leverage Web.Contents to call the logic app that does not require a bearer token and instead pass in the parameters TenantID, AppID and SecretID. We are also going to build two variables called in our query called GraphURL and Audience. The GraphURL we create, is made up of 4 parts. The Audience variable is going to contain one of the four parts, namely the Endpoint part. We will need the logic app call URL storing in a Parameter called MSGraphCall-NoBearer. This is the URL we will pass the parameters to and then the logic app will process the call and pass the data back to PowerBI so we can transform the data in order to form a report. Pre-Requisites You have created the Logic App from this post described in Method 1, which will handle pagination of the Microsoft Graph call for you. You will need to create a new PowerBI Parameter called MSGraphCall-NoBearer and in it, place the HTTP POST URL from the \u0026ldquo;When a HTTP request is received\u0026rdquo; step of your Logic App. Power Query let // Application Registration Permissions needed to make this call : DeviceManagementManagedDevices.Read.All // Microsoft Graph URL Endpoint = \u0026#34;https://graph.microsoft.com/\u0026#34;, Version = \u0026#34;beta/\u0026#34;, Resource = \u0026#34;deviceManagement/managedDevices/\u0026#34;, QueryParams = \u0026#34;\u0026#34;, GraphURL = Endpoint \u0026amp; Version \u0026amp; Resource \u0026amp; QueryParams, // Logic App to handle pagination LABody = \u0026#34;{ \u0026#34;\u0026#34;GraphUrl\u0026#34;\u0026#34;:\u0026#34;\u0026#34;\u0026#34; \u0026amp; GraphURL \u0026amp; \u0026#34;\u0026#34;\u0026#34;, \u0026#34;\u0026#34;TenantID\u0026#34;\u0026#34;:\u0026#34;\u0026#34;\u0026#34; \u0026amp; TenantID \u0026amp; \u0026#34;\u0026#34;\u0026#34;, \u0026#34;\u0026#34;AppID\u0026#34;\u0026#34;:\u0026#34;\u0026#34;\u0026#34; \u0026amp; AppID \u0026amp; \u0026#34;\u0026#34;\u0026#34;, \u0026#34;\u0026#34;SecretID\u0026#34;\u0026#34;:\u0026#34;\u0026#34;\u0026#34; \u0026amp; SecretID \u0026amp; \u0026#34;\u0026#34;\u0026#34;, \u0026#34;\u0026#34;Audience\u0026#34;\u0026#34;:\u0026#34;\u0026#34;\u0026#34; \u0026amp; Endpoint \u0026amp; \u0026#34;\u0026#34;\u0026#34; }\u0026#34;, LogicApp = Json.Document(Web.Contents(#\u0026#34;MSGraphCall-NoBearer\u0026#34;, [Headers=[#\u0026#34;Content-Type\u0026#34;=\u0026#34;application/json\u0026#34;],Content = Text.ToBinary(LABody)])), Value = LogicApp[value], // Output Processing #\u0026#34;Converted to Table\u0026#34; = Table.FromList(Value, Splitter.SplitByNothing(), null, null, ExtraValues.Error), #\u0026#34;Expanded Column1\u0026#34; = Table.ExpandRecordColumn(#\u0026#34;Converted to Table\u0026#34;, \u0026#34;Column1\u0026#34;, {\u0026#34;id\u0026#34;, \u0026#34;userId\u0026#34;, \u0026#34;deviceName\u0026#34;, \u0026#34;ownerType\u0026#34;, \u0026#34;managedDeviceOwnerType\u0026#34;, \u0026#34;managementState\u0026#34;, \u0026#34;enrolledDateTime\u0026#34;, \u0026#34;lastSyncDateTime\u0026#34;, \u0026#34;chassisType\u0026#34;, \u0026#34;operatingSystem\u0026#34;, \u0026#34;deviceType\u0026#34;, \u0026#34;complianceState\u0026#34;, \u0026#34;jailBroken\u0026#34;, \u0026#34;managementAgent\u0026#34;, \u0026#34;osVersion\u0026#34;, \u0026#34;easActivated\u0026#34;, \u0026#34;easDeviceId\u0026#34;, \u0026#34;easActivationDateTime\u0026#34;, \u0026#34;aadRegistered\u0026#34;, \u0026#34;azureADRegistered\u0026#34;, \u0026#34;deviceEnrollmentType\u0026#34;, \u0026#34;lostModeState\u0026#34;, \u0026#34;activationLockBypassCode\u0026#34;, \u0026#34;emailAddress\u0026#34;, \u0026#34;azureActiveDirectoryDeviceId\u0026#34;, \u0026#34;azureADDeviceId\u0026#34;, \u0026#34;deviceRegistrationState\u0026#34;, \u0026#34;deviceCategoryDisplayName\u0026#34;, \u0026#34;isSupervised\u0026#34;, \u0026#34;exchangeLastSuccessfulSyncDateTime\u0026#34;, \u0026#34;exchangeAccessState\u0026#34;, \u0026#34;exchangeAccessStateReason\u0026#34;, \u0026#34;remoteAssistanceSessionUrl\u0026#34;, \u0026#34;remoteAssistanceSessionErrorDetails\u0026#34;, \u0026#34;isEncrypted\u0026#34;, \u0026#34;userPrincipalName\u0026#34;, \u0026#34;model\u0026#34;, \u0026#34;manufacturer\u0026#34;, \u0026#34;imei\u0026#34;, \u0026#34;complianceGracePeriodExpirationDateTime\u0026#34;, \u0026#34;serialNumber\u0026#34;, \u0026#34;phoneNumber\u0026#34;, \u0026#34;androidSecurityPatchLevel\u0026#34;, \u0026#34;userDisplayName\u0026#34;, \u0026#34;configurationManagerClientEnabledFeatures\u0026#34;, \u0026#34;wiFiMacAddress\u0026#34;, \u0026#34;deviceHealthAttestationState\u0026#34;, \u0026#34;subscriberCarrier\u0026#34;, \u0026#34;meid\u0026#34;, \u0026#34;totalStorageSpaceInBytes\u0026#34;, \u0026#34;freeStorageSpaceInBytes\u0026#34;, \u0026#34;managedDeviceName\u0026#34;, \u0026#34;partnerReportedThreatState\u0026#34;, \u0026#34;retireAfterDateTime\u0026#34;, \u0026#34;preferMdmOverGroupPolicyAppliedDateTime\u0026#34;, \u0026#34;autopilotEnrolled\u0026#34;, \u0026#34;requireUserEnrollmentApproval\u0026#34;, \u0026#34;managementCertificateExpirationDate\u0026#34;, \u0026#34;iccid\u0026#34;, \u0026#34;udid\u0026#34;, \u0026#34;roleScopeTagIds\u0026#34;, \u0026#34;windowsActiveMalwareCount\u0026#34;, \u0026#34;windowsRemediatedMalwareCount\u0026#34;, \u0026#34;notes\u0026#34;, \u0026#34;configurationManagerClientHealthState\u0026#34;, \u0026#34;configurationManagerClientInformation\u0026#34;, \u0026#34;ethernetMacAddress\u0026#34;, \u0026#34;physicalMemoryInBytes\u0026#34;, \u0026#34;processorArchitecture\u0026#34;, \u0026#34;specificationVersion\u0026#34;, \u0026#34;joinType\u0026#34;, \u0026#34;skuFamily\u0026#34;, \u0026#34;skuNumber\u0026#34;, \u0026#34;managementFeatures\u0026#34;, \u0026#34;enrollmentProfileName\u0026#34;, \u0026#34;bootstrapTokenEscrowed\u0026#34;, \u0026#34;deviceFirmwareConfigurationInterfaceManaged\u0026#34;, \u0026#34;hardwareInformation\u0026#34;, \u0026#34;deviceActionResults\u0026#34;, \u0026#34;usersLoggedOn\u0026#34;, \u0026#34;chromeOSDeviceInfo\u0026#34;}, {\u0026#34;id\u0026#34;, \u0026#34;userId\u0026#34;, \u0026#34;deviceName\u0026#34;, \u0026#34;ownerType\u0026#34;, \u0026#34;managedDeviceOwnerType\u0026#34;, \u0026#34;managementState\u0026#34;, \u0026#34;enrolledDateTime\u0026#34;, \u0026#34;lastSyncDateTime\u0026#34;, \u0026#34;chassisType\u0026#34;, \u0026#34;operatingSystem\u0026#34;, \u0026#34;deviceType\u0026#34;, \u0026#34;complianceState\u0026#34;, \u0026#34;jailBroken\u0026#34;, \u0026#34;managementAgent\u0026#34;, \u0026#34;osVersion\u0026#34;, \u0026#34;easActivated\u0026#34;, \u0026#34;easDeviceId\u0026#34;, \u0026#34;easActivationDateTime\u0026#34;, \u0026#34;aadRegistered\u0026#34;, \u0026#34;azureADRegistered\u0026#34;, \u0026#34;deviceEnrollmentType\u0026#34;, \u0026#34;lostModeState\u0026#34;, \u0026#34;activationLockBypassCode\u0026#34;, \u0026#34;emailAddress\u0026#34;, \u0026#34;azureActiveDirectoryDeviceId\u0026#34;, \u0026#34;azureADDeviceId\u0026#34;, \u0026#34;deviceRegistrationState\u0026#34;, \u0026#34;deviceCategoryDisplayName\u0026#34;, \u0026#34;isSupervised\u0026#34;, \u0026#34;exchangeLastSuccessfulSyncDateTime\u0026#34;, \u0026#34;exchangeAccessState\u0026#34;, \u0026#34;exchangeAccessStateReason\u0026#34;, \u0026#34;remoteAssistanceSessionUrl\u0026#34;, \u0026#34;remoteAssistanceSessionErrorDetails\u0026#34;, \u0026#34;isEncrypted\u0026#34;, \u0026#34;userPrincipalName\u0026#34;, \u0026#34;model\u0026#34;, \u0026#34;manufacturer\u0026#34;, \u0026#34;imei\u0026#34;, \u0026#34;complianceGracePeriodExpirationDateTime\u0026#34;, \u0026#34;serialNumber\u0026#34;, \u0026#34;phoneNumber\u0026#34;, \u0026#34;androidSecurityPatchLevel\u0026#34;, \u0026#34;userDisplayName\u0026#34;, \u0026#34;configurationManagerClientEnabledFeatures\u0026#34;, \u0026#34;wiFiMacAddress\u0026#34;, \u0026#34;deviceHealthAttestationState\u0026#34;, \u0026#34;subscriberCarrier\u0026#34;, \u0026#34;meid\u0026#34;, \u0026#34;totalStorageSpaceInBytes\u0026#34;, \u0026#34;freeStorageSpaceInBytes\u0026#34;, \u0026#34;managedDeviceName\u0026#34;, \u0026#34;partnerReportedThreatState\u0026#34;, \u0026#34;retireAfterDateTime\u0026#34;, \u0026#34;preferMdmOverGroupPolicyAppliedDateTime\u0026#34;, \u0026#34;autopilotEnrolled\u0026#34;, \u0026#34;requireUserEnrollmentApproval\u0026#34;, \u0026#34;managementCertificateExpirationDate\u0026#34;, \u0026#34;iccid\u0026#34;, \u0026#34;udid\u0026#34;, \u0026#34;roleScopeTagIds\u0026#34;, \u0026#34;windowsActiveMalwareCount\u0026#34;, \u0026#34;windowsRemediatedMalwareCount\u0026#34;, \u0026#34;notes\u0026#34;, \u0026#34;configurationManagerClientHealthState\u0026#34;, \u0026#34;configurationManagerClientInformation\u0026#34;, \u0026#34;ethernetMacAddress\u0026#34;, \u0026#34;physicalMemoryInBytes\u0026#34;, \u0026#34;processorArchitecture\u0026#34;, \u0026#34;specificationVersion\u0026#34;, \u0026#34;joinType\u0026#34;, \u0026#34;skuFamily\u0026#34;, \u0026#34;skuNumber\u0026#34;, \u0026#34;managementFeatures\u0026#34;, \u0026#34;enrollmentProfileName\u0026#34;, \u0026#34;bootstrapTokenEscrowed\u0026#34;, \u0026#34;deviceFirmwareConfigurationInterfaceManaged\u0026#34;, \u0026#34;hardwareInformation\u0026#34;, \u0026#34;deviceActionResults\u0026#34;, \u0026#34;usersLoggedOn\u0026#34;, \u0026#34;chromeOSDeviceInfo\u0026#34;}), #\u0026#34;Expanded hardwareInformation\u0026#34; = Table.ExpandRecordColumn(#\u0026#34;Expanded Column1\u0026#34;, \u0026#34;hardwareInformation\u0026#34;, {\u0026#34;serialNumber\u0026#34;, \u0026#34;totalStorageSpace\u0026#34;, \u0026#34;freeStorageSpace\u0026#34;, \u0026#34;imei\u0026#34;, \u0026#34;meid\u0026#34;, \u0026#34;manufacturer\u0026#34;, \u0026#34;model\u0026#34;, \u0026#34;phoneNumber\u0026#34;, \u0026#34;subscriberCarrier\u0026#34;, \u0026#34;cellularTechnology\u0026#34;, \u0026#34;wifiMac\u0026#34;, \u0026#34;operatingSystemLanguage\u0026#34;, \u0026#34;isSupervised\u0026#34;, \u0026#34;isEncrypted\u0026#34;, \u0026#34;batterySerialNumber\u0026#34;, \u0026#34;batteryHealthPercentage\u0026#34;, \u0026#34;batteryChargeCycles\u0026#34;, \u0026#34;isSharedDevice\u0026#34;, \u0026#34;tpmSpecificationVersion\u0026#34;, \u0026#34;operatingSystemEdition\u0026#34;, \u0026#34;deviceFullQualifiedDomainName\u0026#34;, \u0026#34;deviceGuardVirtualizationBasedSecurityHardwareRequirementState\u0026#34;, \u0026#34;deviceGuardVirtualizationBasedSecurityState\u0026#34;, \u0026#34;deviceGuardLocalSystemAuthorityCredentialGuardState\u0026#34;, \u0026#34;osBuildNumber\u0026#34;, \u0026#34;operatingSystemProductType\u0026#34;, \u0026#34;ipAddressV4\u0026#34;, \u0026#34;subnetAddress\u0026#34;, \u0026#34;esimIdentifier\u0026#34;, \u0026#34;systemManagementBIOSVersion\u0026#34;, \u0026#34;tpmManufacturer\u0026#34;, \u0026#34;tpmVersion\u0026#34;, \u0026#34;sharedDeviceCachedUsers\u0026#34;}, {\u0026#34;serialNumber.1\u0026#34;, \u0026#34;totalStorageSpace\u0026#34;, \u0026#34;freeStorageSpace\u0026#34;, \u0026#34;imei.1\u0026#34;, \u0026#34;meid.1\u0026#34;, \u0026#34;manufacturer.1\u0026#34;, \u0026#34;model.1\u0026#34;, \u0026#34;phoneNumber.1\u0026#34;, \u0026#34;subscriberCarrier.1\u0026#34;, \u0026#34;cellularTechnology\u0026#34;, \u0026#34;wifiMac\u0026#34;, \u0026#34;operatingSystemLanguage\u0026#34;, \u0026#34;isSupervised.1\u0026#34;, \u0026#34;isEncrypted.1\u0026#34;, \u0026#34;batterySerialNumber\u0026#34;, \u0026#34;batteryHealthPercentage\u0026#34;, \u0026#34;batteryChargeCycles\u0026#34;, \u0026#34;isSharedDevice\u0026#34;, \u0026#34;tpmSpecificationVersion\u0026#34;, \u0026#34;operatingSystemEdition\u0026#34;, \u0026#34;deviceFullQualifiedDomainName\u0026#34;, \u0026#34;deviceGuardVirtualizationBasedSecurityHardwareRequirementState\u0026#34;, \u0026#34;deviceGuardVirtualizationBasedSecurityState\u0026#34;, \u0026#34;deviceGuardLocalSystemAuthorityCredentialGuardState\u0026#34;, \u0026#34;osBuildNumber\u0026#34;, \u0026#34;operatingSystemProductType\u0026#34;, \u0026#34;ipAddressV4\u0026#34;, \u0026#34;subnetAddress\u0026#34;, \u0026#34;esimIdentifier\u0026#34;, \u0026#34;systemManagementBIOSVersion\u0026#34;, \u0026#34;tpmManufacturer\u0026#34;, \u0026#34;tpmVersion\u0026#34;, \u0026#34;sharedDeviceCachedUsers\u0026#34;}) in #\u0026#34;Expanded hardwareInformation\u0026#34; Query Structure Firstly I\u0026rsquo;ve called out the permissions needed. A good practice I like to follow. Then I\u0026rsquo;ve built out the properties for the Graph URL. This is made up of four elements Endpoint, Version, Resource and Query Parameters. Resulting in one final variable of GraphURL which contains all four put together. Next we create the JSON body for the logic app call. This includes our five variables: TenantID, AppID, SecretID, GraphURL and Audience. Audience is simply the Endpoint part from building the previous GraphURL. Then we pass the JSON Body to the URL for the Logic App stored in the variable MSGraphCall-NoBearer using Web.Contents. Next, we process the output. This includes converting the list of records to a table and then expanding each of the records inside the table. and BOOM! we have our data in PowerBI! Web.Contents using a Logic App with Bearer Token Warning\nThere is a cost implication for using Logic Apps, please investigate Logic App Pricing to ensure you are comfortable with this.\nIn this query we are going to leverage Web.Contents to call the logic app that does require a bearer token and pass in the parameters GraphURL and Bearer. The GraphURL we create, is made up of 4 parts. The bearer token is the result of calling the function we created in part 4 . We will need the logic app call URL storing in a Parameter called MSGraphCall. This is the URL we will pass the parameters to and then the logic app will process the call and pass the data back to PowerBI so we can transform the data in order to form a report. Pre-Requisites You have created the Get-BearerToken function from this post . You have created Logic App from this post described in Method 2, which will handle pagination of the Microsoft Graph call for you. You will need to create a new PowerBI Parameter called MSGraphCall and in it, place the HTTP POST URL from the \u0026ldquo;When a HTTP request is received\u0026rdquo; step of your Logic App. Power Query let // Application Registration Permissions needed to make this call : DeviceManagementManagedDevices.Read.All // Microsoft Graph URL Endpoint = \u0026#34;https://graph.microsoft.com/\u0026#34;, Version = \u0026#34;beta/\u0026#34;, Resource = \u0026#34;deviceManagement/managedDevices/\u0026#34;, QueryParams = \u0026#34;\u0026#34;, GraphURL = Endpoint \u0026amp; Version \u0026amp; Resource \u0026amp; QueryParams, // Get Bearer Token Using Function Bearer = #\u0026#34;Get-BearerToken\u0026#34; (TenantID, AppID, SecretID, Endpoint), // Logic App to handle pagination LABody = \u0026#34;{ \u0026#34;\u0026#34;GraphUrl\u0026#34;\u0026#34;:\u0026#34;\u0026#34;\u0026#34; \u0026amp; GraphURL \u0026amp; \u0026#34;\u0026#34;\u0026#34;, \u0026#34;\u0026#34;Bearer\u0026#34;\u0026#34;:\u0026#34;\u0026#34;\u0026#34; \u0026amp; Bearer \u0026amp; \u0026#34;\u0026#34;\u0026#34; }\u0026#34;, LogicApp = Json.Document(Web.Contents(#\u0026#34;MSGraphCall\u0026#34;, [Headers=[#\u0026#34;Content-Type\u0026#34;=\u0026#34;application/json\u0026#34;],Content = Text.ToBinary(LABody)])), Value = LogicApp[value], // Output Processing #\u0026#34;Converted to Table\u0026#34; = Table.FromList(Value, Splitter.SplitByNothing(), null, null, ExtraValues.Error), #\u0026#34;Expanded Column1\u0026#34; = Table.ExpandRecordColumn(#\u0026#34;Converted to Table\u0026#34;, \u0026#34;Column1\u0026#34;, {\u0026#34;id\u0026#34;, \u0026#34;userId\u0026#34;, \u0026#34;deviceName\u0026#34;, \u0026#34;ownerType\u0026#34;, \u0026#34;managedDeviceOwnerType\u0026#34;, \u0026#34;managementState\u0026#34;, \u0026#34;enrolledDateTime\u0026#34;, \u0026#34;lastSyncDateTime\u0026#34;, \u0026#34;chassisType\u0026#34;, \u0026#34;operatingSystem\u0026#34;, \u0026#34;deviceType\u0026#34;, \u0026#34;complianceState\u0026#34;, \u0026#34;jailBroken\u0026#34;, \u0026#34;managementAgent\u0026#34;, \u0026#34;osVersion\u0026#34;, \u0026#34;easActivated\u0026#34;, \u0026#34;easDeviceId\u0026#34;, \u0026#34;easActivationDateTime\u0026#34;, \u0026#34;aadRegistered\u0026#34;, \u0026#34;azureADRegistered\u0026#34;, \u0026#34;deviceEnrollmentType\u0026#34;, \u0026#34;lostModeState\u0026#34;, \u0026#34;activationLockBypassCode\u0026#34;, \u0026#34;emailAddress\u0026#34;, \u0026#34;azureActiveDirectoryDeviceId\u0026#34;, \u0026#34;azureADDeviceId\u0026#34;, \u0026#34;deviceRegistrationState\u0026#34;, \u0026#34;deviceCategoryDisplayName\u0026#34;, \u0026#34;isSupervised\u0026#34;, \u0026#34;exchangeLastSuccessfulSyncDateTime\u0026#34;, \u0026#34;exchangeAccessState\u0026#34;, \u0026#34;exchangeAccessStateReason\u0026#34;, \u0026#34;remoteAssistanceSessionUrl\u0026#34;, \u0026#34;remoteAssistanceSessionErrorDetails\u0026#34;, \u0026#34;isEncrypted\u0026#34;, \u0026#34;userPrincipalName\u0026#34;, \u0026#34;model\u0026#34;, \u0026#34;manufacturer\u0026#34;, \u0026#34;imei\u0026#34;, \u0026#34;complianceGracePeriodExpirationDateTime\u0026#34;, \u0026#34;serialNumber\u0026#34;, \u0026#34;phoneNumber\u0026#34;, \u0026#34;androidSecurityPatchLevel\u0026#34;, \u0026#34;userDisplayName\u0026#34;, \u0026#34;configurationManagerClientEnabledFeatures\u0026#34;, \u0026#34;wiFiMacAddress\u0026#34;, \u0026#34;deviceHealthAttestationState\u0026#34;, \u0026#34;subscriberCarrier\u0026#34;, \u0026#34;meid\u0026#34;, \u0026#34;totalStorageSpaceInBytes\u0026#34;, \u0026#34;freeStorageSpaceInBytes\u0026#34;, \u0026#34;managedDeviceName\u0026#34;, \u0026#34;partnerReportedThreatState\u0026#34;, \u0026#34;retireAfterDateTime\u0026#34;, \u0026#34;preferMdmOverGroupPolicyAppliedDateTime\u0026#34;, \u0026#34;autopilotEnrolled\u0026#34;, \u0026#34;requireUserEnrollmentApproval\u0026#34;, \u0026#34;managementCertificateExpirationDate\u0026#34;, \u0026#34;iccid\u0026#34;, \u0026#34;udid\u0026#34;, \u0026#34;roleScopeTagIds\u0026#34;, \u0026#34;windowsActiveMalwareCount\u0026#34;, \u0026#34;windowsRemediatedMalwareCount\u0026#34;, \u0026#34;notes\u0026#34;, \u0026#34;configurationManagerClientHealthState\u0026#34;, \u0026#34;configurationManagerClientInformation\u0026#34;, \u0026#34;ethernetMacAddress\u0026#34;, \u0026#34;physicalMemoryInBytes\u0026#34;, \u0026#34;processorArchitecture\u0026#34;, \u0026#34;specificationVersion\u0026#34;, \u0026#34;joinType\u0026#34;, \u0026#34;skuFamily\u0026#34;, \u0026#34;skuNumber\u0026#34;, \u0026#34;managementFeatures\u0026#34;, \u0026#34;enrollmentProfileName\u0026#34;, \u0026#34;bootstrapTokenEscrowed\u0026#34;, \u0026#34;deviceFirmwareConfigurationInterfaceManaged\u0026#34;, \u0026#34;hardwareInformation\u0026#34;, \u0026#34;deviceActionResults\u0026#34;, \u0026#34;usersLoggedOn\u0026#34;, \u0026#34;chromeOSDeviceInfo\u0026#34;}, {\u0026#34;id\u0026#34;, \u0026#34;userId\u0026#34;, \u0026#34;deviceName\u0026#34;, \u0026#34;ownerType\u0026#34;, \u0026#34;managedDeviceOwnerType\u0026#34;, \u0026#34;managementState\u0026#34;, \u0026#34;enrolledDateTime\u0026#34;, \u0026#34;lastSyncDateTime\u0026#34;, \u0026#34;chassisType\u0026#34;, \u0026#34;operatingSystem\u0026#34;, \u0026#34;deviceType\u0026#34;, \u0026#34;complianceState\u0026#34;, \u0026#34;jailBroken\u0026#34;, \u0026#34;managementAgent\u0026#34;, \u0026#34;osVersion\u0026#34;, \u0026#34;easActivated\u0026#34;, \u0026#34;easDeviceId\u0026#34;, \u0026#34;easActivationDateTime\u0026#34;, \u0026#34;aadRegistered\u0026#34;, \u0026#34;azureADRegistered\u0026#34;, \u0026#34;deviceEnrollmentType\u0026#34;, \u0026#34;lostModeState\u0026#34;, \u0026#34;activationLockBypassCode\u0026#34;, \u0026#34;emailAddress\u0026#34;, \u0026#34;azureActiveDirectoryDeviceId\u0026#34;, \u0026#34;azureADDeviceId\u0026#34;, \u0026#34;deviceRegistrationState\u0026#34;, \u0026#34;deviceCategoryDisplayName\u0026#34;, \u0026#34;isSupervised\u0026#34;, \u0026#34;exchangeLastSuccessfulSyncDateTime\u0026#34;, \u0026#34;exchangeAccessState\u0026#34;, \u0026#34;exchangeAccessStateReason\u0026#34;, \u0026#34;remoteAssistanceSessionUrl\u0026#34;, \u0026#34;remoteAssistanceSessionErrorDetails\u0026#34;, \u0026#34;isEncrypted\u0026#34;, \u0026#34;userPrincipalName\u0026#34;, \u0026#34;model\u0026#34;, \u0026#34;manufacturer\u0026#34;, \u0026#34;imei\u0026#34;, \u0026#34;complianceGracePeriodExpirationDateTime\u0026#34;, \u0026#34;serialNumber\u0026#34;, \u0026#34;phoneNumber\u0026#34;, \u0026#34;androidSecurityPatchLevel\u0026#34;, \u0026#34;userDisplayName\u0026#34;, \u0026#34;configurationManagerClientEnabledFeatures\u0026#34;, \u0026#34;wiFiMacAddress\u0026#34;, \u0026#34;deviceHealthAttestationState\u0026#34;, \u0026#34;subscriberCarrier\u0026#34;, \u0026#34;meid\u0026#34;, \u0026#34;totalStorageSpaceInBytes\u0026#34;, \u0026#34;freeStorageSpaceInBytes\u0026#34;, \u0026#34;managedDeviceName\u0026#34;, \u0026#34;partnerReportedThreatState\u0026#34;, \u0026#34;retireAfterDateTime\u0026#34;, \u0026#34;preferMdmOverGroupPolicyAppliedDateTime\u0026#34;, \u0026#34;autopilotEnrolled\u0026#34;, \u0026#34;requireUserEnrollmentApproval\u0026#34;, \u0026#34;managementCertificateExpirationDate\u0026#34;, \u0026#34;iccid\u0026#34;, \u0026#34;udid\u0026#34;, \u0026#34;roleScopeTagIds\u0026#34;, \u0026#34;windowsActiveMalwareCount\u0026#34;, \u0026#34;windowsRemediatedMalwareCount\u0026#34;, \u0026#34;notes\u0026#34;, \u0026#34;configurationManagerClientHealthState\u0026#34;, \u0026#34;configurationManagerClientInformation\u0026#34;, \u0026#34;ethernetMacAddress\u0026#34;, \u0026#34;physicalMemoryInBytes\u0026#34;, \u0026#34;processorArchitecture\u0026#34;, \u0026#34;specificationVersion\u0026#34;, \u0026#34;joinType\u0026#34;, \u0026#34;skuFamily\u0026#34;, \u0026#34;skuNumber\u0026#34;, \u0026#34;managementFeatures\u0026#34;, \u0026#34;enrollmentProfileName\u0026#34;, \u0026#34;bootstrapTokenEscrowed\u0026#34;, \u0026#34;deviceFirmwareConfigurationInterfaceManaged\u0026#34;, \u0026#34;hardwareInformation\u0026#34;, \u0026#34;deviceActionResults\u0026#34;, \u0026#34;usersLoggedOn\u0026#34;, \u0026#34;chromeOSDeviceInfo\u0026#34;}), #\u0026#34;Expanded hardwareInformation\u0026#34; = Table.ExpandRecordColumn(#\u0026#34;Expanded Column1\u0026#34;, \u0026#34;hardwareInformation\u0026#34;, {\u0026#34;serialNumber\u0026#34;, \u0026#34;totalStorageSpace\u0026#34;, \u0026#34;freeStorageSpace\u0026#34;, \u0026#34;imei\u0026#34;, \u0026#34;meid\u0026#34;, \u0026#34;manufacturer\u0026#34;, \u0026#34;model\u0026#34;, \u0026#34;phoneNumber\u0026#34;, \u0026#34;subscriberCarrier\u0026#34;, \u0026#34;cellularTechnology\u0026#34;, \u0026#34;wifiMac\u0026#34;, \u0026#34;operatingSystemLanguage\u0026#34;, \u0026#34;isSupervised\u0026#34;, \u0026#34;isEncrypted\u0026#34;, \u0026#34;batterySerialNumber\u0026#34;, \u0026#34;batteryHealthPercentage\u0026#34;, \u0026#34;batteryChargeCycles\u0026#34;, \u0026#34;isSharedDevice\u0026#34;, \u0026#34;tpmSpecificationVersion\u0026#34;, \u0026#34;operatingSystemEdition\u0026#34;, \u0026#34;deviceFullQualifiedDomainName\u0026#34;, \u0026#34;deviceGuardVirtualizationBasedSecurityHardwareRequirementState\u0026#34;, \u0026#34;deviceGuardVirtualizationBasedSecurityState\u0026#34;, \u0026#34;deviceGuardLocalSystemAuthorityCredentialGuardState\u0026#34;, \u0026#34;osBuildNumber\u0026#34;, \u0026#34;operatingSystemProductType\u0026#34;, \u0026#34;ipAddressV4\u0026#34;, \u0026#34;subnetAddress\u0026#34;, \u0026#34;esimIdentifier\u0026#34;, \u0026#34;systemManagementBIOSVersion\u0026#34;, \u0026#34;tpmManufacturer\u0026#34;, \u0026#34;tpmVersion\u0026#34;, \u0026#34;sharedDeviceCachedUsers\u0026#34;}, {\u0026#34;serialNumber.1\u0026#34;, \u0026#34;totalStorageSpace\u0026#34;, \u0026#34;freeStorageSpace\u0026#34;, \u0026#34;imei.1\u0026#34;, \u0026#34;meid.1\u0026#34;, \u0026#34;manufacturer.1\u0026#34;, \u0026#34;model.1\u0026#34;, \u0026#34;phoneNumber.1\u0026#34;, \u0026#34;subscriberCarrier.1\u0026#34;, \u0026#34;cellularTechnology\u0026#34;, \u0026#34;wifiMac\u0026#34;, \u0026#34;operatingSystemLanguage\u0026#34;, \u0026#34;isSupervised.1\u0026#34;, \u0026#34;isEncrypted.1\u0026#34;, \u0026#34;batterySerialNumber\u0026#34;, \u0026#34;batteryHealthPercentage\u0026#34;, \u0026#34;batteryChargeCycles\u0026#34;, \u0026#34;isSharedDevice\u0026#34;, \u0026#34;tpmSpecificationVersion\u0026#34;, \u0026#34;operatingSystemEdition\u0026#34;, \u0026#34;deviceFullQualifiedDomainName\u0026#34;, \u0026#34;deviceGuardVirtualizationBasedSecurityHardwareRequirementState\u0026#34;, \u0026#34;deviceGuardVirtualizationBasedSecurityState\u0026#34;, \u0026#34;deviceGuardLocalSystemAuthorityCredentialGuardState\u0026#34;, \u0026#34;osBuildNumber\u0026#34;, \u0026#34;operatingSystemProductType\u0026#34;, \u0026#34;ipAddressV4\u0026#34;, \u0026#34;subnetAddress\u0026#34;, \u0026#34;esimIdentifier\u0026#34;, \u0026#34;systemManagementBIOSVersion\u0026#34;, \u0026#34;tpmManufacturer\u0026#34;, \u0026#34;tpmVersion\u0026#34;, \u0026#34;sharedDeviceCachedUsers\u0026#34;}) in #\u0026#34;Expanded hardwareInformation\u0026#34; Query Structure Firstly I\u0026rsquo;ve called out the permissions needed. A good practice I like to follow. Then I\u0026rsquo;ve built out the properties for the Graph URL. This is made up of four elements Endpoint, Version, Resource and Query Parameters. Resulting in one final variable of GraphURL which contains all four put together. I then use the 3 PowerBI Variables we have TenantID, AppID and SecretID along with the Endpoint part of the GrpahURL to call the PowerBI function Get-BearerToken, and the return value is stored in the variable Bearer within the query code. Next we create the JSON body for the logic app call. This includes our two variables: GraphURL and Bearer. Then we pass the JSON Body to the URL for the Logic App stored in the variable MSGraphCall using Web.Contents. Next, we process the output. This includes converting the list of records to a table and then expanding each of the records inside the table.. and BOOM! we have our data in PowerBI! OData.Feed using a Bearer Token Info\nThere is no cost implication for using OData.Feed.\nIn this query we are going to leverage OData.Feed v4 Power Query to call the Graph API. The OData.Feed support pagination, so the feeds itself will will process the call and then pass the data back to PowerBI (no Logic Apps!) so we can transform the data in order to form a report.\nFirst we set up our GraphURL, as we have done with other queries building it with the four elements. Then we call the Get-BearerToken function to get a token for authorisation. Finally we use the OData.Feed (with the bearer token) to authenticate and pull in our results.\nI tend to find, whilst OData.Feeds are OK, I have found them to be a bit hit and miss. Most of the time, 95% I would say, you\u0026rsquo;ll be fine. However I have noticed that the OData.Feed doesn\u0026rsquo;t always support everything you could need, sometimes you get errors on columns straight away. Sometimes you get columns that you need to expand within PowerBI, you get excited about what you might get and then everything comes back as an error. But don\u0026rsquo;t let that put you off, this is a great way to handle pagination. Pre-Requisites You have created the Get-BearerToken function from this post . Power Query let // Application Registration Permissions needed to make this call : DeviceManagementManagedDevices.Read.All // Microsoft Graph URL Endpoint = \u0026#34;https://graph.microsoft.com/\u0026#34;, Version = \u0026#34;v1.0/\u0026#34;, Resource = \u0026#34;deviceManagement/managedDevices/\u0026#34;, QueryParams = \u0026#34;\u0026#34;, GraphURL = Endpoint \u0026amp; Version \u0026amp; Resource \u0026amp; QueryParams, // Get an Access Token to make Graph Calls (uses Application Registration) Bearer = #\u0026#34;Get-BearerToken\u0026#34; (TenantID, AppID, SecretID, Endpoint), // ODataFeed to process Graph Call // https://learn.microsoft.com/en-us/powerquery-m/odata-feed OData = OData.Feed ( GraphURL, [ Authorization = Bearer ], [ ExcludedFromCacheKey = {\u0026#34;Authorization\u0026#34;}, ODataVersion = 4, Implementation = \u0026#34;2.0\u0026#34;, OmitValues = ODataOmitValues.Nulls ] ) in OData Power Queries available from my Github Create the query In order to create the query, once you have all the pre-requisites done select Transform Data (1) from the ribbon, then right-click to create a new blank query (2 \u0026amp; 3). Access the Advanced Editor (4) and insert the Power Query code (5). Once saved, you will observe that this action not only generates the query and all of its associated steps but it should displays the dataset from the Microsoft Graph call. Explanation When using Logic Apps, data is processed within the logic app and fed back to PowerBi using Web.Contents Power Query. We can do this because the Logic app can return a JSON format we require, and it is using URLs (or rather, web contents). In our use case we pass parameters to the call to facilitate one method or the other. Don\u0026rsquo;t forget you can hard-configure these variables in the Logic app instead of passing them up from PowerBI There is a cost involved in using and calling logic apps, please investigate this and see if you are comfortable. OData.Feeds are free to use. From PowerBI\u0026rsquo;s perspective, its undertaking a weblink call and getting back results. Precisely what it would do if you pointed the console to a cloud hosted CSV, for example, or any other web URL. This means that from PowerBI\u0026rsquo;s perspective the call is direct to a web link and does not form part of a hand-authored query. Finally, data sanitisation may be required after you get the output. This can take the form of changing the title of columns, changing the type of data or replacing values in the columns. The more work you put into data sanitisation, the less stress you\u0026rsquo;ll put on the report as the data is santitised before the visuals are created. Relationships See part 8 for a relationship with autopilot devices once the query is added to your report.\nNext post Up next Applications .\nI appreciate you taking the time to read my blog.\nPlease give it a share for me. Jonathan "},{
  "section": "Articles",
  "slug": "/articles/bp-5-pbi-intune/",
  "title": "Intune and PowerBI Deep Dive - Part 5 - Heavy Lifting",
  "description": "Visit www.deploymentshare.com to find out more",
  "date": "February 5, 2024",
  "image": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n\n\n\n\n\n  \n\n  \n  \n    \n      \n    \n\n\n    \n    \n\n\n    \n    \n      \n      \n    \n    \n    \n\n\n    \n    \n      \n      \n        \n        \n        \n        \n        \n        \n\n\n        \n        \n\n\n        \u003cimg\n          \n            src=\"/images/title/pbi-intune_hu93e729ed80f60802b181437f64a553ee_407980_420x0_resize_q90_h2_lanczos.webp\" loading=\"lazy\" decoding=\"async\"\n          \n\n          alt=\"\"\n          class=\"  img\"\n          width=\"420\"\n          height=\"217\"\n          onerror=\"this.onerror='null';this.src='\\/images\\/title\\/pbi-intune_hu93e729ed80f60802b181437f64a553ee_407980_420x0_resize_q90_lanczos.jpg';\" /\u003e\n\n        \n      \n      \n    \n    \n  \n\n\n  \n",
  "imageSM": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n\n\n\n\n\n  \n\n  \n  \n    \n      \n    \n\n\n    \n    \n\n\n    \n    \n      \n      \n    \n    \n    \n\n\n    \n    \n      \n      \n        \n        \n        \n        \n        \n        \n          \n          \n          \n          \n        \n\n\n        \n        \n\n\n        \u003cimg\n          \n            src=\"/images/title/pbi-intune_hu93e729ed80f60802b181437f64a553ee_407980_100x100_fill_q90_h2_lanczos_smart1.webp\" loading=\"lazy\" decoding=\"async\"\n          \n\n          alt=\"\"\n          class=\"  img\"\n          width=\"100\"\n          height=\"100\"\n          onerror=\"this.onerror='null';this.src='\\/images\\/title\\/pbi-intune_hu93e729ed80f60802b181437f64a553ee_407980_100x100_fill_q90_lanczos_smart1.jpg';\" /\u003e\n\n        \n      \n      \n    \n    \n  \n\n\n  \n",
  "searchKeyword": "",
  "categories": "PowerBi, Intune, Microsoft Graph",
  "tags": "Microsoft, Intune, PowerBI, Microsoft Graph",
  "content":"In this post we\u0026rsquo;ll take a look at using Logic Apps and OData.Feed to do the \u0026lsquo;heavy lifting\u0026rsquo; for us. By heavy lifting, essentially this is handling pagination of the Microsoft Graph Call. Using the app registration permissions for authorisation to the data, then processing the result in order to make sure we have all the data we need and finally passing the results back to PowerBI so that its handled outside of PowerBI. PowerBI only cares about the data.\nQuick Links Series Menu Part 1 - Where to Start Part 2 - Application Registration Part 3 - Exploring Graph URLs Part 4 - Get-BearerToken Part 5 - Heavy Lifting Part 6 - Managed Devices Part 7 - Managed Applications Part 8 - Autopilot Devices Coming soon! - Connectors and Tokens There are three ways I\u0026rsquo;ve achieved this. The first method passes multiple properties to a Logic App. The Logic app uses these properties to authorise against the tenant and do the work. The second method uses the function we created in a previous post to obtain a Bearer token for access and passes this token instead, replacing the need to pass individual variables. The final method is similar to the second in that it also uses the bearer token for authorisation, however, instead of using a Logic App we use an OData.Feed power query. The third method shares similarities with the second in that they both utilise a Bearer token for authorization. OData.Feeds support pagination so this removed the output processing element of our queries where we must convert or translate the results from the Logic App. There is no right or wrong approach, I would suggest examining them all in the following post and deciding which one suite your needs best.\nMethod 1 - Logic Apps \u0026amp; Passing variables Previously we gathered the TenantID, the AppID and the SecretID after creating an application registration in Entra. Those details were stored into variables inside PowerBI, so we can call them using a Power Query. Lets first dive into the Logic App and start configuring it to recieve these properties. Luckily this is quite simple. Just three steps. A hat tip to Jan Baker who first wrote this up in 2020. Jan sets some parameters in the logic app instead of passing them in from PowerBI. Passing them in from PowerBI allows me to change them if I need to, on the fly with different environments however if you didnt want to pass them over, you could hard set them in your Logic app and omit the need to pass in variables using a JSON configuration.\nWhen you are passing details up to a Logic App it needs to be told what its receiving and what to to do with the data its passed.\nLets go ahead and configure this logic app to receive what it needs. We will need to consider five things:\nTenantID (Already in a variable) AppID (Already in a variable) SecretID (Already in a variable) Audience, in our case this is going to be https://graph.microsoft.com/ , we will pass this in from our Power Query. This is taken from the Endpoint variable, one of the four elements used to Build the full GraphURL. and finally our fully built Microsoft Graph URL, knows as GraphURL (this is a combination of Endpoint, Version, Resource and Query Parameters) Our logic app contains just three steps:\nWhen a HTTP request is received A standard HTTP step (this is the step we authorise with and the step that will handles pagination) A response step to pass the data back. Tip\nTake the HTTP POST URL from step 1 and store it in a PowerBI variable called MSGraphCall-NoBearer This exact name will be used in my example queries for this method in subsequent posts.\nOn the first step of the Logic App, we must configure it to receive the five variables we specified above. We do this by configuring a JSON with five properties. Those properties are all string properties and we\u0026rsquo;re going to pass in the string variables we have created in PowerBI.\nThe JSON Request body in the image above looks like this, when expanded:\n{ \u0026#34;properties\u0026#34;: { \u0026#34;AppID\u0026#34;: { \u0026#34;type\u0026#34;: \u0026#34;string\u0026#34; }, \u0026#34;Audience\u0026#34;: { \u0026#34;type\u0026#34;: \u0026#34;string\u0026#34; }, \u0026#34;GraphUrl\u0026#34;: { \u0026#34;type\u0026#34;: \u0026#34;string\u0026#34; }, \u0026#34;SecretID\u0026#34;: { \u0026#34;type\u0026#34;: \u0026#34;string\u0026#34; }, \u0026#34;TenantID\u0026#34;: { \u0026#34;type\u0026#34;: \u0026#34;string\u0026#34; } }, \u0026#34;type\u0026#34;: \u0026#34;object\u0026#34; } Breaking this down we have a AppID (String), Audience (String) remember this is going to be the Endpoint section of the Graph URL (see part 3 ) so we\u0026rsquo;ll already have this in a variable as we build out our Power Query, the GraphURL itself (String) made up of the Endpoint, Version, Resource and Query Parameters, the SecretID (String, see Part 2 ) and finally the TenantID (String).\nSo whats this look like in Power Query passed in from PowerBI? In the Logic App section of the query below example, the name of the property is on the left and the value in on the right. It is expected that we will set the \u0026ldquo;Audience\u0026rdquo; and \u0026ldquo;GraphUrl\u0026rdquo; on each query, and the remaining three are PowerBI variables, so global and can be called in any query.\n// Microsoft Graph URL Endpoint = \u0026#34;https://graph.microsoft.com/\u0026#34;, Version = \u0026#34;beta/\u0026#34;, Resource = \u0026#34;deviceManagement/managedDevices/\u0026#34;, QueryParams = \u0026#34;\u0026#34;, GraphURL = Endpoint \u0026amp; Version \u0026amp; Resource \u0026amp; QueryParams, // Logic App to handle pagination LABody = \u0026#34;{ \u0026#34;\u0026#34;GraphUrl\u0026#34;\u0026#34;:\u0026#34;\u0026#34;\u0026#34; \u0026amp; GraphURL \u0026amp; \u0026#34;\u0026#34;\u0026#34;, \u0026#34;\u0026#34;TenantID\u0026#34;\u0026#34;:\u0026#34;\u0026#34;\u0026#34; \u0026amp; TenantID \u0026amp; \u0026#34;\u0026#34;\u0026#34;, \u0026#34;\u0026#34;AppID\u0026#34;\u0026#34;:\u0026#34;\u0026#34;\u0026#34; \u0026amp; AppID \u0026amp; \u0026#34;\u0026#34;\u0026#34;, \u0026#34;\u0026#34;SecretID\u0026#34;\u0026#34;:\u0026#34;\u0026#34;\u0026#34; \u0026amp; SecretID \u0026amp; \u0026#34;\u0026#34;\u0026#34;, \u0026#34;\u0026#34;Audience\u0026#34;\u0026#34;:\u0026#34;\u0026#34;\u0026#34; \u0026amp; Endpoint \u0026amp; \u0026#34;\u0026#34;\u0026#34; }\u0026#34;, If you notice we\u0026rsquo;ve escaped the \u0026quot; character so the format is correct. When checking this in the PowerBI steps we can see its formatted right. The Property name in speech marks, followed by a colon and then the property value in speech marks. Precisely what is expected to be passed.\nWe must then pass this JSON body to the Logic App using Web.Contents, we will take the value of this output as our result\nLogicApp = Json.Document(Web.Contents(#\u0026#34;MSGraphCall-NoBearer\u0026#34;, [Headers=[#\u0026#34;Content-Type\u0026#34;=\u0026#34;application/json\u0026#34;],Content = Text.ToBinary(LABody)])), Value = LogicApp[value], Notice we call the URL stored in our variable MSGraphCall-NoBearer and pass in the Logic App JSON Body (LABody). Clever stuff, right?\nThe second step in the logic app takes the input parameters from step one to configure the step in order to authenticate with your tenant and retrieve the data. Remember, this access is granted by the permissions set on the app registration created in step 2 We must also set the pagination on the settings of the step\nWarning\nThe pagination threshold for your HTTP step can be set to maximum of 100,000, meaning that the step can handle a maximum of 100,000 results in a single execution. If the results exceeds this limit, you need to implement a further mechanism for pagination, breaking down the results into smaller chunks or pages, and making multiple requests to handle the entire dataset. I haven\u0026rsquo;t encountered a need for this yet, as 100,000 is likely going to cover the majority of cases.\nAnd finally the body of the step is passed back.\nMethod 2 - Logic Apps \u0026amp; Passing a Bearer Token This method requires us to use PowerBI to request the bearer token using the function created in part 4 and only pass that to the Logic App along with the Graph URL you want to call. I have noticed that the SecretID passed is masked by default in the logic app however, if you feel more comfortable passing a bearer token up to Entra rather than all those variables, this is the method for you.\nSo following the same logic as above, lets take a look at the same three steps, edited to process the same data but this time with a bearer token.\nAgain lets configure this logic app to receive what it needs. This time, only two strings needed:\nGraphUrl (Already in a variable) Bearer (Already in a variable) In the first step, we must configure the JSON Body.\nThe JSON Request body looks like this:\n{ \u0026#34;properties\u0026#34;: { \u0026#34;GraphUrl\u0026#34;: { \u0026#34;type\u0026#34;: \u0026#34;string\u0026#34; }, \u0026#34;Bearer\u0026#34;: { \u0026#34;type\u0026#34;: \u0026#34;string\u0026#34; } }, \u0026#34;type\u0026#34;: \u0026#34;object\u0026#34; } Tip\nTake the HTTP POST URL from step 1 and store it in a PowerBI variable called MSGraphCall. This exact name will be used in my example queries for this method in subsequent posts.\nThis will take a similar, but shorter form in Power Query.. like so:\n// Microsoft Graph URL Endpoint = \u0026#34;https://graph.microsoft.com/\u0026#34;, Version = \u0026#34;beta/\u0026#34;, Resource = \u0026#34;deviceManagement/managedDevices/\u0026#34;, QueryParams = \u0026#34;\u0026#34;, GraphURL = Endpoint \u0026amp; Version \u0026amp; Resource \u0026amp; QueryParams, // Get Bearer Token Using Function Bearer = #\u0026#34;Get-BearerToken\u0026#34; (TenantID, AppID, SecretID, Endpoint), // Logic App to handle pagination LABody = \u0026#34;{ \u0026#34;\u0026#34;GraphUrl\u0026#34;\u0026#34;:\u0026#34;\u0026#34;\u0026#34; \u0026amp; GraphURL \u0026amp; \u0026#34;\u0026#34;\u0026#34;, \u0026#34;\u0026#34;Bearer\u0026#34;\u0026#34;:\u0026#34;\u0026#34;\u0026#34; \u0026amp; Bearer \u0026amp; \u0026#34;\u0026#34;\u0026#34; }\u0026#34;, In this method, we call the Get-BearerToken function in PowerQuery first, passing in four parameters (Endpoint is set to \u0026ldquo;https://graph.microsoft.com/\" ) then we take our fully build Microsoft Graph URL and our Bearer Token and pass these to the logic app using Web.Contents\nLogicApp = Json.Document(Web.Contents(#\u0026#34;MSGraphCall\u0026#34;, [Headers=[#\u0026#34;Content-Type\u0026#34;=\u0026#34;application/json\u0026#34;],Content = Text.ToBinary(LABody)])), Value = LogicApp[value], The second step of the logic app we must configure like this:\nAnd like the example above, we pass back the results\nLogic App Benchmarking I have conducted performance benchmarks on these Logic app, gathering data from environments containing upwards of 2-3000 clients. The Logic app consistently achieves execution times of just a few seconds. Even in scenarios with larger datasets, such as 4000-5000 clients, the execution times remain rapid. This efficiency is primarily attributed to both using list calls from Graph, which retrieve the majority of relevant information efficiently and the simplicity of the logic app. While individual calls may potentially yield slightly more data, in my experience, this approach is generally unnecessary. List calls have consistently provided all necessary data. When leveraging proper table relationships and ensuring standardised queries and datasets, the scalability of generating reports significantly improves. Below are some performance results for various Graph calls across different environments.\nNo Bearer Token Bearer Token Benchmarking results for illustration only.\nMethod 3 - OData.Feeds \u0026amp; Passing a Bearer Token This method requires us to use PowerBI to request the bearer token using the function created in part 4 and pass this to an OData.Feed Power Query. Remember, OData.Feed supports pagination so all you need to do is pass whats required and the rest is handled for you. OData.Feeds are free to use. This might be important to you if you do not wish to incur the costs of a Logic App. They are not without issues though. Most recently (Jan -2024) Microsoft changed things with the Beta version output for the Graph Resource deviceManagement/managedDevices/ resulting in the following error.\nBecause the feed is broken from the off - those of you new to this, wont get any results from a blank call. This means you wont be able to tell which columns you want to keep or exclude using something like a filter. Instead, I flipped to v1.0 of Microsoft Graph because the results still work, this could help with column selection for a filter. I will be raising this with Microsoft and dropping back in here if anything changes.\nWith OData.Feed, there is no Logic App to throw anything out to, so this is all done inside Power Query. See the below structure I used to get my results. Be aware that the default timeout for an OData.Feed is 600 seconds, or 10 Minutes.\n// Microsoft Graph URL Endpoint = \u0026#34;https://graph.microsoft.com/\u0026#34;, Version = \u0026#34;v1.0/\u0026#34;, Resource = \u0026#34;deviceManagement/managedDevices/\u0026#34;, QueryParams = \u0026#34;\u0026#34;, GraphURL = Endpoint \u0026amp; Version \u0026amp; Resource \u0026amp; QueryParams, // Get an Access Token to make Graph Calls (uses Application Registration) Bearer = #\u0026#34;Get-BearerToken\u0026#34; (TenantID, AppID, SecretID, Endpoint), // ODataFeed to process Graph Call // https://learn.microsoft.com/en-us/powerquery-m/odata-feed OData = OData.Feed ( GraphURL, [ Authorization = Bearer ], [ ExcludedFromCacheKey = {\u0026#34;Authorization\u0026#34;}, ODataVersion = 4, Implementation = \u0026#34;2.0\u0026#34;, OmitValues = ODataOmitValues.Nulls ] ), Section 1 - We build the GraphURL variable Section 2 - We use the Get-BearerToken function to get a Bearer token and store it in the Bearer variable Section 3 - We use OData.Feed, Pass in the GraphURL alongside passing the Bearer in for Authorisation. The results pass back our table, no need to process the output so we can delve straight into formatting the table data, one way or another.\nConclusion If you chose Logic Apps, your choice of method will dictate the approach for creating queries in PowerBI. Consider the following :\nAre you dealing with a dataset exceeding 100,000 devices, users, or groups? If so, consider the limitation of 100,00 records and consider that you are going to need to do further work on the logic app. Ensure you have the URL from the Logic App step \u0026ldquo;When a HTTP request is received\u0026rdquo; (Step 1) so you can invoke the Logic App using this. Consider the cost involved. If you chose to use OData.Feed, familiarise yourselves with the proprties available to you and keep an eye on performance. You may have to add further properties to cope with your environment.\nDo not concern yourself with the fulll PowerBI Query just yet. This post focuses on deciding on your chosen method. Subsequent posts will delve into all three methods further, ensuring comprehensive coverage and support throughout the setup process and providing queries you can use. I will store the queries on my Github page and once I have enough queries we\u0026rsquo;ll look to formaing a report template together for the series.\nHow subsequent posts will be formed In the next few blog posts I\u0026rsquo;m going to share with you some queries that you can steal with pride. I will typically break down each subsequent post as follows:\nThe Graph URL Global Pre-Requisites (Must be done regardless of method) Under your chosen tab Pre-Requisites (for your chosen method) Power Query - The full query code (including a Github download link) Creating the Query (How to place this into PowerBI) Explanation Relationships (to other tables - these sections will be updated as the series goes on) Navigate the tabs on each post and then continue reading down the page, like this. Your tab choice will be forgotten if you refresh the page make sure you\u0026rsquo;re reading the correct method.\nThis series is intended to bring you along for a journey and give you a good working knowledge of how to achieve visualising your Intune data. With that said, the subsequent posts can be used individually as I intend to work through a few Microsoft Graph resources, some of which may not be important to you or your business when you build out your own reports.\nIn the Part 6 I will demonstrate how to form your Power Queries using the three methods, allowing you to choose the one that best suits your needs and circumstances. These queries will be hosted on my Github for you to go and use yourself. Work through the posts one by one and we should have a good data set built by the end of the series.\nI appreciate you taking the time to read my blog.\nPlease give it a share for me. Jonathan Links and References Location Link Microsoft Learn Azure Logic Apps Documentation Microsoft Learn Receive and respond to inbound HTTPS calls to workflows in Azure Logic Apps Microsoft Learn OData.Feeds for Power Query Microsoft Learn Web.Contents for Power Query Microsoft Learn Using Parameters in PowerBI janbakker.tech Use Graph API data in PowerBI using Logic Apps EUC365 Select and Filter ODataFeeds "},{
  "section": "Articles",
  "slug": "/articles/bp-4-pbi-intune/",
  "title": "Intune and PowerBI Deep Dive - Part 4 - Get-BearerToken",
  "description": "Visit www.deploymentshare.com to find out more",
  "date": "January 25, 2024",
  "image": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n\n\n\n\n\n  \n\n  \n  \n    \n      \n    \n\n\n    \n    \n\n\n    \n    \n      \n      \n    \n    \n    \n\n\n    \n    \n      \n      \n        \n        \n        \n        \n        \n        \n\n\n        \n        \n\n\n        \u003cimg\n          \n            src=\"/images/title/pbi-intune_hu93e729ed80f60802b181437f64a553ee_407980_420x0_resize_q90_h2_lanczos.webp\" loading=\"lazy\" decoding=\"async\"\n          \n\n          alt=\"\"\n          class=\"  img\"\n          width=\"420\"\n          height=\"217\"\n          onerror=\"this.onerror='null';this.src='\\/images\\/title\\/pbi-intune_hu93e729ed80f60802b181437f64a553ee_407980_420x0_resize_q90_lanczos.jpg';\" /\u003e\n\n        \n      \n      \n    \n    \n  \n\n\n  \n",
  "imageSM": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n\n\n\n\n\n  \n\n  \n  \n    \n      \n    \n\n\n    \n    \n\n\n    \n    \n      \n      \n    \n    \n    \n\n\n    \n    \n      \n      \n        \n        \n        \n        \n        \n        \n          \n          \n          \n          \n        \n\n\n        \n        \n\n\n        \u003cimg\n          \n            src=\"/images/title/pbi-intune_hu93e729ed80f60802b181437f64a553ee_407980_100x100_fill_q90_h2_lanczos_smart1.webp\" loading=\"lazy\" decoding=\"async\"\n          \n\n          alt=\"\"\n          class=\"  img\"\n          width=\"100\"\n          height=\"100\"\n          onerror=\"this.onerror='null';this.src='\\/images\\/title\\/pbi-intune_hu93e729ed80f60802b181437f64a553ee_407980_100x100_fill_q90_lanczos_smart1.jpg';\" /\u003e\n\n        \n      \n      \n    \n    \n  \n\n\n  \n",
  "searchKeyword": "",
  "categories": "PowerBi, Intune, Microsoft Graph",
  "tags": "Microsoft, Intune, PowerBI, Microsoft Graph",
  "content":"In the previous posts, we talked about obtaining an access token (bearer token) to access the data in our environments. We even looked at using our first POST query to post a request for a token in PostMan. The reason I\u0026rsquo;ve called this post \u0026lsquo;Get-BearerToken\u0026rsquo; is because I\u0026rsquo;m going to explain how to use a combination of PowerBI Variables and a function to leverage the Application Registration we have to get a bearer token within PowerBI Desktop. We can then use that bearer token to authenticate against the Microsoft Graph and start to pull data into PowerBI like we did in the PostMan application.. If you didn\u0026rsquo;t know, a Graph response will provide a maximum of 1000 replies and the rest of the replies will be split into chunks, known as pages. So page 1 contains responses 1-1000, page 2 1001-2000 and so on and so forth. If we don\u0026rsquo;t put this response into some sort of loop, to get extra responses we will only ever see part of our data. This is known as pagination . it is a consideration for the next few posts.\nQuick Links Series Menu Part 1 - Where to Start Part 2 - Application Registration Part 3 - Exploring Graph URLs Part 4 - Get-BearerToken Part 5 - Heavy Lifting Part 6 - Managed Devices Part 7 - Managed Applications Part 8 - Autopilot Devices Coming soon! - Connectors and Tokens Concept Here is my a visualisation of where we are so far in this journey\nWe have three discovery tools at hand to collect data from Intune for our PowerBI report. Microsoft Graph Explorer is our first port of call to get used to the way things are formatted, get used to adding permissions, and formulating a query. Graph Xray lets us see what graph urls are needed to see the same data in the Intune console as we browse around, it gives us a great starting block for building up what we want to put into our PowerBI report. And finally Postman, a API tool that we set up to use on our environment, giving us the ability to quickly prod the Graph, test calls and see the data after we move on from Graph Explorer. Remember that Postman will leverage the Application Registration we have in Azure (which inturn uses the Graph) to go get data so isn\u0026rsquo;t tied to a user. This is what we want to use. Our application Registration sits in Azure and acts as the go-between communicating with the Microsoft Graph on our behalf as long as we provide the key authentication elements needed. These are the TenantID, AppID, SecretID. We can use these to get an access token to give us access to the data. What we want to do now is get PowerBI to use the App Registration to do the same things\nSo lets give that a go!\nFirstly lets create 3 variables in PowerBI Desktop. Open PowerBI desktop, and select to Transform Data. From this window, right click and select New Parameter. Create the following three:\nTenantID (Text) AppID (Text) SecretID (Text) You should have these values from creating your app registration in Part 2 .\nThis way we can change the variables if we need to and also reference them in our queries.\nCreate a new Group called Parameters and place the three parameters within it.\nNext lets create a blank query in PowerBI, then go into advanced editor and paste in the following code (Notice this code references the variables which must be created and populated to work)\nlet Source = (TenantID as text, AppID as text, SecretID as text, Resource as text) =\u0026gt; let // Get an Access Token to make Graph Calls (uses Application Registration) ClientId = Text.Combine({\u0026#34;client_id\u0026#34;,AppID}, \u0026#34;=\u0026#34;), ClientSecret = Text.Combine({\u0026#34;client_secret\u0026#34;, Uri.EscapeDataString(SecretID)}, \u0026#34;=\u0026#34;), GrantType = Text.Combine({\u0026#34;grant_type\u0026#34;, \u0026#34;client_credentials\u0026#34;}, \u0026#34;=\u0026#34;), Resource = Text.Combine({\u0026#34;resource\u0026#34;, Resource}, \u0026#34;=\u0026#34;), Body = Text.Combine({Resource, ClientId, ClientSecret, GrantType}, \u0026#34;\u0026amp;\u0026#34;), AuthResponse = Json.Document(Web.Contents( \u0026#34;https://login.microsoftonline.com/\u0026#34;, [ RelativePath = Text.Combine({TenantID,\u0026#34;/oauth2/token\u0026#34;}), Content=Text.ToBinary(Body) ] )), AccessToken= AuthResponse[access_token], Bearer = Text.Combine({\u0026#34;Bearer\u0026#34;, AccessToken}, \u0026#34; \u0026#34;) in Bearer in Source Save the query. Create a new Group called Functions and place the Function within it. Rename the function to Get-BearerToken, you may notice the icon next to the query is fx like this\u0026hellip; \u0026hellip;representing a function rather than a query and in order to call this function you must specify the 4 parameters of:\nTenantID AppID Secret Resource (this represents what you want to authenticate against) Now we\u0026rsquo;ll need to build a query to call this function and return a bearer token for us to use for a graph call. Lets create a new query and place the following code at the top of it\nlet // Microsoft Graph URL Resource = \u0026#34;https://graph.microsoft.com/\u0026#34;, // Get an Access Token to make Graph Calls (uses Application Registration) Bearer = #\u0026#34;Get-BearerToken\u0026#34; (TenantID, AppID, SecretID, Resource) in Bearer The above query, uses the resource of https://graph.microsoft.com/ when attempting to get a bearer token. The attempt uses the function and, as you will see, it does indeed return a bearer token.\nEXCELLENT! Now we have code to call for a token, the token is what we need to authenticate against the Graph and bring into PowerBI data from Intune (or any other resource).\nNow, in the Part 5 we\u0026rsquo;ll examine using Logic Apps along side this token to get some data and return it back to the PowerBI desktop app.\nI appreciate you taking the time to read my blog.\nPlease give it a share for me. Jonathan Links and References Location Link Microsoft Learn Paging Microsoft Graph data in your app Microsoft Learn Using Custom Functions "},{
  "section": "Articles",
  "slug": "/articles/bp-3-pbi-intune/",
  "title": "Intune and PowerBI Deep Dive - Part 3 - Exploring Graph URLs",
  "description": "Visit www.deploymentshare.com to find out more",
  "date": "January 20, 2024",
  "image": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n\n\n\n\n\n  \n\n  \n  \n    \n      \n    \n\n\n    \n    \n\n\n    \n    \n      \n      \n    \n    \n    \n\n\n    \n    \n      \n      \n        \n        \n        \n        \n        \n        \n\n\n        \n        \n\n\n        \u003cimg\n          \n            src=\"/images/title/pbi-intune_hu93e729ed80f60802b181437f64a553ee_407980_420x0_resize_q90_h2_lanczos.webp\" loading=\"lazy\" decoding=\"async\"\n          \n\n          alt=\"\"\n          class=\"  img\"\n          width=\"420\"\n          height=\"217\"\n          onerror=\"this.onerror='null';this.src='\\/images\\/title\\/pbi-intune_hu93e729ed80f60802b181437f64a553ee_407980_420x0_resize_q90_lanczos.jpg';\" /\u003e\n\n        \n      \n      \n    \n    \n  \n\n\n  \n",
  "imageSM": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n\n\n\n\n\n  \n\n  \n  \n    \n      \n    \n\n\n    \n    \n\n\n    \n    \n      \n      \n    \n    \n    \n\n\n    \n    \n      \n      \n        \n        \n        \n        \n        \n        \n          \n          \n          \n          \n        \n\n\n        \n        \n\n\n        \u003cimg\n          \n            src=\"/images/title/pbi-intune_hu93e729ed80f60802b181437f64a553ee_407980_100x100_fill_q90_h2_lanczos_smart1.webp\" loading=\"lazy\" decoding=\"async\"\n          \n\n          alt=\"\"\n          class=\"  img\"\n          width=\"100\"\n          height=\"100\"\n          onerror=\"this.onerror='null';this.src='\\/images\\/title\\/pbi-intune_hu93e729ed80f60802b181437f64a553ee_407980_100x100_fill_q90_lanczos_smart1.jpg';\" /\u003e\n\n        \n      \n      \n    \n    \n  \n\n\n  \n",
  "searchKeyword": "",
  "categories": "PowerBi, Intune, Microsoft Graph",
  "tags": "Microsoft, Intune, PowerBI, Microsoft Graph",
  "content":"Next up, we\u0026rsquo;re going to explore the Graph and the URLs and permissions, in this post, continuing on from Part 1 and Part 2 , our next step is begin to firstly understand our path to getting Intune Data into PowerBI, which is going to be via direct Microsoft Graph calls - Remembering of course that the Intune Data warehouse did not meet our requirements. We are also going to leverage an application registration to access the data we want to see. This is gonna be a BIG post, so make sure you have plenty of time to read.\nQuick Links Series Menu Part 1 - Where to Start Part 2 - Application Registration Part 3 - Exploring Graph URLs Part 4 - Get-BearerToken Part 5 - Heavy Lifting Part 6 - Managed Devices Part 7 - Managed Applications Part 8 - Autopilot Devices Coming soon! - Connectors and Tokens We\u0026rsquo;re going to explore the Microsoft Graph URLs, the structure of them, how to obtain what we need and some tools to test them to ensure we\u0026rsquo;ve got them correct.\nLets start with Graph versions. As you may or may not know, the graph is broken up into two versions.\nBeta v1.0 For arguments sake you can think of these as Test (beta) and Production (v1.0) versions. In test, we have new additions, the urls may work perfectly but there may be limited documentation, or, they may have bugs that are not ironed out yet. I have lost an hour of my life trying to use a Graph URL from Beta, copied and pasted the url from the documentation and it didn\u0026rsquo;t work. After the hour, I discovered that changing one upper case \u0026ldquo;D\u0026rdquo; in the Graph URL to a lower case \u0026ldquo;d\u0026rdquo; made it work. This is the sort of crap you may have to deal with using Beta URLs. Dont let that put you off though, you\u0026rsquo;ll likely use Beta more that v1.0 to be honest but during your testing and building up of your own PowerBI queries, you might find you get the same results using v1.0 and if you do, use that where you can.\nMicrosoft Graph Explorer OK, this is your first port of call if you\u0026rsquo;re new to Graph. Authenticate to this tool using your user account. Below I will orientate you through the console.\nThis is where you sign in. Once signed in, your account wil be used to generate an access (Bearer) token that is used to authenticate againstMicrosoft Graph with, it can be seen here. This is the type of API call you are throwing to the Graph (GET, POST, PATCH, DELETE etc). This selects the version of the Graph you are going to use (v1.0 or Beta). This is the Graph URL you are going to pass. The Run Query button to execute the call. The results of the call will be shown here. There are some sample queries you can play around with to save you searching for your own until you become familiar with how to find out your own. These are the resources that are used withing the Graph call. How are the Graph Calls Structured? A graph call is made up of a few components, the endpoint, the version, the resource and the query parameters. Like so: Endpoint/Version/resource/queryparameters\u0026hellip;\nLets break this down for you:\nUsing this url as the example : https://graph.microsoft.com /v1.0/users?$select=displayName,id https://graph.microsoft.com - This is the Endpoint /v1.0 - This is the Version /users - This is the Resource ?$select=displayName,id - These are the query parameters odata query parameters From the documentation for this Graph Call , here are the permissions it needs;\n\u0026hellip; now we\u0026rsquo;re not using application permissions here because the Graph explorer is authenticated against you, the user\u0026hellip; but for the purposes of our PowerBI report we will be taking note of the application permissions, so you can see here this particular graph call requires User.Read.All permissions as a minimum for application permissions. The read permissions are normally sufficient for reading the data (or performing a GET API Call) should you wish to perform other tasks, such as PATCH (updating) POST (Usually Creating something) or DELETE (Self-explanatory) you may need higher permissions, such as *.ReadWrite.All.\nLets see what happens when we put this into Graph Explorer Using the Graph URL from above\u0026hellip;.https://graph.microsoft.com /v1.0/users?$select=displayName,id.. when I run that in Graph Explorer I get back the following message (this will show in section (7) from the image above):\n\u0026hellip;If I then click on Modify Permissions\u0026hellip; I can see that I am able to Grant User.Read.All, so I\u0026rsquo;m going to go ahead and select to Consent for that. Like so..\nOnce done I see a success message If I then click on Run Query now that the permission has been granted I will now see results in my results pane! Info\nBy now you should understand the four components of a Microsoft Graph URL. You should also understand how to obtain the correct permissions (Working on a lowest privilege best practice). At this point I would take a break, and go explore some graph calls and find the type of data you get back from those queries. Think about what you would like to see on a PowerBI report, what data is valuable to you, how that would be structured and which graph call can help. Next I\u0026rsquo;ll talk about Graph Xray, a tool to assist you.\nGraph Xray Next I want to show you Graph Xray . This Edge plug in will show you the graph calls required to get the information you\u0026rsquo;re looking at. So, once its installed and loaded, you can browse around the Intune console and see the graph calls you need. Thereafter you can decipher the resource required and start investigating the documentation for the call to build up the information you need to build your report.\nHonestly, this tool is great.\nInstall the plug in. Switch it on. On a website (such ad the Intune Console), press F12 to switch on Microsoft Edge Dev Tools. You may need to click on the \u0026raquo; arrows on the top menu to see Graph Xray. Once displayed, your friends are \u0026lsquo;Clear Session\u0026rsquo; before you click on something and then just look at the results. In the below example, I first cleared the session and then clicked on users within the Intune console. This lines up with what I see in Intune. Its a users resource with some query parameters to show the properties I see in the Intune console. I can, of course, remove the query parameters to show the full results, rather than using the \u0026lsquo;select\u0026rsquo; query to pick out certain fields too. If I was using this query to pull data into PowerBI, I would pull in the full query to get all the data, and I would be able to manipulate that data right in PowerBI desktop. It is safe to say though, that if you omit what you dont need, you\u0026rsquo;ll save processing time. From my own experience in the majority of small to medium sized businesses, this isnt worth worrying about. For large scale businesses, it absolutely is a consideration.\nThere is plenty of documentation surrounding Graph Xray, I\u0026rsquo;m not going to go into great detail here as there are other, more informative posts on the subject but I highly recommend you have this in your arsenal of Microsoft Graph tools. You can use this tool to explore around the Intune or Azure portal, for example, and collect up a list of Microsoft Graph resources and their relevant permissions so you can start to \u0026lsquo;story-board\u0026rsquo; or think about how you want to build up your PowerBI dashboard. Very very useful indeed.\nPostMan Finally in this blog post we are going to discuss PostMan . An API tool that will be very handy to you on your Microsoft Graph journey.\nPostman, can assist you in undertaking any API calls, not just the Microsoft Graph API, its a vast and complicated program far out of the scope of this blog post to explain, however I am going to show you how to set this up to work with the application registration you should have set up in Part 2 . From that post, you should have three key points of Information: The TenantID, the ClientID of the app registration, hereafter referred to as the AppID, and finally the SecretID which is the value portion of the secret you set up and is only valid for the period of time you configured when creating the secret.\nOK, do what you have to do to register for an account and download the program, this process changes from time to time so visit the website and see what the deal is. Once you have it installed locally on your device, lets set this up to use that Application registration. It works as a cloud app, so set up an account and things you configure will sync and follow you around if you install on another machine and log in, boom all your API work will be there waiting for you.\nEnvironments Postman has this concept of \u0026ldquo;environments\u0026rdquo; where you can set up some common parameters for the environment you wish to access. In our case we want to access the Microsoft Graph Environment of our Intune Tenant (in order to build a PowerBI report from the Data) and we\u0026rsquo;re going to do that via the app reg. So lets go ahead and set up an environment with those details. From the left hand side menu, click on Environments. Click New (you may be asked what you want to create, if asked select Environments). Give it a Name Configure three variables for the environment, TenantID, AppID and Secret ID, paste the known values into the \u0026ldquo;Intitial Value\u0026rdquo; field. The reason we set the initial value is because these values are synced to the Postman servers, so if you log into Postman on another device, you\u0026rsquo;ll have your variables all ready and waiting for you. Cool huh? Now you have you environment set up we can leverage these variable at any point so lets do that in the next step.\nCollections We\u0026rsquo;re going to create a Collection of Graph calls to use and group them, so, from the left hand menu follow this procedure:\nFrom the let hand side menu, click on Collections. Click New (you may be asked what you want to create, if asked select Collection). Give it a Name You can see your collection in this middle section, take note if you ever create new collections. I normally create a collection for each API I am accessing. Whether that be Weather Data, Covid Data, Football data or indeed , Microsoft Graph data. After its created, be sure to set your environment here. The first thing we are going to do is a POST call to login.microsoft.com, this is in order to obtain an access (bearer) token to authenticate against the graph with. The Token will come from the app registration, so whatever permissions the app registration has, thats the permissions the bearer token will have. Bear that in mind because with each new permission you add, you will need to POST for a token.\nIt requires a few things to be set up. From the collection you made, click on the \u0026ldquo;+\u0026rdquo; symbol to create a new API call. Set it up as follows:\nOpt for a POST, this is because we\u0026rsquo;re going to POST the request to get our bearer Token. Fill out the URL as specified here, notice the {{TenantID}} this is going to be populated by the TenantID specified in our Environment. Select Body. Select x-www-form-urlencoded. Fill out the Body properties exactly as they are on the Image. Notice where we are using properties specified from the environment, this allow us to create multiple environments, if we manage multiple Intune tenants. Save as Get-BearerToken which follows a PowerShell naming convention of verb-noun, but keeps it clean to look at. You can select your chosen environment here. When selected, this will POST an API call to the URL to obtain a bearer token from the selected environment (tenant). As long as you have your environment set, once you hit Send this should return you a bearer token.\nNotice the status of the call was 200 OK, so all good. Its a token type of Bearer. The token value. We\u0026rsquo;re going to use this bearer token to authenticate against other graph calls we call.\nIn order to do that we need to put some tests on the call and tell it to set a variable if a value exists.\nInfo\nLet me caveat the following by saying I am in no way a Java script guy and I would love some input on how I can improve this, but it works so I\u0026rsquo;m going to use it.\nOn your saved POST call, click on tests and paste the following code into the field;\npm.test(\u0026#34;Get Access Token\u0026#34;, function () { var json = JSON.parse(responseBody); postman.setEnvironmentVariable(\u0026#34;AppAccessToken\u0026#34;, json.access_token); pm.response.to.have.status(200) } ) Essentially what this does it sets a new value called AppAccessToken in your current environment. The token will be set until it expires and then you\u0026rsquo;ll need to post the call again to refresh it. If you do that (POST the call again) after saving the test you should see a Test Pass status in the Test Results.\nTip\nOnce you add new permissions on the app registration you must refresh the access token so that the new permissions are then applied to the token you are using.\nYou may notice this sets the current value rather than the initial value, we don\u0026rsquo;t really want the token syncing to the cloud so this is perfectly fine.\nLets use the /users resource from earlier in this post for our first GET call. So in our collection we set up a new call. I prefer to create a folder for each type of call I am making to separate them out.\nHere you can see the folders and how I\u0026rsquo;ve separated the calls out. Here you can see how I\u0026rsquo;ve structured the call. Here you can see the results, in this particular case it failed. So I added permissions and got results with a second call. I do like that PostMan gives you feedback in this manner just like the graph explorer. Makes troubleshooting much easier. Final Note Using Graph Exporer we can become familiar with the structure of graph calls and the concept of adding permissions. Using Graph Xray we can explore the consoles and extract the graph url for the data the console is visualising for us. Using Postman, you can build up a list of API calls of your own, see the results and troubleshoot permissions. You can examine the results to get an idea of the data you require for your PowerBI reports. Now we have a brilliant discovery toolset to poke around with Microsoft Graph and check results of the call in the response data and as we work through our journey pulling this into PowerBI I will prompt you to save the calls into Postman.\nNext up in Part 4 we will first look at creating a function to obtain a Bearer token. We need that token to pull in data from PowerBI using the Microsoft Graph, as that is our authentication method.\nI appreciate you taking the time to read my blog.\nPlease give it a share for me. Jonathan Links and References Location Link Microsoft Learn Microsoft Graph REST API beta endpoint reference Microsoft Learn Microsoft Graph REST API v1.0 endpoint reference Microsoft Graph Microsoft Graph Explorer Microsoft Learn OData : Query options overview Edge Add-Ons Graph X-Ray PostMan Postman App SCCMentor Paul Winstanley - Automating Windows 365 Part 2 – Using Graph XRay "},{
  "section": "Articles",
  "slug": "/articles/bp-2-pbi-intune/",
  "title": "Intune and PowerBI Deep Dive - Part 2 - Application Registration",
  "description": "Visit www.deploymentshare.com to find out more",
  "date": "January 13, 2024",
  "image": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n\n\n\n\n\n  \n\n  \n  \n    \n      \n    \n\n\n    \n    \n\n\n    \n    \n      \n      \n    \n    \n    \n\n\n    \n    \n      \n      \n        \n        \n        \n        \n        \n        \n\n\n        \n        \n\n\n        \u003cimg\n          \n            src=\"/images/title/pbi-intune_hu93e729ed80f60802b181437f64a553ee_407980_420x0_resize_q90_h2_lanczos.webp\" loading=\"lazy\" decoding=\"async\"\n          \n\n          alt=\"\"\n          class=\"  img\"\n          width=\"420\"\n          height=\"217\"\n          onerror=\"this.onerror='null';this.src='\\/images\\/title\\/pbi-intune_hu93e729ed80f60802b181437f64a553ee_407980_420x0_resize_q90_lanczos.jpg';\" /\u003e\n\n        \n      \n      \n    \n    \n  \n\n\n  \n",
  "imageSM": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n\n\n\n\n\n  \n\n  \n  \n    \n      \n    \n\n\n    \n    \n\n\n    \n    \n      \n      \n    \n    \n    \n\n\n    \n    \n      \n      \n        \n        \n        \n        \n        \n        \n          \n          \n          \n          \n        \n\n\n        \n        \n\n\n        \u003cimg\n          \n            src=\"/images/title/pbi-intune_hu93e729ed80f60802b181437f64a553ee_407980_100x100_fill_q90_h2_lanczos_smart1.webp\" loading=\"lazy\" decoding=\"async\"\n          \n\n          alt=\"\"\n          class=\"  img\"\n          width=\"100\"\n          height=\"100\"\n          onerror=\"this.onerror='null';this.src='\\/images\\/title\\/pbi-intune_hu93e729ed80f60802b181437f64a553ee_407980_100x100_fill_q90_lanczos_smart1.jpg';\" /\u003e\n\n        \n      \n      \n    \n    \n  \n\n\n  \n",
  "searchKeyword": "",
  "categories": "PowerBi, Intune, Microsoft Graph",
  "tags": "Microsoft, Intune, PowerBI, Microsoft Graph",
  "content":"Continuing from Part 1 , our next step is to establish an application registration in Azure. This registration will enable us to utilise its permissions for accessing data on the Microsoft Graph and hopefully then, importing that data into PowerBI. This setup is essential as it serves as a global prerequisite for accomplishing our ultimate objective.\nQuick Links Series Menu Part 1 - Where to Start Part 2 - Application Registration Part 3 - Exploring Graph URLs Part 4 - Get-BearerToken Part 5 - Heavy Lifting Part 6 - Managed Devices Part 7 - Managed Applications Part 8 - Autopilot Devices Coming soon! - Connectors and Tokens Creating the App Reg This is going to be a \u0026lsquo;whistle stop tour\u0026rsquo; of setting up an application registration. Consider this a condensed guide that will provide you with the necessary steps. As you progress and develop your PowerBI data sets, you can always revisit specific parts of this process to add additional permissions, granting you access to more data. It\u0026rsquo;s a flexible approach that allows you to expand your data resources as needed.\nIn the Azure Portal , search for Application Registrations Once opened opt to create a New registration (1) Give it a name. (2) Accept the default options for the rest of the properties. (3) Select to Register the app. Once the Application Registration is complete, on the Overview tab, (1) Record the TenantID. (2) Record the Application (Client) ID. \u0026hellip; you will need these later. Now lets go ahead and create a secret, go ahead and select Certificates \u0026amp; secrets Once there click on New Client Secret Give it a name and chose a length of validity. Once its create, you will need to take note of the Value which is the credential you will need to use to authenticate. You will need this along with the TenantID and AppID collected in step 4. Next you will need to add some permissions to the app reg so it is allowed to access some data. To do this click on API Permission on the left hand side You are adding Microsoft Graph Permissions And the type of permission you are adding is Application Permissions From the options pane you can either (1) Type the permission in the top or (2) Browse down the side to pick a permission When you have chosen a permission, you will notice this orage warning symbol that states that the permssion is not yet granted for your tenant Thereafter you will need someone with GA permissions to Grant admin consent (1) Granting Consent (2) You will then notice the Orange warning has turned to a nice green tick Tip\nI would suggest adding the following as a baseline (notice how they are all Read.All and not ReadWrite.All DeviceManagementManagedDevices.Read.All DeviceManagementApps.Read.All DeviceManagementServiceConfig.Read.All DeviceManagementConfiguration.Read.All Here you can see where the permissions are called out on the Graph documentation, as an example You can type that permission name in to the search box highlighted with a (1) on step 12 above.\nIn the next post I\u0026rsquo;m going to look at using Graph Explorer and Postman to test the API calls you need to make and to take a look at the results. Once you have a good understanding of the format and how to use the tools to speed things up, getting the data into PowerBI would be the penultimate stage right before dashboard creation abd this will build momentum with practice. Continue on in the series with me into Part 3 where I go into details about what to do next!.\nI appreciate you taking the time to read my blog.\nPlease give it a share for me. Jonathan Links and References Location Link Microsoft Learn Quickstart: Register an application with the Microsoft identity platform Microsoft Learn Implement app registration "},{
  "section": "Articles",
  "slug": "/articles/bp-1-pbi-intune/",
  "title": "Intune and PowerBI Deep Dive - Part 1 - Where to Start",
  "description": "Visit www.deploymentshare.com to find out more",
  "date": "January 10, 2024",
  "image": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n\n\n\n\n\n  \n\n  \n  \n    \n      \n    \n\n\n    \n    \n\n\n    \n    \n      \n      \n    \n    \n    \n\n\n    \n    \n      \n      \n        \n        \n        \n        \n        \n        \n\n\n        \n        \n\n\n        \u003cimg\n          \n            src=\"/images/title/pbi-intune_hu93e729ed80f60802b181437f64a553ee_407980_420x0_resize_q90_h2_lanczos.webp\" loading=\"lazy\" decoding=\"async\"\n          \n\n          alt=\"\"\n          class=\"  img\"\n          width=\"420\"\n          height=\"217\"\n          onerror=\"this.onerror='null';this.src='\\/images\\/title\\/pbi-intune_hu93e729ed80f60802b181437f64a553ee_407980_420x0_resize_q90_lanczos.jpg';\" /\u003e\n\n        \n      \n      \n    \n    \n  \n\n\n  \n",
  "imageSM": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n\n\n\n\n\n  \n\n  \n  \n    \n      \n    \n\n\n    \n    \n\n\n    \n    \n      \n      \n    \n    \n    \n\n\n    \n    \n      \n      \n        \n        \n        \n        \n        \n        \n          \n          \n          \n          \n        \n\n\n        \n        \n\n\n        \u003cimg\n          \n            src=\"/images/title/pbi-intune_hu93e729ed80f60802b181437f64a553ee_407980_100x100_fill_q90_h2_lanczos_smart1.webp\" loading=\"lazy\" decoding=\"async\"\n          \n\n          alt=\"\"\n          class=\"  img\"\n          width=\"100\"\n          height=\"100\"\n          onerror=\"this.onerror='null';this.src='\\/images\\/title\\/pbi-intune_hu93e729ed80f60802b181437f64a553ee_407980_100x100_fill_q90_lanczos_smart1.jpg';\" /\u003e\n\n        \n      \n      \n    \n    \n  \n\n\n  \n",
  "searchKeyword": "",
  "categories": "PowerBi, Intune, Microsoft Graph",
  "tags": "Microsoft, Intune, PowerBI, Microsoft Graph",
  "content":"In this series, I will guide you through the process of extracting data from Microsoft Graph, specifically Microsoft Intune, and integrating it into PowerBI. We will explore different approaches, considering their advantages and disadvantages, in order to provide you with a solid foundation for creating your own reports within your specific environment. Its intent is to take you on a journey as I discover what to do, so please do take the time to read them in order to ensure you come along for the ride! I have invested significant time and effort into studying this subject and understanding the potential pitfalls associated with various approaches. Whilst undertaking this journey I also took and passed my PL-400 exam , an achievement I am very proud of. Throughout this series, we will cover the prerequisites, data ingestion methods, the approach I personally adopt, and I will share some of my queries. Additionally, I aim to demonstrate effective strategies for managing this integration. So\u0026hellip; lets get to it.\nQuick Links Tip\nYou will see this quick links menu on most of the posts throughout the series, just head to the drop down and navigate the series with ease. If you spot any missing or dead links do let me know, being human can lead to mistakes from time to time.\nSeries Menu Part 1 - Where to Start Part 2 - Application Registration Part 3 - Exploring Graph URLs Part 4 - Get-BearerToken Part 5 - Heavy Lifting Part 6 - Managed Devices Part 7 - Managed Applications Part 8 - Autopilot Devices Coming soon! - Connectors and Tokens Unfortunately, Microsoft doesn\u0026rsquo;t offer a straightforward method for extracting data from Intune and importing it into PowerBI as you would expect. They offer one solution which is Intune the data warehouse OData feed. Using traditional advanced techniques like leveraging functions in Power Query to bypass this limitation, handle pagination of the API call and query the Microsoft Graph directly, the resulting output cannot be published into the PowerBI because you are using hand-authored queries.\nConsequently, we must confront these obstacles head-on and devise a strategy to overcome them. The objective is to create a robust and dynamic report that provides up-to-date insights, ideally querying the graph directly so we can refresh at any moment and get data which is as up to date as can be.\nLets take a look first at the Intune Data Warehouse, and why not to use it.\nIntune Data Warehouse (Explore the tabs) Arguments Against Arguments For Data is Intune only, for Co-Managed Clients, you need to get the rest of the data from Configuration Manager Tables are not very neat or intuitive Visuals available from the data and relationships are poor Data can be up to 24 hours behind real time, no matter how many times you refresh Data is limited Historical Data Quick to set up A model using the OData Standard which Microsoft like \u0026amp; promote Exploring this method Having explored this approach and successfully imported the data into PowerBI, I must admit that I was not particularly impressed. While there are certain datasets that may prove useful, the overall quality is lacking. Establishing relationships between tables would require a considerable amount of effort since they are not pre-configured. Moreover, upon closer examination, it becomes apparent that the so-called \u0026ldquo;data\u0026rdquo; is not comprehensive data and how it can be used for business purposes to report on business critical functions is very questionable . Although there are some details available for devices and users, the amount of useful data is minimal. As a huge fan of Microsoft Graph, I find that the data retrieved through Graph queries far surpasses the information obtained from the Intune Data Warehouse feed.\nHere you can see me clicking through the data, you may notice lots of nested reference number tables you would have to create multiple relationships for which is sort or remnant of tables inside the Configuration Manager database\nMarks out of ten? Ease to set up? 9/10 - Easy to grab the unique URL from the Intune console and use. Data? 2/10 - Not much useful data to use, especially for business reasons. Overall result - 4/10 Getting Microsoft Graph query data into PowerBI It became clear at this point that the better option would be to query the graph directly but previously, having used the Graph Explorer , I\u0026rsquo;ve always authenticated with a username and password, getting data into PowerBI especially using a web input feed, was going to be interesting. In simplistic terms you\u0026rsquo;d be forgiven for thinking you could go grab the Graph URL and use it as a web input in PowerBI, then simply add your credentials and off you go. Sadly, this doesnt work.\nSo what is the solution? Well, we can leverage a couple of different approaches. Web.Contents and OData.Feed are the two I will cover in this series. Although I\u0026rsquo;ll show you two methods for Web.Contents. All of these methods require an application registration in Azure which will allow (once permissions are granted) access to data.\nIn the next post, I will explain how to set up an Application Registration as an intermediary for authentication between you and the Microsoft Graph and how to grant it permissions to access data from your tenant. By granting these application permissions, you can bypass the need for entering a username and password and authenticate from PowerBi directly. Similar to API Keys in other APIs you may have come across, the application registration serves as a centralized authorization mechanism for accessing the data.\nJoin me in Part 2 where I go into details about how to set one up.\nI appreciate you taking the time to read my blog.\nPlease give it a share for me. Jonathan Links and References Location Link Microsoft Learn Use the Intune Data Warehouse Microsoft Learn Connect to the Data Warehouse With PowerBI Microsoft Learn Create an Intune Report with the OData Feed using PowerBI "},{
  "section": "Articles",
  "slug": "/articles/bp-apgrouptagts/",
  "title": "Setting a Group Tag During a Configuration Manager Task Sequence",
  "description": "",
  "date": "December 14, 2023",
  "image": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n\n\n\n\n\n  \n\n  \n  \n    \n      \n    \n\n\n    \n    \n\n\n    \n    \n      \n      \n    \n    \n    \n\n\n    \n    \n      \n      \n        \n        \n        \n        \n        \n        \n\n\n        \n        \n\n\n        \u003cimg\n          \n            src=\"/images/title/bp-apgrouptagts_hu75c752b31f5cb1ad0b150c22ea20da9d_179279_420x0_resize_q90_h2_lanczos.webp\" loading=\"lazy\" decoding=\"async\"\n          \n\n          alt=\"\"\n          class=\"  img\"\n          width=\"420\"\n          height=\"217\"\n          onerror=\"this.onerror='null';this.src='\\/images\\/title\\/bp-apgrouptagts_hu75c752b31f5cb1ad0b150c22ea20da9d_179279_420x0_resize_q90_lanczos.jpg';\" /\u003e\n\n        \n      \n      \n    \n    \n  \n\n\n  \n",
  "imageSM": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n\n\n\n\n\n  \n\n  \n  \n    \n      \n    \n\n\n    \n    \n\n\n    \n    \n      \n      \n    \n    \n    \n\n\n    \n    \n      \n      \n        \n        \n        \n        \n        \n        \n          \n          \n          \n          \n        \n\n\n        \n        \n\n\n        \u003cimg\n          \n            src=\"/images/title/bp-apgrouptagts_hu75c752b31f5cb1ad0b150c22ea20da9d_179279_100x100_fill_q90_h2_lanczos_smart1.webp\" loading=\"lazy\" decoding=\"async\"\n          \n\n          alt=\"\"\n          class=\"  img\"\n          width=\"100\"\n          height=\"100\"\n          onerror=\"this.onerror='null';this.src='\\/images\\/title\\/bp-apgrouptagts_hu75c752b31f5cb1ad0b150c22ea20da9d_179279_100x100_fill_q90_lanczos_smart1.jpg';\" /\u003e\n\n        \n      \n      \n    \n    \n  \n\n\n  \n",
  "searchKeyword": "",
  "categories": "Configuration Manager, Intune",
  "tags": "ConfigMgr, Configuration Manager, Group Tag, Autopilot, Intune",
  "content":"In this post I\u0026rsquo;m going to talk about using the Windows autopilot deployment for existing devices Task sequence in configuration manager and modifying that task sequence to set a group tag during the process. You may know that traditionally this tasks sequence is used to \u0026lsquo;build\u0026rsquo; devices and have them ready to start the autopilot process. I had a customer recently that had that very need. They had purchased a large number of machines that were delivered with Windows 10 installed and not Windows 11. As the customer was on their Windows 11 uplift journey already they were a bit disappointed to say the least and they opted to create a Configuration Manager task sequence to prep them for autopilot. That prep process was to include wiping the device and re-loading with Windows 11, adding the device to the tenants autopilot devices AND setting a group tag to drop the device into pre-created groups that control the apps and configurations the devices are going to receive during autopilot. So\u0026hellip; lets get started\u0026hellip; App Registration The first thing you are going to need to create is an application registration . This app registration allows you to add devices to autopilot and set a group tag. We will work on the basis of least privilege and only allow the app registration a singular permission. The application registration will be called upon during out task sequence where we will pass our secret key to allow us to use it.\nWithin the Microsoft Entra ID portal, navigate to App Registrations. Create a new Registration and name it as you see fit, in my case I called it \u0026ldquo;Autopilot GroupTag\u0026rdquo; you know, because I\u0026rsquo;m super inventive. You will now need to add the permission DeviceManagementServiceConfig.ReadWrite.All, as a Microsoft Graph Application Permission and grant consent. Finally you will need to create an application Secret and copy the secret key (Take note of the expiry date and set reminders for yourself and also, ensure to store the key safely) Before continuing on you will need the following items:\nYour Directory (tenant) ID (Overview Blade of your app registration) The application (Client) ID (Overview Blade of your app registration) Your secret value (Certificates and Secrets Blade of your app registration) Task Sequence OK, lets now configure the task sequence. First create your autopilot task sequence following the Microsoft documentation from here .\nI wont regurgitate the task sequence configuration steps from the above documentation, however once you have the task sequence set up we\u0026rsquo;re going to make some adjustments. We are firstly going to create four variables\nTenantID AppID SecretID GroupTag For the SecretID, I strongly suggest you tick the box to \u0026ldquo;Do Not Display this Value\u0026rdquo;. This at least forms some sort of security for you as the secret is the key to the app registration and what it can do. Keeping that secure may or may not be important to you:\nA description containing the expiry date might help in the event of failures too :-) The Script Next comes the fun bit. I lost a considerable amount of time testing this with numerous faults and errors. I was hoping that, I could use the Get-WindowsAuotpiloInfo script during the sequence to \u0026lsquo;just get it done\u0026rsquo;. But I ran into multiple issues. Namely, installing modules during WinPE because no matter what I tried, I was unable to leverage \u0026ldquo;Install-Module\u0026rdquo; correctly. The original script has some pre-req modules and so wouldn\u0026rsquo;t run without them present. This was causing me a headache. I then found the Recast Software community post (see references) where they used Invoke-Webrequest to pull in the module and then essentially move it to the correct location. This worked a treat.\nHere is the script I used. Explanation below.\n\u0026lt;# .SYNOPSIS Installs Get-WindowsAuopilotInfo.ps1 and calls it using the parameter .DESCRIPTION * Used alongside a task sequence within Configuration Manager, this script was uses to add the device to autopilot and set a GroupTa .AUTHOR Jonathan Fallis - www.deploymentshare.com .VERSION 1.0.1 - Added Error Logging 1.0.0 - Original .EXAMPLE .\\Set-AutopilotGroupTag -TenantID \u0026#34;123456\u0026#34; -AppID \u0026#34;234567\u0026#34; -SecretID \u0026#34;345678\u0026#34; -GroupTag \u0026#34;AutopilotDevice\u0026#34; #\u0026gt; Param( [Parameter(Mandatory=$true)] [string]$TenantID, [Parameter(Mandatory=$true)] [string]$AppID, [Parameter(Mandatory=$true)] [string]$SecretID, [Parameter(Mandatory=$true)] [string]$GroupTag ) $WorkingDir = $env:TEMP $LogFilePath = \u0026#34;C:\\Windows\\Temp\\Set-GroupTag.log\u0026#34; [System.Environment]::SetEnvironmentVariable(\u0026#39;LOCALAPPDATA\u0026#39;,\u0026#34;$env:SystemDrive\\Windows\\system32\\config\\systemprofile\\AppData\\Local\u0026#34;) #Function for Error Logging Function Write-log { [CmdletBinding()] Param( [parameter(Mandatory = $true)] [String]$Path, [parameter(Mandatory = $true)] [String]$Message, [parameter(Mandatory = $true)] [String]$Component, [Parameter(Mandatory = $true)] [ValidateSet(\u0026#39;Info\u0026#39;, \u0026#39;Warning\u0026#39;, \u0026#39;Error\u0026#39;)] [String]$Type ) switch ($Type) { \u0026#39;Info\u0026#39; { [int]$Type = 1 } \u0026#39;Warning\u0026#39; { [int]$Type = 2 } \u0026#39;Error\u0026#39; { [int]$Type = 3 } } # Create a log entry $Content = \u0026#34;\u0026lt;![LOG[$Message]LOG]!\u0026gt;\u0026#34; + ` \u0026#34;\u0026lt;time=`\u0026#34;$(Get-Date -Format \u0026#39;HH:mm:ss.ffffff\u0026#39;)`\u0026#34; \u0026#34; + ` \u0026#34;date=`\u0026#34;$(Get-Date -Format \u0026#39;M-d-yyyy\u0026#39;)`\u0026#34; \u0026#34; + ` \u0026#34;component=`\u0026#34;$Component`\u0026#34; \u0026#34; + ` \u0026#34;context=`\u0026#34;$([System.Security.Principal.WindowsIdentity]::GetCurrent().Name)`\u0026#34; \u0026#34; + ` \u0026#34;type=`\u0026#34;$Type`\u0026#34; \u0026#34; + ` \u0026#34;thread=`\u0026#34;$([Threading.Thread]::CurrentThread.ManagedThreadId)`\u0026#34; \u0026#34; + ` \u0026#34;file=`\u0026#34;`\u0026#34;\u0026gt;\u0026#34; # Write the line to the log file Add-Content -Path $Path -Value $Content } #Test for internet connectivty using 8.8.8.8 If (Test-Connection 8.8.8.8 -quiet) { Write-Log -Type Info -Message \u0026#34;Internet Connection OK\u0026#34; -Component \u0026#34;Internet Check\u0026#34; -Path $LogFilePath } Else { Write-Log -Type Error -Message \u0026#34;Internet Connection check failed\u0026#34; -Component \u0026#34;Internet Check\u0026#34; -Path $LogFilePath ; Exit 1 } #Enable TLS 1.2 Try { [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12 Write-Log -Type Info -Message \u0026#34;Setting TLS1.2 Completed Successfully\u0026#34; -Component \u0026#34;TLS 1.2 Check\u0026#34; -Path $LogFilePath } Catch { Write-Log -Type Error -Message ($_ | Out-String) -Component \u0026#34;TLS 1.2 Check\u0026#34; -Path $LogFilePath } #PowerShellGet from PSGallery URL Try { if (!(Get-Module -Name PowerShellGet)){ $PowerShellGetURL = \u0026#34;https://psg-prod-eastus.azureedge.net/packages/powershellget.2.2.5.nupkg\u0026#34; Write-Log -Type Info -Message \u0026#34;URL set to $PowerShellGetURL\u0026#34; -Component \u0026#34;PowerShellGet Check\u0026#34; -Path $LogFilePath Invoke-WebRequest -UseBasicParsing -Uri $PowerShellGetURL -OutFile \u0026#34;$WorkingDir\\powershellget.2.2.5.zip\u0026#34; Write-Log -Type Info -Message \u0026#34;Downloaded PowerShellGet \u0026#34; -Component \u0026#34;PowerShellGet Check\u0026#34; -Path $LogFilePath $Null = New-Item -Path \u0026#34;$WorkingDir\\2.2.5\u0026#34; -ItemType Directory -Force Expand-Archive -Path \u0026#34;$WorkingDir\\powershellget.2.2.5.zip\u0026#34; -DestinationPath \u0026#34;$WorkingDir\\2.2.5\u0026#34; Write-Log -Type Info -Message \u0026#34;Unzipped PowerShellGet \u0026#34; -Component \u0026#34;PowerShellGet Check\u0026#34; -Path $LogFilePath $Null = New-Item -Path \u0026#34;$env:ProgramFiles\\WindowsPowerShell\\Modules\\PowerShellGet\u0026#34; -ItemType Directory -ErrorAction SilentlyContinue Move-Item -Path \u0026#34;$WorkingDir\\2.2.5\u0026#34; -Destination \u0026#34;$env:ProgramFiles\\WindowsPowerShell\\Modules\\PowerShellGet\\2.2.5\u0026#34; Write-Log -Type Info -Message \u0026#34;Moved PowerShellGet to $WorkingDir\u0026#34; -Component \u0026#34;PowerShellGet Check\u0026#34; -Path $LogFilePath } } Catch { Write-Log -Type Error -Message ($_ | Out-String) -Component \u0026#34;PowerShellGet Check\u0026#34; -Path $LogFilePath } #PackageManagement from PSGallery URL Try { if (!(Get-Module -Name PackageManagement)){ $PackageManagementURL = \u0026#34;https://psg-prod-eastus.azureedge.net/packages/packagemanagement.1.4.7.nupkg\u0026#34; Write-Log -Type Info -Message \u0026#34;URL set to $PackageManagementURL\u0026#34; -Component \u0026#34;PackageManagement Check\u0026#34; -Path $LogFilePath Invoke-WebRequest -UseBasicParsing -Uri $PackageManagementURL -OutFile \u0026#34;$WorkingDir\\packagemanagement.1.4.7.zip\u0026#34; Write-Log -Type Info -Message \u0026#34;Downloaded PackageManagement\u0026#34; -Component \u0026#34;PackageManagement Check\u0026#34; -Path $LogFilePath $Null = New-Item -Path \u0026#34;$WorkingDir\\1.4.7\u0026#34; -ItemType Directory -Force Expand-Archive -Path \u0026#34;$WorkingDir\\packagemanagement.1.4.7.zip\u0026#34; -DestinationPath \u0026#34;$WorkingDir\\1.4.7\u0026#34; Write-Log -Type Info -Message \u0026#34;Unzipped PackageManagement\u0026#34; -Component \u0026#34;PackageManagement Check\u0026#34; -Path $LogFilePath $Null = New-Item -Path \u0026#34;$env:ProgramFiles\\WindowsPowerShell\\Modules\\PackageManagement\u0026#34; -ItemType Directory -ErrorAction SilentlyContinue Move-Item -Path \u0026#34;$WorkingDir\\1.4.7\u0026#34; -Destination \u0026#34;$env:ProgramFiles\\WindowsPowerShell\\Modules\\PackageManagement\\1.4.7\u0026#34; Write-Log -Type Info -Message \u0026#34;Moved PackageManagement to $WorkingDir\u0026#34; -Component \u0026#34;PackageManagement Check\u0026#34; -Path $LogFilePath } } Catch { Write-Log -Type Error -Message ($_ | Out-String) -Component \u0026#34;PackageManagement Check\u0026#34; -Path $LogFilePath } #Import PowerShellGet if (Import-Module PowerShellGet) { Write-Log -Type Info -Message \u0026#34;PowerShellGet Module Imported OK\u0026#34; -Component \u0026#34;PowerShellGet Import\u0026#34; -Path $LogFilePath } Else { Write-Log -Type Error -Message ($_ | Out-String) -Component \u0026#34;PowerShellGet Import\u0026#34; -Path $LogFilePath ; Exit 1 } #Install the script if (Install-Script Get-WindowsAutopilotinfo -Force) { Write-Log -Type Info -Message \u0026#34;Get-WindowsAutopilotInfo Installed OK\u0026#34; -Component \u0026#34;Get-WindowsAutopilotInfo Install\u0026#34; -Path $LogFilePath } Else { Write-Log -Type Error -Message ($_ | Out-String) -Component \u0026#34;Get-WindowsAutopilotInfo Install\u0026#34; -Path $LogFilePath ; Exit 1 } #Run the script if (Get-WindowsAutopilotinfo -Online -TenantId $TenantID -AppId $AppID -AppSecret $SecretID -Grouptag $GroupTag) { Write-Log -Type Info -Message \u0026#34;Get-WindowsAutopilotInfo executed successfully\u0026#34; -Component \u0026#34;Running Get-WindowsAutopilotInfo\u0026#34; -Path $LogFilePath } Else { Write-Log -Type Error -Message ($_ | Out-String) -Component \u0026#34;Get-WindowsAutopilotInfo Install\u0026#34; -Path $LogFilePath ; Exit 1 } Changes 08/01/2024 - Added Error Logging to the script to output to a log file in C:\\Windows\\Temp - aids troubleshooting. Script Step Lets create a PowerShell Script step in our Task sequence.\nWe will opt to past a script into the step;\nWe will also configure the script to pass in four parameters.\nNotice that the script requires four parameters passing to it and would you believe it!? they match the task sequence variables we set up earlier. Wonderful. to reference a task sequence variable in a task sequence step you surround the text with \u0026ldquo;%\u0026rdquo; like in the above image.\nWithin the step you will notice the following;\n[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12 This enables TLS 1.2. This is used to overcome networking issues experienced when attempting to go out to the www to receive content. There are then two sections which manually pull in the modules PowerShellGet and PackageManagement, both required to install the \u0026ldquo;Get-WindowsAutopilotInfo\u0026rdquo; script (which ensures the latest version is always pulled in) and to run it using the parameters we have passed in because\u0026hellip; the script Get-WindowsAutopilotInfo uses the same parameter names we have passed in from our task sequence variables.\nIn testing I see the devices appear in Autopilot devices; And then shortly after the device that is \u0026ldquo;Not Assigned\u0026rdquo; changes to pending, and lastly - assigned And VOILA! Device present and accounted for.\nHappy Customer.\nTesting Once testing begun there was an issue we noticed. Shift+F10 was not available in the event of a failure which was odd. This is controlled by the file C:\\Windows\\Setup\\Scripts\\DisableCMDRequest.TAG which we can remove with a simple Run Command Line Step.\nImprovements / Ideas If you are not too scared about human-error, you could use something like ServiceUI to prompt the end user for text input to set the group tag and configure the variable GroupTag to the input of that. You could have a dynamic group tag set on hardware type using WMI queries. If you know a certain model requires a certain group tag you can set this condition on the Options tab of the task sequence variable step. Thanks for reading Jonathan.\nLocation Link Powershell is Fun Upload Autopilot Hardware Hash Recast Software Enable PSGallery in a Task Sequence "},{
  "section": "Articles",
  "slug": "/articles/bp-applications/",
  "title": "How to build apps in Endpoint Manager",
  "description": "",
  "date": "March 27, 2021",
  "image": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n\n\n\n\n\n  \n\n  \n  \n    \n      \n    \n\n\n    \n    \n\n\n    \n    \n      \n      \n    \n    \n    \n\n\n    \n    \n      \n      \n        \n        \n        \n        \n        \n        \n\n\n        \n        \n\n\n        \u003cimg\n          \n            src=\"/images/title/bp-applications_hu3607b879fb963a70b7dae784630f47b1_721967_420x0_resize_q90_h2_lanczos_3.webp\" loading=\"lazy\" decoding=\"async\"\n          \n\n          alt=\"\"\n          class=\"  img\"\n          width=\"420\"\n          height=\"217\"\n          onerror=\"this.onerror='null';this.src='\\/images\\/title\\/bp-applications_hu3607b879fb963a70b7dae784630f47b1_721967_420x0_resize_lanczos_3.png';\" /\u003e\n\n        \n      \n      \n    \n    \n  \n\n\n  \n",
  "imageSM": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n\n\n\n\n\n  \n\n  \n  \n    \n      \n    \n\n\n    \n    \n\n\n    \n    \n      \n      \n    \n    \n    \n\n\n    \n    \n      \n      \n        \n        \n        \n        \n        \n        \n          \n          \n          \n          \n        \n\n\n        \n        \n\n\n        \u003cimg\n          \n            src=\"/images/title/bp-applications_hu3607b879fb963a70b7dae784630f47b1_721967_100x100_fill_q90_h2_lanczos_smart1_3.webp\" loading=\"lazy\" decoding=\"async\"\n          \n\n          alt=\"\"\n          class=\"  img\"\n          width=\"100\"\n          height=\"100\"\n          onerror=\"this.onerror='null';this.src='\\/images\\/title\\/bp-applications_hu3607b879fb963a70b7dae784630f47b1_721967_100x100_fill_lanczos_smart1_3.png';\" /\u003e\n\n        \n      \n      \n    \n    \n  \n\n\n  \n",
  "searchKeyword": "",
  "categories": "Intune, Microsoft Deployment Toolkit, PowerShell, Configuration Manager, Windows 10",
  "tags": "App Packaging, Applications, Packaging, SCCM",
  "content":"Hello everyone, I hope you are all safe and well.\nI’ve been thinking about writing this for a while and I hope it helps some of you new to app packaging.\nHow do I build apps? It never hurts to brush up if you’re a seasoned app-packager. App packaging isn’t going away any time soon, everyone needs apps. The Microsoft app store has gotten better but I don’t feel it’s quite there yet in terms of broadly available applications. Sometimes, companies can have line-of-business applications that they build in-house and as system administrators, you may be responsible for packaging and distributing those applications. How do you tackle it? where do you begin?\nFirst, terminology; this is important because often terms are mixed up, and I’ll be honest it can be confusing for a newcomer.\n“Package me an application, please” “Can you package this up for me?” “Can you make the software into a package?” “Can you deploy this application?” “Can you deploy this package?”\nOK, here goes (I hope this makes sense). ‘Packaging’ something simply describes the process of taking a piece of software and making it “ready for deployment” so that, you can use whatever your chosen deployment method is, to distribute that application to devices in your estate with minimal administrative effort. Normally, the distribution methods in environments these days are Configuration Manager (Commonly known as the legacy name SCCM) or Microsoft Intune. Both very good products, although I favour the former. The two combined now collectively known as Endpoint Manager \u0026amp; you’ll notice some branding changes trickle through but I think it’s safe to say those of us using these technologies know a little of their history.\nLet’s go one at a time here, starting with Configuration Manager, within the console, on the Software Library node, under Application Management you can see “packages” and “applications” (this is where it starts to get confusing. Software, made deployment-ready, in Configuration Manager, can take the format of a “package” or an “application” and I find that this is where the terms get muddled up).\nAs Intune is an MDM (Mobile Device Management) solution, these “apps” can take the format of Windows apps, IOS apps (Apple OS), Android apps… including many others. Found here:\nThere are sometimes different formats of apps that reside with a category. Windows apps, for example, generally take the form of (but are not limited to) “Win32” apps, or “Microsoft Store” apps. . It’s important that as you start to explore these consoles that you take note of the terms used and continue to speak and write the same terms in your day-to-day activities to better distinguish to what you are referring to. Remember so far we’ve used the terms “Packaging”, “Package”, “Application”, “Apps”, “Win32”, “Microsoft Store apps”\nHere are some links that may help you. Deploy applications – Configuration Manager | Microsoft Docs Packages and programs – Configuration Manager | Microsoft Docs Win32 app management in Microsoft Intune | Microsoft Docs Manage VPP apps from Microsoft Store for Business – Microsoft Intune | Microsoft Docs Discovery OK next up, discovery. in order for your application to install without any user interaction, you’re going to need to discover firstly whether that’s supported, and secondly how to do it. There are many resources available on the internet to help you with this, but also some basic tricks that I suggest you learn. Normally, I start to interrogate the installer files provided by the requester. This might be a setup.exe file, or if you’re lucky, a .msi file. In some cases, you might be required to write scripts to facilitate the install and there maybe configuration or settings files that you need to apply. I’ve come across all manner of software with all manner of intricate ways to install and configure with no user-interaction (referred to as silently). Let’s take a practical example of both. Starting with a .exe (hardest).\n.EXE Discovery Place your installer files into a folder and open a command prompt window in that folder. To interrogate any installer you need to ask it, “what switches are available to use?”. You can usually achieve this by trying to run the software with a query switch. Examples would be “/?” (most common) or “/help”, which should result in the software throwing out a window to let you know what you can do with it, if you’re lucky enough to get one, examine it for silent install command lines and then begin to test them. Often they take the format of switches you can throw such as “/quiet” (or “/q”), “/silent” (or “/s”) or some other connotation\nIn this example a window is thrown out that’s quite large so I cut down what I need to show you.\n… “/verysilent” sounds great! We’ll use that. This method of querying the application will work 9.5 times out of ten. You’ll then have to go and test that it installs the application silently and that you receive no end-user prompts whatsoever. As always, test on throw-away VMs. Not production. Once you have the command that installs the software silently, you have your “install string”, which is one part of the discovery. Next comes the uninstall string. Normally you can retrieve these from the registry in one of these two locations depending on the architecture of the application.\n32bit Registry Hive HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Uninstall\n64 Registry Hive Note: On a 64-bit computer you will need to check both the key above and the following key: HKEY_LOCAL_MACHINE\\SOFTWARE\\Wow6432Node\\Microsoft\\Windows\\CurrentVersion\\Uninstall\nWarning! – I have seen some programs that don’t use these two standard registry locations so if you can’t find what you’re looking for, then you’re going to have to search for what you need. Once you’ve explored the registry and found the key for your particular software, there’s usually a subkey you can discover to help you find the silent uninstall string.\nI wrote some code to go get some useful information for you from the registry. It may help save some time\nCode Clear-Host $Hive = Get-ChildItem -Path HKLM:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Uninstall $Hive2 = Get-ChildItem -Path HKLM:\\SOFTWARE\\Wow6432Node\\Microsoft\\Windows\\CurrentVersion\\Uninstall Write-Host -ForegroundColor Green \u0026#34;x64 Registry Hive - HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Uninstall \u0026#34; $Hive | Get-ItemProperty | Select-Object -Property PSChildName, DisplayName, DisplayVersion, UninstallString | Sort-Object DisplayName | Format-Table -AutoSize -Wrap Write-Host -ForegroundColor Cyan \u0026#34;x86 Registry Hive - HKEY_LOCAL_MACHINE\\SOFTWARE\\Wow6432Node\\Microsoft\\Windows\\CurrentVersion\\Uninstall\u0026#34; $Hive2 | Get-ItemProperty | Select-Object -Property PSChildName, DisplayName, DisplayVersion, UninstallString | Sort-Object DisplayName | Format-Table -AutoSize -Wrap A colleague of mine, told me about an application that’s quite useful in this space, Geek Uninstaller, which is free for personal use. You may wish to investigate that if you prefer not to use PowerShell or dig around in the registry. I don’t personally use this, but some of my team do and they like it.\nThis now arms you with being able to silently install and uninstall the software. Once you can do that we can create our deployment-ready item.32bit\nAgain, please test. Does it work as expected? If so, now you have your “uninstall string”. You won’t always get lucky and sometimes you might need to do some research and further testing to get the end results you need. For the majority of cases though, this will work.\nMSI Discovery For MSIs the process is pretty straight forward. Every MSI normally takes the same install and uninstall string, like so;\nInstall: msiexec.exe /i yoursoftware.msi /qn Uninstall: msiexec /x yoursoftware.msi /qn (/i = install, /x = uninstall, /q = quite/silent, the ‘n’ signifies no user interface, so completely silent)\nAll MSI’s accept a query switch if “/?” and from the output, you can see that you can get quite granular with the options.\nIn a live environment, you may also see a long GUID for the uninstall string. Like this: msiexec /x {XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX} /qn\nThis represents the ‘Product Code’ for the software and should be unique although I have seen instances where it’s not, so tread carefully.\nMore information here: Command-Line Options – Win32 apps | Microsoft Docs .. sometimes, even MSI’s can take extra switches for items such as registration or activation code, or you may be able to customise the install, for example with a company name. These extra switches can normally be found in the documentation for the software, via internet research or if you wish, you can even examine the database for the MSI and see if there are any switches you can find. Out of scope for this article, but there is a program inside Microsoft’s Software Development Kit (SDK) called Orca, that you may wish to take a look at if you get stuck. Using Orca, you can open the MSI database and search for fields that can be taken as parameters. I’ve used this right back from the early days, but it can be confusing. I’m sure there are others available too. Vendor documentation normally has them.\nWorth noting, never underestimate looking in the vendor’s documentation, you will normally get what you need. I say normally, but those well versed at app packaging will start to recognise companies that do better at this than others.\nLet’s think about the components we now have. We have the source files (see below about Intune source files), we have identified a silent install string and a silent uninstall string. We have tested that these work as expected on a throw-away virtual machine and we’re ready to place those items into our deployment tool to be pushed out across our estate. But which one? Well, that totally depends on you really. What tools do you have at your disposal? What are you licensed for? (Intune requires licenses) Is this going to be for on-premises, or will your users be ‘in the wild’? Once you know you will be able to decipher which will be the best tool to use to meet those requirements.\nIntune Source Files for Win32 apps cannot be the raw files you have when creating applications inside the Configuration Manager console. You will need to collect them up and use the Win32 Content Prep Tool , that will take your raw source files and concern them into a single .intunewin file which you then upload to Intune. This will compress and encrypt the source files for a quicker transfer. You may have noticed I have linked some documents in this paragraph, those will help you.\nNext up, Detection Clauses, these are quite important to your packaging journey, you need to identify a way to detect that the software is installed. Most of the time, this will be the existence of a registry key. Using the example from above, we could set the following key to be our detection clause:\nSo we’ll tell the system “If this key exists, then the application is installed”. We will need to check whether or not it is removed during the uninstall process first, just to be sure its not left behind as an orphan and therefore would lead to a false detection if removed. In some cases you cant leverage the root-level registry key, you may need to go deeper such as detecting whether or not the version number is equal to or greater than something. For example in the case of an app that might self-update or update often the registry key will always be present but the version number might increment, you’ll need to tread carefully around these apps to ensure that you don’t get false detections. Again, take each app as it comes and start to build up your exposure and experience with it. You’ll start to notice common registry key places (like the ones mentioned earlier) and soon, it will become second nature.\nDeployment Finally, Deployment, this bit isn’t really part of the packaging process but I thought it would be important to mention to just tread carefully with your deployments, don’t assume that your clean Virtual Machine is a true representation of real-world machines. Always try to test a few machines in a ‘pilot before production’ mentality. Don’t, for example, rush an app then blast it out to 1000+ production machines and then wonder why your service desk is rammed with tickets the next day.\nI think, above all, don’t be scared to ask for help if you’re struggling.\nI truly hope this helps anyone starting out on their application packaging journey. Thanks for reading Jonathan.\n"},{
  "section": "Articles",
  "slug": "/articles/bp-forticlient/",
  "title": "Logon to Autopilot HAADJ Devices Using FortiClient VPN",
  "description": "",
  "date": "September 15, 2020",
  "image": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n\n\n\n\n\n  \n\n  \n  \n    \n      \n    \n\n\n    \n    \n\n\n    \n    \n      \n      \n    \n    \n    \n\n\n    \n    \n      \n      \n        \n        \n        \n        \n        \n        \n\n\n        \n        \n\n\n        \u003cimg\n          \n            src=\"/images/title/bp-forticlient_hu45baa047a21e190e92fc2ce9885cfe73_68094_420x0_resize_q90_h2_lanczos_3.webp\" loading=\"lazy\" decoding=\"async\"\n          \n\n          alt=\"\"\n          class=\"  img\"\n          width=\"420\"\n          height=\"219\"\n          onerror=\"this.onerror='null';this.src='\\/images\\/title\\/bp-forticlient_hu45baa047a21e190e92fc2ce9885cfe73_68094_420x0_resize_lanczos_3.png';\" /\u003e\n\n        \n      \n      \n    \n    \n  \n\n\n  \n",
  "imageSM": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n\n\n\n\n\n  \n\n  \n  \n    \n      \n    \n\n\n    \n    \n\n\n    \n    \n      \n      \n    \n    \n    \n\n\n    \n    \n      \n      \n        \n        \n        \n        \n        \n        \n          \n          \n          \n          \n        \n\n\n        \n        \n\n\n        \u003cimg\n          \n            src=\"/images/title/bp-forticlient_hu45baa047a21e190e92fc2ce9885cfe73_68094_100x100_fill_q90_h2_lanczos_smart1_3.webp\" loading=\"lazy\" decoding=\"async\"\n          \n\n          alt=\"\"\n          class=\"  img\"\n          width=\"100\"\n          height=\"100\"\n          onerror=\"this.onerror='null';this.src='\\/images\\/title\\/bp-forticlient_hu45baa047a21e190e92fc2ce9885cfe73_68094_100x100_fill_lanczos_smart1_3.png';\" /\u003e\n\n        \n      \n      \n    \n    \n  \n\n\n  \n",
  "searchKeyword": "",
  "categories": "Intune, PowerShell",
  "tags": "App Packaging, Applications, Autopilot, Azure AD, Forticlient, Hybrid, Hybrid AAD, Intune, VPN",
  "content":"I recently had a customer who uses FortiClient as their VPN solution, and they have recently embarked on setting up Hybrid AAD. We set their tenant up, sorted out licensing and I started to put in the fundamental elements to begin the journey to using Autopilot for provisioning devices. I had undertaken setting up AAD connect and using IDFix to remediate any issues, such as UPN suffixes for end-users via PowerShell, and we were ready to go. Equally, I had made them an Intune Win32app for FortiClient, and this installed and removed just fine using PSADT. I had already tested the Autopilot process and things were looking good.\nNavigating to endpoint.microsoft.com and under “Windows Autopilot deployment profiles” I have two Hybrid Azure AD Joined profiles set up for the two scenarios my customer has unique to them. I have packaged up some apps (all using PSADT) and they have all been tested as working so I now want to run through the Autopilot process, have the apps install, join the machine to the domain using the Intune Connector and be faced with a login screen. I can only do this however if I use the optional feature (currently public preview at the time of writing this article) of “Skip AD Connectivity check (preview)”\nEssentially all this does is to ignore looking for a domain controller and continue through the rest of the autopilot process. Normally, its going to need to be able to see a domain controller to authenticate me for the first time and thus create me a local profile which, in future, I can use to log on to the machine, offline, should there not be a domain controller in sight. And so historically, it looks for one and bombs the Autopilot process if it doesn’t find one. This option will skip that check and let it run through right to the login page. Although remember, if you cant connect some sort of VPN or have that line-of-sight, you simply wont be able to log on with your domain credentials outside of the corporate network.\nI tested this. It works. I cant log in.\nSo now I need to work on the FortiClient App which I intend to use to connect a VPN before logon. Its in Intune as a Win32 app so any configurations I need I should be able to just add to the script, redo the content and have it deploy. I need to ensure my settings are retained and deployed with the Intune app so I start digging around and trying to find out where they are stored.\nI install a clean version of Fortinet Client (in my case its version 6.0.9) onto a test VM and I configure it to how I want it. I load up the client and select to unlock the settings first..\nThen I proceed to untick what options I don’t require and making sure to tick the box for “Enable VPN before logon” (Vital!)\nIt is stated in the Microsoft Documentation that if your VPN solution supports connection before logon, then you should be able to make this work with any VPN solution. Previously there were named supported vendors. Worth noting.\nNext we’re going to go to “Remote Access” and then “Configure VPN” to set up our base details for the VPN Connection\nThen I’m going to configure my VPN, give it a name, the gateway IP and the port number. I just made up the below for illustration purposes so don’t shoot me if I cant use that port or that 1.2.3.4 isn’t a true IP address , you get the idea. I’m also going to leave “Prompt on login” selected rather than saving credentials.\nAnd finally hit save.\nSo we now have the basics configured.\nNext job was top somehow export that setup and have it deploy with the app deployed to the Autopilot profile. So I searched the registry and found where it was, the details are stored in HKEY_LOCAL_MACHINE\\SOFTWARE\\Fortinet\\FortiClient\\Sslvpn\\Tunnels\\My Test VPN\nGreat! So I export the key to a .reg file (the one pointed to in this image) and using my PSADT app I made I will add this during the “post-Installation” section.\nHere is the code in my PSADT Script..\nSo essentially using the existing reg.exe to import the .reg file you exported. You could break this down and have the keys created with PowerShell, but I was lazy and used this method. There are a few ways this can improve, I’m sure.\nI tested this with my PSADT script and it worked, so it now needs testing with Autopilot. I updated the Intune app content by creating a new .intunewin file and uploaded it ready to go. I added the app deployment where it needed to be and reset a laptop ready for the autopilot test. Next few pictures were taken from my phone so not the greatest. but here is the experience.\nOn the test device I added it to my network\nI can see the Autopilot profile has pulled in and it requests I logon\nAutopilot kicks off doing its thing…\nOK, so now that’s finished I’m faced with a logon screen, first thing I do is click on sign on options\nI can see here FortiClient has indeed installed during autopilot (WIN!)\nI have to scroll down and untick the box for “Use my Windows credentials for VPN” because my username and password for the VPN is indeed, separate to my windows creds\nThis opens up the creds box for the VPN\nThen I scroll back up and input my windows credentials for my on prem domain account and attempt to log in (fingers crossed)\n(I worked with the network provider to get the certificate on the machines during AP which stops this message but this is the message I got before I did this)\nBIG WIN!!!\nAaaaand Boom….. I’m logged in.\nVery happy with this. What I would like you to take away from this blog post is that this methodology, in theory, could be used for any VPN provider. As long as you can export your profile and have it install with the client during Autopilot and it support connection before logon, this could be implemented for any VPN solution.\nI would love to hear if you have got this working with any other VPN client\nThanks for reading Jonathan.\n"},{
  "section": "Articles",
  "slug": "/articles/bp-psadtintune/",
  "title": "PowerShell App Deployment Toolkit and Intune Win32 Apps",
  "description": "",
  "date": "September 11, 2020",
  "image": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n\n\n\n\n\n  \n\n  \n  \n    \n      \n    \n\n\n    \n    \n\n\n    \n    \n      \n      \n    \n    \n    \n\n\n    \n    \n      \n      \n        \n        \n        \n        \n        \n        \n\n\n        \n        \n\n\n        \u003cimg\n          \n            src=\"/images/title/psadt_intune_hu5c1e9785d68eb537350744836900f95e_84443_420x0_resize_q90_h2_lanczos_3.webp\" loading=\"lazy\" decoding=\"async\"\n          \n\n          alt=\"\"\n          class=\"  img\"\n          width=\"420\"\n          height=\"219\"\n          onerror=\"this.onerror='null';this.src='\\/images\\/title\\/psadt_intune_hu5c1e9785d68eb537350744836900f95e_84443_420x0_resize_lanczos_3.png';\" /\u003e\n\n        \n      \n      \n    \n    \n  \n\n\n  \n",
  "imageSM": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n\n\n\n\n\n  \n\n  \n  \n    \n      \n    \n\n\n    \n    \n\n\n    \n    \n      \n      \n    \n    \n    \n\n\n    \n    \n      \n      \n        \n        \n        \n        \n        \n        \n          \n          \n          \n          \n        \n\n\n        \n        \n\n\n        \u003cimg\n          \n            src=\"/images/title/psadt_intune_hu5c1e9785d68eb537350744836900f95e_84443_100x100_fill_q90_h2_lanczos_smart1_3.webp\" loading=\"lazy\" decoding=\"async\"\n          \n\n          alt=\"\"\n          class=\"  img\"\n          width=\"100\"\n          height=\"100\"\n          onerror=\"this.onerror='null';this.src='\\/images\\/title\\/psadt_intune_hu5c1e9785d68eb537350744836900f95e_84443_100x100_fill_lanczos_smart1_3.png';\" /\u003e\n\n        \n      \n      \n    \n    \n  \n\n\n  \n",
  "searchKeyword": "",
  "categories": "Intune, PowerShell",
  "tags": "App Packaging, Applications, Cloud, Endpoint Manager, Intune, Packaging, PowerShell",
  "content":"Hi Folks! Leading on from this post about getting started with PSADT, and as promised, I’m writing up my experience with it and creating Win32 Intune apps. So firstly, I’m assuming by now that you read and absorbed the first write up I did, you should have noticed that a couple of things I did in that post can actually be done differently and be eager and armed with understanding the format and have a good idea about what to do. Combine that with great ‘google-fu’ and you’re ready to continue your decent app packaging journey. Using this with ConfigMgr applications is quite simple because once you’ve prepared your application you use the root folder as the source content for the application and the rest is pretty straight forward (holler at me if you want that blogging too). Putting that into Intune however is slightly different. There are many blog posts about Intune Content Prep Tool however in a nut-shell, this tool will take your content (source) files for your application, and output a single .intunewin file which is the file format that Intune understands. So lets go ahead and download the tool from here and extract it to a local folder.\nThe following files should be in the extracted folder\nWhat we’re going to do is launch a cmd prompt as admin and browse to the folder that contains the files. This way if we have more that one app to create the executable wont exit when we’ve finished. When you launch the IntuneWinAppUtil.exe you will be asked three questions.\n“Who would Use the Intune app must answer me these questions three” …Monty Python (true story)\nPretty straight forward stuff, specify the sources folder (in our case this will be one of the subfolders we created by copying the TOOLKIT MASTER folder (see previous post), specify the setup file (note this is not the full install command with switches) in our case we’ll be specifying “deploy-application.ps1” which is the script that we’ll call when we want to install and uninstall the application in questions and finally the output folder for the .intunewin file we can import to Intune. The output file will take the format of [SetupFileName].intunewin so we’ll get deploy-application.intunewin. Remember if you’re making lots of Intune content files and they’re all made from PSADT, the output file will be the same so use different output folders. Next, we’ll move over to Intune now and start to import the application. Log into https://endpoint.microsoft.com/ and navigate to the apps blade, select to add a new app and chose the type of “Win32”.\nThen continue to populate the details of the app. In my example I’m using 7Zip. Here is the App Information section with the parts I’ve edited numbered\nNext is the Program section\nYou can see here is where we call the two PowerShell commands (coincidentally these will be the same commands used in ConfigMgr) You can set some Requirements of you own if you have them, I normally select Windows 10 1607 as the minimum OS and select the architecture based upon what I’m deploying. In the case of 7Zip I have downloaded just the x64 version of the application and then added an Execute-MSI statement in the PSADT code to install it. So my requirements might be this…\nAnd finally we have the Detection Methods. Normally I like to use the the DisplayVersion of the application that gets stored in the registry hives after installation but in some case you can just use the MSI Product Code. Generally (but not all the time remember!) you can use one of the following two hives to harvest information about the installed application.\nHKLM:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Uninstall HKLM:\\SOFTWARE\\Wow6432Node\\Microsoft\\Windows\\CurrentVersion\\Uninstall. I wrote a quick PowerShell script to go get the child object under these keys for you and bring back the PSChildName, DisplayName, DisplayVersion and (for use later) the Uninstall String that’s stored in the registry so that you can install the app on your test box using the PSADT script you created for testing. I use these lines of code so much. After its installed you can then harvest what you need from the registry for the detection method. Here is the code I use.\nCode Clear-Host $Hive = Get-ChildItem -Path HKLM:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Uninstall $Hive2 = Get-ChildItem -Path HKLM:\\SOFTWARE\\Wow6432Node\\Microsoft\\Windows\\CurrentVersion\\Uninstall Write-Host -ForegroundColor Green \u0026#34;x64 Registry Hive - HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Uninstall \u0026#34; $Hive | Get-ItemProperty | Select-Object -Property PSChildName, DisplayName, DisplayVersion, UninstallString | Sort-Object DisplayName | Format-Table -AutoSize -Wrap Write-Host -ForegroundColor Cyan \u0026#34;x86 Registry Hive - HKEY_LOCAL_MACHINE\\SOFTWARE\\Wow6432Node\\Microsoft\\Windows\\CurrentVersion\\Uninstall\u0026#34; $Hive2 | Get-ItemProperty | Select-Object -Property PSChildName, DisplayName, DisplayVersion, UninstallString | Sort-Object DisplayName | Format-Table -AutoSize -Wrap If you run this it’ll output to the PowerShell Console the keys (you can copy these straight into Intune detection clauses for Registry. And then you can select your column to use. Here is an example:\nFrom this I can take a number of things: Firstly, the registry hive key at the top in green text (cyan for the other hive) I can copy this out as first part of the Key path on an Intune Detection Method. Then I can append the PSChildName item for the individual key, so if I wanted my clause to be whether or not the registry key simply exists, I can use the RegistryHivePath+PSChildName (in red below).\nIf I wanted to use the Version number, for example I wanted to say greater than or equal to I could use the RegistryHivePath+PSChildName as the Key Path, then use the DisplayVersion as the Value Name and use the correct operator, like so….\nWhich gives me\u0026hellip;\nOk so now you have an idea on how to get your PSADT apps into Intune as Win32 Applications using the Intune Content Prep Tool, take a moment to go get a coffee as now we’ll move to testing them, once they’re finished uploading and syncing. First, we’ll need to set up an AAD group to deploy the applications to and to which we can assign our user who should have an Intune license. Deploying the applications as available is the most effective way to test the applications before we push them out as a required install, using something like autopilot. So lets go and set up a new group ready for deployment. Next manually add the user you’re deploying the application to, to the group. And finally edit the assignments of the application so that its assigned as Available to the group you want to test with. Remember – You (mostly want to) deploy the app to the user because the user holds the Intune license. Once its uploaded and synced you should see that in your company portal on the device. Open Company portal on the test device and log in with the username/password for the test user in the group we created above. Here we see our 7Zip Win32 App (Yes I know there’s a MSfB app for 7Zip, stay with me here… its the process I want you to learn). We then highlight and select to install Happy days! We can see here that it is indeed installed.\nTake Away Now, if there are issues (and this is the good bit for me!) don’t forget that PSADT apps log their own install and uninstall logs into C:\\Windows\\Logs\\Software however if you edit this to match the IntuneManagementExtension.log files location (C:\\ProgramData\\Microsoft\\IntuneManagementExtension\\Logs), you will have lovely logs to use for troubleshooting AND you can collect them remotely from the Intune portal!!\nOnce configured, you can use the “Collect Diagnostics” button and this will collect the logs remotely, without interrupting the end users. Wonderful!\nTHAT, I feel, is awesome and will help greatly with troubleshooting your Win32 Apps, should there be a problem I hope this helps you. Thanks for reading Jonathan.\n"},{
  "section": "Articles",
  "slug": "/articles/bp-psadt/",
  "title": "PowerShell App Deployment Toolkit Write Up",
  "description": "",
  "date": "August 19, 2020",
  "image": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n\n\n\n\n\n  \n\n  \n  \n    \n      \n    \n\n\n    \n    \n\n\n    \n    \n      \n      \n    \n    \n    \n\n\n    \n    \n      \n      \n        \n        \n        \n        \n        \n        \n\n\n        \n        \n\n\n        \u003cimg\n          \n            src=\"/images/title/psadt_hua1b44cb1e693ad26fc31926dfeaf550d_261060_420x0_resize_q90_h2_lanczos_3.webp\" loading=\"lazy\" decoding=\"async\"\n          \n\n          alt=\"\"\n          class=\"  img\"\n          width=\"420\"\n          height=\"217\"\n          onerror=\"this.onerror='null';this.src='\\/images\\/title\\/psadt_hua1b44cb1e693ad26fc31926dfeaf550d_261060_420x0_resize_lanczos_3.png';\" /\u003e\n\n        \n      \n      \n    \n    \n  \n\n\n  \n",
  "imageSM": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n\n\n\n\n\n  \n\n  \n  \n    \n      \n    \n\n\n    \n    \n\n\n    \n    \n      \n      \n    \n    \n    \n\n\n    \n    \n      \n      \n        \n        \n        \n        \n        \n        \n          \n          \n          \n          \n        \n\n\n        \n        \n\n\n        \u003cimg\n          \n            src=\"/images/title/psadt_hua1b44cb1e693ad26fc31926dfeaf550d_261060_100x100_fill_q90_h2_lanczos_smart1_3.webp\" loading=\"lazy\" decoding=\"async\"\n          \n\n          alt=\"\"\n          class=\"  img\"\n          width=\"100\"\n          height=\"100\"\n          onerror=\"this.onerror='null';this.src='\\/images\\/title\\/psadt_hua1b44cb1e693ad26fc31926dfeaf550d_261060_100x100_fill_lanczos_smart1_3.png';\" /\u003e\n\n        \n      \n      \n    \n    \n  \n\n\n  \n",
  "searchKeyword": "",
  "categories": "Intune, PowerShell, Configuration Manager",
  "tags": "Applications, ConfigMgr, Deployment, Intune, PowerShell",
  "content":"Hi all, thought I’d write up what I’ve been working on recently, which is re-visiting PowerShell App Deployment Toolkit. A great Resource for ConfigMgr apps, but equally it is supported in Intune so I will be doing a follow-up post on using this with Intune. I know there are plenty of blogs out there on this so this is just my interpretation and is intended to get people started. I know, for example, that the kit comes with a wide variety cmdlets that you can utilise to achieve tasks but this write up is based around getting those a little familiar with PowerShell up to speed with it. There are many ways to skin a cat.\nPrep Work Download the latest toolkit from here: https://psappdeploytoolkit.com/ Extract the .ZIP folder and call this folder “PSADT – FULL” Go into the folder, into the Toolkit folder and create a folder called “Files” (if it doesn’t exist already) This is where we’re going to store our source files for the applications we’re going to deploy. From within the FULL folder, copy the Toolkit folder out to the foot and call this “PSADT – TOOLKIT MASTER” TOOLKIT MASTER should only contain the following items\nNow you have a copy of the full kit that’s not been touched and a copy of the toolkit you can begin to customise for your customer(s).\nWorking with the TOOLKIT MASTER folder, Open up “Deploy-Application.ps1 and edit the following\u0026hellip; Comment out the “Show-InstallationWelcome” and Show-InstallationProgress\nDo the same for Pre-Uninstallation, comment them out… Under Post-Installation, comment out the line highlighted below The above actions make it more silent so the user isn’t bothered when installation takes place. These are options you may wish to reinstate later, the choice is up to you I’ll let you do your own research on that, but for now we’re aiming for not bothering the end user. Save the script. Next, within the AppDeployToolkit folder, open up the AppDeployToolkit.xml file and change the following Under MSI Options edit the install params to be /QN instead of /QB-!\nBranding You will need to brand the toolkit to your specific customer, otherwise it will be using the standard branding. From within the TOOLKIT MASTER, open up the “AppDeployToolkit” folder and replace the “AppDeployToolkitBanner.png” with a branded one (must be the same name!) Next, replace the Icon file (same folder) with a branded Icon file, again with the exact same name. To do this, create an image 256×256 pixels in size, then open the image using Greenshot and this will give you and option to save the image as a .ICO file You are now ready to use this toolkit in a silent manner for your ConfigMgr or Intune applications Process For each app you will need a COPY of the TOOLKIT MASTER folder, so lets start by creating one Next you will need to download your content files (source files) and place them in the ‘Files’ Directory. Now we can start editing the script to match the criteria of the application we’re trying to deploy. First, open up the DeployApplication.ps1 and scroll down to the “Variable Declaration” section where we’re going to populate all the details of the application we’re going to deploy. Lets fill this out, here is an example Now we’re ready to do the app work! You don’t need to worry about having in depth PowerShell (although some helps) with this script you simply only need to remember a few things. Firstly, there are three phases of installation in the script Pre-Installation – where you would place any code you want to execute BEFORE the app installs Installation – the app install itself Post Installation – where you would place any post actions such as copying files or registry entries or even clean up activities. I’m going to break these down in to a .EXE and a .MSI installation for you. MSI Example Read through the examples carefully and take in and fully understand the ‘Take Away’ section which is where I’ve highlighted what you should have learned. Scenario: Lets say that you have to install Flash Player (THE HORROR!), but before you do you have to create a folder called “C:\\Flash” which is what the company you’re working for want to use to store all their website flash content in. Strange, I know, but lets roll with it. So we have two things we need to achieve;\nwe need to install the program we need to create the folder. The folder creation, it doesn’t matter in this particular case whether we do it before or after the installation so we can place that in either “Pre-Installation” or “Post-Installation” step, I’m going to chose Post-Installation in this case.\nAs with traditional applications, MSI installs are pretty easy to do. The script has its own cmdlet to handle this called Execute-MSI (see the top tips section at the end!) So, firstly we would take a copy of the TOOLKIT MASTER folder and Rename it to “Adobe Flash” We would then open up the DeployApplication.ps1 and edit the Variable Declaration as stated above in the Process Section to match Adobe Flash and the version number etc. Next we would locate the “Installation section” and add in our installation line: I’ve blurred out the rest to draw your eyes to the correct section…. Notice the format of the string, it reads pretty straight forward, no more calling MSIEXEC.exe, dont worry about the format of the code as that will be explained later (see the top tips at the end!)\nYou can see here from the help for this cmdlet that the cmdlet called, Execute-MSI, expects the files to be in the “Files Directory” (highlighted in Blue). This is why we sense checked the folder earlier.\nNext we create the folder “C:\\Flash” as per the requirements. In the post-installation section, simple add your code… Again, I’ve blurred out the surrounding code to draw your attention to the section to use, you’ll start to pick up they follow the same format\nThere is a cmdlet you can use for this that build into the PSADT module, I’ll let you explore that! However this achieves the same thing\nLet populate the uninstall section so that we can uninstall the app using the script too… Notice that the ‘action’ switch has changed in this case.\nAnd that’s it, done. Save the script. You can test this before on a test box (which I suggest you do). When creating your ConfigMgr application, the command to install the application would be to call the DeployApplication.ps1 with a switch of -DeploymentType Install, like so…\nDeploy-Application.ps1 -DeploymentType Install The uninstall command would be Deploy-Applicaiton.ps1 -DeploymentType Uninstall Take Away Understand the structure of Pre, Post, and Install and what tasks need to be done when, given your requirements. Know that under the \u0026lt;\\Perform Tasks Here\u0026gt; sections, you can have as much code as you need, doing whatever tasks you want. Understand the cmdlet written for installing MSIs. You use Execute-MSI with a Install switch If you wanted to uninstall items before installing the new version, you could use “Start-Process” and call the uninstall with a -wait switch like so… Start-Process -FilePath “C:\\Windows\\system32\\msiexec.exe” -ArgumentList “/x{26923b43-4d38-484f-9b9e-de460746276c} /qn” -wait This would; Call msiexec that exists on all windows based machines Pass the argument list of uninstall, quietly with no UI. Wait until its finished before it does the next line of code, so if you had multiple install .EXE Example Scenario: Lets say that you have to install Flash Player (THE HORROR! AGAIN!!!), but before you do you have to create Registry Key “HKLM:\\Software\\Company\\Adobe\\Flash” with a string key in there called “Status” that has a setting of “Awesome” and an Integer key (DWORD) called “ReallyAwesome” with a setting of “00000001” which is what the company want, because they’re weird. The string key must be created BEFORE the application is installed and the Integer key must be created AFTER the software is installed. We know that the .exe accepts the switch /quiet for the install and also /uninstall /quiet for the uninstall, which we’ve gotten from normal testing. We need to..\nCreate the String Regkey (before install) Install the program Create the Integer Regkey (after Install) Set the uninstall up So lets create the first regkey, inside Pre-Installation Next we need to install the application Notice the difference here, we’re not using Execute-MSI this time. Starting a process Passing the arguments Adding -wait so it waits for the install to finish There are many ways to call .exe’s from PowerShell, doesn’t really matter what you use. Next we add the regkey we need to add AFTER the installation. Remember we set the path earlier on, in the Pre-Installation section so the variable $RegistryPath, is already there.\nAnd finally the uninstall section needs populating Hopefully this is beginning to make sense now…. Take Away Cement our understand the structure of Pre, Post, and Install section and what tasks need to be done when, given your requirements. Know that under the sections, you can have as much code as you need, doing whatever tasks you want. Calling executables is different as we cant leverage the Execute-MSI cmdlet, so we use Start-Process with a -wait on the end Top Tips Within the folder structure of your PSADT, there is a sub folder called “AppDeployToolkit” And in there you will find a script called AppDeployToolkitHelp.ps1\nIf you run this script you will launch the help section where you will have detailed instructions on the cmdlets available inside PSADT and how to use them.\nThe section highlighted with a red arrow is the name of the cmdlets you can use, and the green arrow points to the format of the code to use with some examples at the bottom. You will find almost everything you need in here to fit most of the requirements for app packaging. There are also plenty of tutorials you can access on YouTube to gain further understanding of this but it is very powerful indeed. Some of the items we commented out in at the beginning to make the user experience more silent, can be switched back on if you wish, we can make it as visual or silent as you wish, the more you use this tool the more you will realise its potential \u0026amp; scalability. It is supported in ConfigMgr and Intune (win32) Applications, but it does not negate the need for proper testing in the normal manner via VM’s and information gathering. Thanks for reading Jonathan.\n"},{
  "section": "Apps",
  "slug": "/apps/1password/",
  "title": "1Password",
  "description": "",
  "date": "January 1, 1",
  "image": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n\n\n\n\n\n  \n\n  \n  \n    \n      \n    \n\n\n    \n    \n\n\n    \n    \n      \n      \n    \n    \n    \n\n\n    \n    \n      \n      \n        \n        \n        \n        \n        \n        \n\n\n        \n        \n\n\n        \u003cimg\n          \n            src=\"/images/apps/1password_hu47bcd61725447998c4eb26bf6261d1b7_242848_420x0_resize_q90_h2_lanczos_3.webp\" loading=\"lazy\" decoding=\"async\"\n          \n\n          alt=\"\"\n          class=\"  img\"\n          width=\"420\"\n          height=\"420\"\n          onerror=\"this.onerror='null';this.src='\\/images\\/apps\\/1password_hu47bcd61725447998c4eb26bf6261d1b7_242848_420x0_resize_lanczos_3.png';\" /\u003e\n\n        \n      \n      \n    \n    \n  \n\n\n  \n",
  "imageSM": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n\n\n\n\n\n  \n\n  \n  \n    \n      \n    \n\n\n    \n    \n\n\n    \n    \n      \n      \n    \n    \n    \n\n\n    \n    \n      \n      \n        \n        \n        \n        \n        \n        \n          \n          \n          \n          \n        \n\n\n        \n        \n\n\n        \u003cimg\n          \n            src=\"/images/apps/1password_hu47bcd61725447998c4eb26bf6261d1b7_242848_100x100_fill_q90_h2_lanczos_smart1_3.webp\" loading=\"lazy\" decoding=\"async\"\n          \n\n          alt=\"\"\n          class=\"  img\"\n          width=\"100\"\n          height=\"100\"\n          onerror=\"this.onerror='null';this.src='\\/images\\/apps\\/1password_hu47bcd61725447998c4eb26bf6261d1b7_242848_100x100_fill_lanczos_smart1_3.png';\" /\u003e\n\n        \n      \n      \n    \n    \n  \n\n\n  \n",
  "searchKeyword": "",
  "categories": "",
  "tags": "",
  "content":"1Password makes it easy to generate, store, and autofill passwords for all your online accounts, on all your devices. Because weak and reused passwords are a leading cause of security incidents, using a password manager is an easy way to protect yourself, your family, or your business. This is an external link, no content is served from this website Download Here "},{
  "section": "Apps",
  "slug": "/apps/7zip/",
  "title": "7Zip",
  "description": "",
  "date": "January 1, 1",
  "image": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n\n\n\n\n\n  \n\n  \n  \n    \n      \n    \n\n\n    \n    \n\n\n    \n    \n      \n      \n    \n    \n    \n\n\n    \n    \n      \n      \n        \n        \n        \n        \n        \n        \n\n\n        \n        \n\n\n        \u003cimg\n          \n            src=\"/images/apps/7zip_huef0402bb8506c7770084063ea21339a6_27454_420x0_resize_q90_h2_lanczos_2.webp\" loading=\"lazy\" decoding=\"async\"\n          \n\n          alt=\"\"\n          class=\"  img\"\n          width=\"420\"\n          height=\"420\"\n          onerror=\"this.onerror='null';this.src='\\/images\\/apps\\/7zip_huef0402bb8506c7770084063ea21339a6_27454_420x0_resize_q90_h2_lanczos_2.webp';\" /\u003e\n\n        \n      \n      \n    \n    \n  \n\n\n  \n",
  "imageSM": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n\n\n\n\n\n  \n\n  \n  \n    \n      \n    \n\n\n    \n    \n\n\n    \n    \n      \n      \n    \n    \n    \n\n\n    \n    \n      \n      \n        \n        \n        \n        \n        \n        \n          \n          \n          \n          \n        \n\n\n        \n        \n\n\n        \u003cimg\n          \n            src=\"/images/apps/7zip_huef0402bb8506c7770084063ea21339a6_27454_100x100_fill_q90_h2_lanczos_smart1_2.webp\" loading=\"lazy\" decoding=\"async\"\n          \n\n          alt=\"\"\n          class=\"  img\"\n          width=\"100\"\n          height=\"100\"\n          onerror=\"this.onerror='null';this.src='\\/images\\/apps\\/7zip_huef0402bb8506c7770084063ea21339a6_27454_100x100_fill_q90_h2_lanczos_smart1_2.webp';\" /\u003e\n\n        \n      \n      \n    \n    \n  \n\n\n  \n",
  "searchKeyword": "",
  "categories": "",
  "tags": "",
  "content":"7-Zip is free software with open source. The most of the code is under the GNU LGPL license. Some parts of the code are under the BSD 3-clause License. Also there is unRAR license restriction for some parts of the code. Read 7-Zip License information.\nYou can use 7-Zip on any computer, including a computer in a commercial organization. You don\u0026rsquo;t need to register or pay for 7-Zip. This is an external link, no content is served from this website Download Here "},{
  "section": "Apps",
  "slug": "/apps/graphxray/",
  "title": "Graph Xray",
  "description": "",
  "date": "January 1, 1",
  "image": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n\n\n\n\n\n  \n\n  \n  \n    \n      \n    \n\n\n    \n    \n\n\n    \n    \n      \n      \n    \n    \n    \n\n\n    \n    \n      \n      \n        \n        \n        \n        \n        \n        \n\n\n        \n        \n\n\n        \u003cimg\n          \n            src=\"/images/apps/graphxray_hu9e1fb2594cb24a343e1fcc0bef0d545c_6088_420x0_resize_q90_h2_lanczos_3.webp\" loading=\"lazy\" decoding=\"async\"\n          \n\n          alt=\"\"\n          class=\"  img\"\n          width=\"420\"\n          height=\"420\"\n          onerror=\"this.onerror='null';this.src='\\/images\\/apps\\/graphxray_hu9e1fb2594cb24a343e1fcc0bef0d545c_6088_420x0_resize_lanczos_3.png';\" /\u003e\n\n        \n      \n      \n    \n    \n  \n\n\n  \n",
  "imageSM": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n\n\n\n\n\n  \n\n  \n  \n    \n      \n    \n\n\n    \n    \n\n\n    \n    \n      \n      \n    \n    \n    \n\n\n    \n    \n      \n      \n        \n        \n        \n        \n        \n        \n          \n          \n          \n          \n        \n\n\n        \n        \n\n\n        \u003cimg\n          \n            src=\"/images/apps/graphxray_hu9e1fb2594cb24a343e1fcc0bef0d545c_6088_100x100_fill_q90_h2_lanczos_smart1_3.webp\" loading=\"lazy\" decoding=\"async\"\n          \n\n          alt=\"\"\n          class=\"  img\"\n          width=\"100\"\n          height=\"100\"\n          onerror=\"this.onerror='null';this.src='\\/images\\/apps\\/graphxray_hu9e1fb2594cb24a343e1fcc0bef0d545c_6088_100x100_fill_lanczos_smart1_3.png';\" /\u003e\n\n        \n      \n      \n    \n    \n  \n\n\n  \n",
  "searchKeyword": "",
  "categories": "",
  "tags": "",
  "content":"View Graph and PowerShell API details as you browse the Microsoft portals. This is an external link, no content is served from this website Download Here "},{
  "section": "Apps",
  "slug": "/apps/greenshot/",
  "title": "Greenshot",
  "description": "",
  "date": "January 1, 1",
  "image": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n\n\n\n\n\n  \n\n  \n  \n    \n      \n    \n\n\n    \n    \n\n\n    \n    \n      \n      \n    \n    \n    \n\n\n    \n    \n      \n      \n        \n        \n        \n        \n        \n        \n\n\n        \n        \n\n\n        \u003cimg\n          \n            src=\"/images/apps/greenshot_hu5f4c4483df9457c175d760717bc2338e_17910_420x0_resize_q90_h2_lanczos.webp\" loading=\"lazy\" decoding=\"async\"\n          \n\n          alt=\"\"\n          class=\"  img\"\n          width=\"420\"\n          height=\"420\"\n          onerror=\"this.onerror='null';this.src='\\/images\\/apps\\/greenshot_hu5f4c4483df9457c175d760717bc2338e_17910_420x0_resize_q90_lanczos.jpg';\" /\u003e\n\n        \n      \n      \n    \n    \n  \n\n\n  \n",
  "imageSM": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n\n\n\n\n\n  \n\n  \n  \n    \n      \n    \n\n\n    \n    \n\n\n    \n    \n      \n      \n    \n    \n    \n\n\n    \n    \n      \n      \n        \n        \n        \n        \n        \n        \n          \n          \n          \n          \n        \n\n\n        \n        \n\n\n        \u003cimg\n          \n            src=\"/images/apps/greenshot_hu5f4c4483df9457c175d760717bc2338e_17910_100x100_fill_q90_h2_lanczos_smart1.webp\" loading=\"lazy\" decoding=\"async\"\n          \n\n          alt=\"\"\n          class=\"  img\"\n          width=\"100\"\n          height=\"100\"\n          onerror=\"this.onerror='null';this.src='\\/images\\/apps\\/greenshot_hu5f4c4483df9457c175d760717bc2338e_17910_100x100_fill_q90_lanczos_smart1.jpg';\" /\u003e\n\n        \n      \n      \n    \n    \n  \n\n\n  \n",
  "searchKeyword": "",
  "categories": "",
  "tags": "",
  "content":"Greenshot is a light-weight screenshot software tool for Windows with the following key features:\nQuickly create screenshots of a selected region, window or fullscreen; you can even capture complete (scrolling) web pages from Internet Explorer. Easily annotate, highlight or obfuscate parts of the screenshot. Export the screenshot in various ways: save to file, send to printer, copy to clipboard, attach to e-mail, send Office programs or upload to photo sites like Flickr or Picasa, and others. \u0026hellip;and a lot more options simplyfying creation of and work with screenshots every day. This is an external link, no content is served from this website Download Here "},{
  "section": "Apps",
  "slug": "/apps/notepadpp/",
  "title": "Notepad ++",
  "description": "",
  "date": "January 1, 1",
  "image": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n\n\n\n\n\n  \n\n  \n  \n    \n      \n    \n\n\n    \n    \n\n\n    \n    \n      \n      \n    \n    \n    \n\n\n    \n    \n      \n      \n        \n        \n        \n        \n        \n        \n\n\n        \n        \n\n\n        \u003cimg\n          \n            src=\"/images/apps/notepadpp_hueda11bc730fb0bf8c3f0f1c5efa98b60_185993_420x0_resize_q90_h2_lanczos_3.webp\" loading=\"lazy\" decoding=\"async\"\n          \n\n          alt=\"\"\n          class=\"  img\"\n          width=\"420\"\n          height=\"420\"\n          onerror=\"this.onerror='null';this.src='\\/images\\/apps\\/notepadpp_hueda11bc730fb0bf8c3f0f1c5efa98b60_185993_420x0_resize_lanczos_3.png';\" /\u003e\n\n        \n      \n      \n    \n    \n  \n\n\n  \n",
  "imageSM": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n\n\n\n\n\n  \n\n  \n  \n    \n      \n    \n\n\n    \n    \n\n\n    \n    \n      \n      \n    \n    \n    \n\n\n    \n    \n      \n      \n        \n        \n        \n        \n        \n        \n          \n          \n          \n          \n        \n\n\n        \n        \n\n\n        \u003cimg\n          \n            src=\"/images/apps/notepadpp_hueda11bc730fb0bf8c3f0f1c5efa98b60_185993_100x100_fill_q90_h2_lanczos_smart1_3.webp\" loading=\"lazy\" decoding=\"async\"\n          \n\n          alt=\"\"\n          class=\"  img\"\n          width=\"100\"\n          height=\"100\"\n          onerror=\"this.onerror='null';this.src='\\/images\\/apps\\/notepadpp_hueda11bc730fb0bf8c3f0f1c5efa98b60_185993_100x100_fill_lanczos_smart1_3.png';\" /\u003e\n\n        \n      \n      \n    \n    \n  \n\n\n  \n",
  "searchKeyword": "",
  "categories": "",
  "tags": "",
  "content":"Notepad++ is a free (as in “free speech” and also as in “free beer”) source code editor and Notepad replacement that supports several languages. Running in the MS Windows environment, its use is governed by GNU General Public License. This is an external link, no content is served from this website Download Here "},{
  "section": "Apps",
  "slug": "/apps/postman/",
  "title": "Postman",
  "description": "",
  "date": "January 1, 1",
  "image": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n\n\n\n\n\n  \n\n  \n  \n    \n      \n    \n\n\n    \n    \n\n\n    \n    \n      \n      \n    \n    \n    \n\n\n    \n    \n      \n      \n        \n        \n        \n        \n        \n        \n\n\n        \n        \n\n\n        \u003cimg\n          \n            src=\"/images/apps/postman_hub5365e852731a4f91e01841271963af8_50101_420x0_resize_q90_h2_lanczos.webp\" loading=\"lazy\" decoding=\"async\"\n          \n\n          alt=\"\"\n          class=\"  img\"\n          width=\"420\"\n          height=\"420\"\n          onerror=\"this.onerror='null';this.src='\\/images\\/apps\\/postman_hub5365e852731a4f91e01841271963af8_50101_420x0_resize_q90_lanczos.jpg';\" /\u003e\n\n        \n      \n      \n    \n    \n  \n\n\n  \n",
  "imageSM": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n\n\n\n\n\n  \n\n  \n  \n    \n      \n    \n\n\n    \n    \n\n\n    \n    \n      \n      \n    \n    \n    \n\n\n    \n    \n      \n      \n        \n        \n        \n        \n        \n        \n          \n          \n          \n          \n        \n\n\n        \n        \n\n\n        \u003cimg\n          \n            src=\"/images/apps/postman_hub5365e852731a4f91e01841271963af8_50101_100x100_fill_q90_h2_lanczos_smart1.webp\" loading=\"lazy\" decoding=\"async\"\n          \n\n          alt=\"\"\n          class=\"  img\"\n          width=\"100\"\n          height=\"100\"\n          onerror=\"this.onerror='null';this.src='\\/images\\/apps\\/postman_hub5365e852731a4f91e01841271963af8_50101_100x100_fill_q90_lanczos_smart1.jpg';\" /\u003e\n\n        \n      \n      \n    \n    \n  \n\n\n  \n",
  "searchKeyword": "",
  "categories": "",
  "tags": "",
  "content":"Postman is an API platform for building and using APIs. Postman simplifies each step of the API lifecycle and streamlines collaboration so you can create better APIs—faster. This is an external link, no content is served from this website Download Here "},{
  "section": "Apps",
  "slug": "/apps/powerbi/",
  "title": "PowerBI Desktop",
  "description": "",
  "date": "January 1, 1",
  "image": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n\n\n\n\n\n  \n\n  \n  \n    \n      \n    \n\n\n    \n    \n\n\n    \n    \n      \n      \n    \n    \n    \n\n\n    \n    \n      \n      \n        \n        \n        \n        \n        \n        \n\n\n        \n        \n\n\n        \u003cimg\n          \n            src=\"/images/apps/powerbi_hu8a17fb3c25661f7d53c837633ba5bc5d_8649_420x0_resize_q90_h2_lanczos_3.webp\" loading=\"lazy\" decoding=\"async\"\n          \n\n          alt=\"\"\n          class=\"  img\"\n          width=\"420\"\n          height=\"420\"\n          onerror=\"this.onerror='null';this.src='\\/images\\/apps\\/powerbi_hu8a17fb3c25661f7d53c837633ba5bc5d_8649_420x0_resize_lanczos_3.png';\" /\u003e\n\n        \n      \n      \n    \n    \n  \n\n\n  \n",
  "imageSM": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n\n\n\n\n\n  \n\n  \n  \n    \n      \n    \n\n\n    \n    \n\n\n    \n    \n      \n      \n    \n    \n    \n\n\n    \n    \n      \n      \n        \n        \n        \n        \n        \n        \n          \n          \n          \n          \n        \n\n\n        \n        \n\n\n        \u003cimg\n          \n            src=\"/images/apps/powerbi_hu8a17fb3c25661f7d53c837633ba5bc5d_8649_100x100_fill_q90_h2_lanczos_smart1_3.webp\" loading=\"lazy\" decoding=\"async\"\n          \n\n          alt=\"\"\n          class=\"  img\"\n          width=\"100\"\n          height=\"100\"\n          onerror=\"this.onerror='null';this.src='\\/images\\/apps\\/powerbi_hu8a17fb3c25661f7d53c837633ba5bc5d_8649_100x100_fill_lanczos_smart1_3.png';\" /\u003e\n\n        \n      \n      \n    \n    \n  \n\n\n  \n",
  "searchKeyword": "",
  "categories": "",
  "tags": "",
  "content":"Whether you’re on the go or need to create rich, interactive reports, download the tools you need to build reports and stay connected to your data from anywhere, anytime. Get a 360° view of your business data on the go—at the touch of your fingers—and quickly connect, shape, visualize, and share data insights through Power BI. This is an external link, no content is served from this website Download Here "},{
  "section": "Apps",
  "slug": "/apps/psadt/",
  "title": "PSADT",
  "description": "",
  "date": "January 1, 1",
  "image": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n\n\n\n\n\n  \n\n  \n  \n    \n      \n    \n\n\n    \n    \n\n\n    \n    \n      \n      \n    \n    \n    \n\n\n    \n    \n      \n      \n        \n        \n        \n        \n        \n        \n\n\n        \n        \n\n\n        \u003cimg\n          \n            src=\"/images/apps/AppDeployToolkitLogo_hu6914918961484f958b6ae959bba327f1_255562_420x0_resize_q90_h2_lanczos_3.webp\" loading=\"lazy\" decoding=\"async\"\n          \n\n          alt=\"\"\n          class=\"  img\"\n          width=\"420\"\n          height=\"417\"\n          onerror=\"this.onerror='null';this.src='\\/images\\/apps\\/AppDeployToolkitLogo_hu6914918961484f958b6ae959bba327f1_255562_420x0_resize_lanczos_3.png';\" /\u003e\n\n        \n      \n      \n    \n    \n  \n\n\n  \n",
  "imageSM": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n\n\n\n\n\n  \n\n  \n  \n    \n      \n    \n\n\n    \n    \n\n\n    \n    \n      \n      \n    \n    \n    \n\n\n    \n    \n      \n      \n        \n        \n        \n        \n        \n        \n          \n          \n          \n          \n        \n\n\n        \n        \n\n\n        \u003cimg\n          \n            src=\"/images/apps/AppDeployToolkitLogo_hu6914918961484f958b6ae959bba327f1_255562_100x100_fill_q90_h2_lanczos_smart1_3.webp\" loading=\"lazy\" decoding=\"async\"\n          \n\n          alt=\"\"\n          class=\"  img\"\n          width=\"100\"\n          height=\"100\"\n          onerror=\"this.onerror='null';this.src='\\/images\\/apps\\/AppDeployToolkitLogo_hu6914918961484f958b6ae959bba327f1_255562_100x100_fill_lanczos_smart1_3.png';\" /\u003e\n\n        \n      \n      \n    \n    \n  \n\n\n  \n",
  "searchKeyword": "",
  "categories": "",
  "tags": "",
  "content":"PowerShell App Deployment Toolkit (PSADT) is a versatile solution that streamlines and standardizes the process of software deployment, making it easier than ever to manage your IT environment. It has a comprehensive set of features, such as dynamic logging, user interaction capabilities, and customizable functionality. This is an external link, no content is served from this website - Download available from the Github link Download Here "},{
  "section": "Apps",
  "slug": "/apps/vscode/",
  "title": "Visual Studio Code",
  "description": "",
  "date": "January 1, 1",
  "image": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n\n\n\n\n\n  \n\n  \n  \n    \n      \n    \n\n\n    \n    \n\n\n    \n    \n      \n      \n    \n    \n    \n\n\n    \n    \n      \n      \n        \n        \n        \n        \n        \n        \n\n\n        \n        \n\n\n        \u003cimg\n          \n            src=\"/images/apps/vscode_hubaba52b3c2c2014e532a68166d7ca31a_12326_420x0_resize_q90_h2_lanczos.webp\" loading=\"lazy\" decoding=\"async\"\n          \n\n          alt=\"\"\n          class=\"  img\"\n          width=\"420\"\n          height=\"420\"\n          onerror=\"this.onerror='null';this.src='\\/images\\/apps\\/vscode_hubaba52b3c2c2014e532a68166d7ca31a_12326_420x0_resize_q90_lanczos.jpg';\" /\u003e\n\n        \n      \n      \n    \n    \n  \n\n\n  \n",
  "imageSM": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n\n\n\n\n\n  \n\n  \n  \n    \n      \n    \n\n\n    \n    \n\n\n    \n    \n      \n      \n    \n    \n    \n\n\n    \n    \n      \n      \n        \n        \n        \n        \n        \n        \n          \n          \n          \n          \n        \n\n\n        \n        \n\n\n        \u003cimg\n          \n            src=\"/images/apps/vscode_hubaba52b3c2c2014e532a68166d7ca31a_12326_100x100_fill_q90_h2_lanczos_smart1.webp\" loading=\"lazy\" decoding=\"async\"\n          \n\n          alt=\"\"\n          class=\"  img\"\n          width=\"100\"\n          height=\"100\"\n          onerror=\"this.onerror='null';this.src='\\/images\\/apps\\/vscode_hubaba52b3c2c2014e532a68166d7ca31a_12326_100x100_fill_q90_lanczos_smart1.jpg';\" /\u003e\n\n        \n      \n      \n    \n    \n  \n\n\n  \n",
  "searchKeyword": "",
  "categories": "",
  "tags": "",
  "content":"Visual Studio Code is a free, lightweight, and extensible code editor for building web, desktop, and mobile applications, using any programming language and framework.\nVisual Studio Code has built-in support for Git source control management and powerful integrations with GitHub, an integrated debugger, and smart code completion with IntelliSense and with AI-driven IntelliCode. With over 30,000 extensions and themes in the Visual Studio Code Marketplace, you can customize the features and the look of Visual Studio Code to fit your needs, preferences, and style.\nYou can use Visual Studio Code to build any kind of app, for web, desktop, and mobile. Visual Studio Code supports JavaScript and TypeScript natively and offers extensions for coding in languages such as Python, Java, C/C++, C#, Go, Rust, PHP, and many more. This is an external link, no content is served from this website Download Here "}]
